(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react-dom'), require('react-dom/server'), require('luxon')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react-dom', 'react-dom/server', 'luxon'], factory) :
    (global = global || self, factory(global.VXA = {}, global.ReactDOM, global.ReactDOMServer, global.luxon));
}(this, (function (exports, ReactDOM, ReactDOMServer, luxon) { 'use strict';

    ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
    ReactDOMServer = ReactDOMServer && Object.prototype.hasOwnProperty.call(ReactDOMServer, 'default') ? ReactDOMServer['default'] : ReactDOMServer;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
    	if (val === null || val === undefined) {
    		throw new TypeError('Object.assign cannot be called with null or undefined');
    	}

    	return Object(val);
    }

    function shouldUseNative() {
    	try {
    		if (!Object.assign) {
    			return false;
    		}

    		// Detect buggy property enumeration order in older V8 versions.

    		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
    		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
    		test1[5] = 'de';
    		if (Object.getOwnPropertyNames(test1)[0] === '5') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test2 = {};
    		for (var i = 0; i < 10; i++) {
    			test2['_' + String.fromCharCode(i)] = i;
    		}
    		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    			return test2[n];
    		});
    		if (order2.join('') !== '0123456789') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test3 = {};
    		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    			test3[letter] = letter;
    		});
    		if (Object.keys(Object.assign({}, test3)).join('') !==
    				'abcdefghijklmnopqrst') {
    			return false;
    		}

    		return true;
    	} catch (err) {
    		// We don't expect any of the above to throw, but better to be safe.
    		return false;
    	}
    }

    var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    	var from;
    	var to = toObject(target);
    	var symbols;

    	for (var s = 1; s < arguments.length; s++) {
    		from = Object(arguments[s]);

    		for (var key in from) {
    			if (hasOwnProperty.call(from, key)) {
    				to[key] = from[key];
    			}
    		}

    		if (getOwnPropertySymbols) {
    			symbols = getOwnPropertySymbols(from);
    			for (var i = 0; i < symbols.length; i++) {
    				if (propIsEnumerable.call(from, symbols[i])) {
    					to[symbols[i]] = from[symbols[i]];
    				}
    			}
    		}
    	}

    	return to;
    };

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

    var ReactPropTypesSecret_1 = ReactPropTypesSecret;

    var printWarning = function() {};

    {
      var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
      var loggedTypeFailures = {};
      var has = Function.call.bind(Object.prototype.hasOwnProperty);

      printWarning = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }

    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param {object} typeSpecs Map of name to a ReactPropType
     * @param {object} values Runtime values that need to be type-checked
     * @param {string} location e.g. "prop", "context", "child context"
     * @param {string} componentName Name of the component for error messages.
     * @param {?Function} getStack Returns the component stack.
     * @private
     */
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error(
                  (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                  'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
                );
                err.name = 'Invariant Violation';
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || 'React class') + ': type specification of ' +
                location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                'You may have forgotten to pass an argument to the type checker ' +
                'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                'shape all require an argument).'
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error.message] = true;

              var stack = getStack ? getStack() : '';

              printWarning(
                'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
              );
            }
          }
        }
      }
    }

    /**
     * Resets warning cache when testing.
     *
     * @private
     */
    checkPropTypes.resetWarningCache = function() {
      {
        loggedTypeFailures = {};
      }
    };

    var checkPropTypes_1 = checkPropTypes;

    var react_development = createCommonjsModule(function (module, exports) {



    {
      (function() {

    var _assign = objectAssign;
    var checkPropTypes = checkPropTypes_1;

    var ReactVersion = '16.13.1';

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }

    /**
     * Keeps track of the current dispatcher.
     */
    var ReactCurrentDispatcher = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };

    /**
     * Keeps track of the current batch's configuration such as how long an update
     * should suspend for if it needs to.
     */
    var ReactCurrentBatchConfig = {
      suspense: null
    };

    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */
    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
    function describeComponentFrame (name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');

        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }

        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    }

    var Resolved = 1;
    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return "Profiler";

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';

        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_BLOCK_TYPE:
            return getComponentName(type.render);

          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);

              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }

              break;
            }
        }
      }

      return null;
    }

    var ReactDebugCurrentFrame = {};
    var currentlyValidatingElement = null;
    function setCurrentlyValidatingElement(element) {
      {
        currentlyValidatingElement = element;
      }
    }

    {
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = ''; // Add an extra top frame while an element is being validated

        if (currentlyValidatingElement) {
          var name = getComponentName(currentlyValidatingElement.type);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
        } // Delegate to the injected renderer-specific implementation


        var impl = ReactDebugCurrentFrame.getCurrentStack;

        if (impl) {
          stack += impl() || '';
        }

        return stack;
      };
    }

    /**
     * Used by act() to track whether you're inside an act() scope.
     */
    var IsSomeRendererActing = {
      current: false
    };

    var ReactSharedInternals = {
      ReactCurrentDispatcher: ReactCurrentDispatcher,
      ReactCurrentBatchConfig: ReactCurrentBatchConfig,
      ReactCurrentOwner: ReactCurrentOwner,
      IsSomeRendererActing: IsSomeRendererActing,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };

    {
      _assign(ReactSharedInternals, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {}
      });
    }

    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.

    function warn(format) {
      {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        printWarning('warn', format, args);
      }
    }
    function error(format) {
      {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        printWarning('error', format, args);
      }
    }

    function printWarning(level, format, args) {
      // When changing this logic, you might want to also
      // update consoleWithStackDev.www.js as well.
      {
        var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

        if (!hasExistingStack) {
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame.getStackAddendum();

          if (stack !== '') {
            format += '%s';
            args = args.concat([stack]);
          }
        }

        var argsWithFormat = args.map(function (item) {
          return '' + item;
        }); // Careful: RN currently depends on this prefix

        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging

        Function.prototype.apply.call(console[level], console, argsWithFormat);

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      }
    }

    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;

        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }

        error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
     * This is the abstract API for an update queue.
     */


    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function (publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };

    var emptyObject = {};

    {
      Object.freeze(emptyObject);
    }
    /**
     * Base class helpers for the updating state of a component.
     */


    function Component(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */

    Component.prototype.setState = function (partialState, callback) {
      if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
        {
          throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
        }
      }

      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */


    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */


    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };

      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function () {
            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

            return undefined;
          }
        });
      };

      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    function ComponentDummy() {}

    ComponentDummy.prototype = Component.prototype;
    /**
     * Convenience component with default shallow equality check for sCU.
     */

    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }

    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

    _assign(pureComponentPrototype, Component.prototype);

    pureComponentPrototype.isPureReactComponent = true;

    // an immutable object with a single mutable value
    function createRef() {
      var refObject = {
        current: null
      };

      {
        Object.seal(refObject);
      }

      return refObject;
    }

    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

    {
      didWarnAboutStringRefs = {};
    }

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }

      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }

      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;

            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        }
      };

      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;

            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
          }
        }
      };

      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }

    function warnIfStringRefCannotBeAutoConverted(config) {
      {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
          var componentName = getComponentName(ReactCurrentOwner.current.type);

          if (!didWarnAboutStringRefs[componentName]) {
            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, instanceof check
     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} props
     * @param {*} key
     * @param {string|object} ref
     * @param {*} owner
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @internal
     */


    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };

      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });

        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }

      return element;
    };
    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */

    function createElement(type, config, children) {
      var propName; // Reserved names are extracted

      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;

          {
            warnIfStringRefCannotBeAutoConverted(config);
          }
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }

        props.children = childArray;
      } // Resolve default props


      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;

        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }

      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }

          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }

      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */

    function cloneElement(element, config, children) {
      if (!!(element === null || element === undefined)) {
        {
          throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
        }
      }

      var propName; // Original props are copied

      var props = _assign({}, element.props); // Reserved names are extracted


      var key = element.key;
      var ref = element.ref; // Self is preserved since the owner is preserved.

      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.

      var source = element._source; // Owner will be preserved, unless ref is overridden

      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        } // Remaining properties override existing props


        var defaultProps;

        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */

    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */

    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */


    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;

    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];

    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;

      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }
    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children;

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      var invokeCallback = false;

      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;

          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }

        }
      }

      if (invokeCallback) {
        callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child;
      var nextName;
      var subtreeCount = 0; // Count of children found in the current subtree.

      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {

          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              if (!didWarnAboutMaps) {
                warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
              }

              didWarnAboutMaps = true;
            }
          }

          var iterator = iteratorFn.call(children);
          var step;
          var ii = 0;

          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';

          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
          }

          var childrenString = '' + children;

          {
            {
              throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum );
            }
          }
        }
      }

      return subtreeCount;
    }
    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }
    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */


    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof component === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      } // Implicit key determined by the index in the set


      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;
      func.call(context, child, bookKeeping.count++);
    }
    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */


    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }

      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;
      var mappedChild = func.call(context, child, bookKeeping.count++);

      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
          return c;
        });
      } else if (mappedChild != null) {
        if (isValidElement(mappedChild)) {
          mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }

        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';

      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }

      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }
    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */


    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }

      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */


    function countChildren(children) {
      return traverseAllChildren(children, function () {
        return null;
      }, null);
    }
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */


    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
        return child;
      });
      return result;
    }
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */


    function onlyChild(children) {
      if (!isValidElement(children)) {
        {
          throw Error( "React.Children.only expected to receive a single React element child." );
        }
      }

      return children;
    }

    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
            error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
          }
        }
      }

      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // Used to track how many concurrent renderers this context currently
        // supports within in a single renderer. Such as parallel server rendering.
        _threadCount: 0,
        // These are circular
        Provider: null,
        Consumer: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;

      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context,
          _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

        Object.defineProperties(Consumer, {
          Provider: {
            get: function () {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;

                error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }

              return context.Provider;
            },
            set: function (_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function () {
              return context._currentValue;
            },
            set: function (_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function () {
              return context._currentValue2;
            },
            set: function (_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function () {
              return context._threadCount;
            },
            set: function (_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function () {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;

                error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }

              return context.Consumer;
            }
          }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

        context.Consumer = Consumer;
      }

      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }

      return context;
    }

    function lazy(ctor) {
      var lazyType = {
        $$typeof: REACT_LAZY_TYPE,
        _ctor: ctor,
        // React uses these fields to store the result.
        _status: -1,
        _result: null
      };

      {
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes;
        Object.defineProperties(lazyType, {
          defaultProps: {
            configurable: true,
            get: function () {
              return defaultProps;
            },
            set: function (newDefaultProps) {
              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

              defaultProps = newDefaultProps; // Match production behavior more closely:

              Object.defineProperty(lazyType, 'defaultProps', {
                enumerable: true
              });
            }
          },
          propTypes: {
            configurable: true,
            get: function () {
              return propTypes;
            },
            set: function (newPropTypes) {
              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

              propTypes = newPropTypes; // Match production behavior more closely:

              Object.defineProperty(lazyType, 'propTypes', {
                enumerable: true
              });
            }
          }
        });
      }

      return lazyType;
    }

    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
        } else if (typeof render !== 'function') {
          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        } else {
          if (render.length !== 0 && render.length !== 2) {
            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
          }
        }

        if (render != null) {
          if (render.defaultProps != null || render.propTypes != null) {
            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
          }
        }
      }

      return {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
    }

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }

    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
        }
      }

      return {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
    }

    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;

      if (!(dispatcher !== null)) {
        {
          throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
        }
      }

      return dispatcher;
    }

    function useContext(Context, unstable_observedBits) {
      var dispatcher = resolveDispatcher();

      {
        if (unstable_observedBits !== undefined) {
          error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
        } // TODO: add a more generic warning for invalid values.


        if (Context._context !== undefined) {
          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
          // and nobody should be using this in existing code.

          if (realContext.Consumer === Context) {
            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
          } else if (realContext.Provider === Context) {
            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
          }
        }
      }

      return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
      {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
      }
    }

    var propTypesMisspellWarningShown;

    {
      propTypesMisspellWarningShown = false;
    }

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);

        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }

      return '';
    }

    function getSourceInfoErrorAddendum(source) {
      if (source !== undefined) {
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }

      return '';
    }

    function getSourceInfoErrorAddendumForProps(elementProps) {
      if (elementProps !== null && elementProps !== undefined) {
        return getSourceInfoErrorAddendum(elementProps.__source);
      }

      return '';
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */


    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

        if (parentName) {
          info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
      }

      return info;
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */


    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }

      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.

      var childOwner = '';

      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
      }

      setCurrentlyValidatingElement(element);

      {
        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
      }

      setCurrentlyValidatingElement(null);
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */


    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }

      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];

          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);

        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step;

            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */


    function validatePropTypes(element) {
      {
        var type = element.type;

        if (type === null || type === undefined || typeof type === 'string') {
          return;
        }

        var name = getComponentName(type);
        var propTypes;

        if (typeof type === 'function') {
          propTypes = type.propTypes;
        } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }

        if (propTypes) {
          setCurrentlyValidatingElement(element);
          checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
          setCurrentlyValidatingElement(null);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;

          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
        }

        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */


    function validateFragmentProps(fragment) {
      {
        setCurrentlyValidatingElement(fragment);
        var keys = Object.keys(fragment.props);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];

          if (key !== 'children' && key !== 'key') {
            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

            break;
          }
        }

        if (fragment.ref !== null) {
          error('Invalid attribute `ref` supplied to `React.Fragment`.');
        }

        setCurrentlyValidatingElement(null);
      }
    }
    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.

      if (!validType) {
        var info = '';

        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendumForProps(props);

        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        var typeString;

        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }

        {
          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }
      }

      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.

      if (element == null) {
        return element;
      } // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)


      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type;

      {
        if (!didWarnAboutDeprecatedCreateFactory) {
          didWarnAboutDeprecatedCreateFactory = true;

          warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
        } // Legacy hook: remove it


        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }

      return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);

      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }

      validatePropTypes(newElement);
      return newElement;
    }

    {

      try {
        var frozenObject = Object.freeze({});
        var testMap = new Map([[frozenObject, null]]);
        var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
        // https://github.com/rollup/rollup/issues/1771
        // TODO: we can remove these if Rollup fixes the bug.

        testMap.set(0, 0);
        testSet.add(0);
      } catch (e) {
      }
    }

    var createElement$1 =  createElementWithValidation ;
    var cloneElement$1 =  cloneElementWithValidation ;
    var createFactory =  createFactoryWithValidation ;
    var Children = {
      map: mapChildren,
      forEach: forEachChildren,
      count: countChildren,
      toArray: toArray,
      only: onlyChild
    };

    exports.Children = Children;
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
      })();
    }
    });
    var react_development_1 = react_development.Children;
    var react_development_2 = react_development.Component;
    var react_development_3 = react_development.Fragment;
    var react_development_4 = react_development.Profiler;
    var react_development_5 = react_development.PureComponent;
    var react_development_6 = react_development.StrictMode;
    var react_development_7 = react_development.Suspense;
    var react_development_8 = react_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var react_development_9 = react_development.cloneElement;
    var react_development_10 = react_development.createContext;
    var react_development_11 = react_development.createElement;
    var react_development_12 = react_development.createFactory;
    var react_development_13 = react_development.createRef;
    var react_development_14 = react_development.forwardRef;
    var react_development_15 = react_development.isValidElement;
    var react_development_16 = react_development.lazy;
    var react_development_17 = react_development.memo;
    var react_development_18 = react_development.useCallback;
    var react_development_19 = react_development.useContext;
    var react_development_20 = react_development.useDebugValue;
    var react_development_21 = react_development.useEffect;
    var react_development_22 = react_development.useImperativeHandle;
    var react_development_23 = react_development.useLayoutEffect;
    var react_development_24 = react_development.useMemo;
    var react_development_25 = react_development.useReducer;
    var react_development_26 = react_development.useRef;
    var react_development_27 = react_development.useState;
    var react_development_28 = react_development.version;

    var react = createCommonjsModule(function (module) {

    {
      module.exports = react_development;
    }
    });
    var react_1 = react.Children;
    var react_2 = react.Component;
    var react_3 = react.PropTypes;
    var react_4 = react.createContext;
    var react_5 = react.Fragment;
    var react_6 = react.Suspense;
    var react_7 = react.lazy;
    var react_8 = react.createElement;
    var react_9 = react.isValidElement;
    var react_10 = react.cloneElement;
    var react_11 = react.useState;
    var react_12 = react.useEffect;
    var react_13 = react.useContext;
    var react_14 = react.useReducer;
    var react_15 = react.useCallback;
    var react_16 = react.useMemo;
    var react_17 = react.useRef;
    var react_18 = react.useImperativeHandle;
    var react_19 = react.useLayoutEffect;
    var react_20 = react.useDebugValue;
    var react_21 = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

    var React = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': react,
        __moduleExports: react,
        Children: react_1,
        Component: react_2,
        PropTypes: react_3,
        createContext: react_4,
        Fragment: react_5,
        Suspense: react_6,
        lazy: react_7,
        createElement: react_8,
        isValidElement: react_9,
        cloneElement: react_10,
        useState: react_11,
        useEffect: react_12,
        useContext: react_13,
        useReducer: react_14,
        useCallback: react_15,
        useMemo: react_16,
        useRef: react_17,
        useImperativeHandle: react_18,
        useLayoutEffect: react_19,
        useDebugValue: react_20,
        __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: react_21
    });

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }

    var reactIs_development = createCommonjsModule(function (module, exports) {



    {
      (function() {

    Object.defineProperty(exports, '__esModule', { value: true });

    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;

    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
    // (unstable) APIs that have been removed. Can we remove the symbols?
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' ||
      // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE);
    }

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.warn(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }

    var lowPriorityWarning$1 = lowPriorityWarning;

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;
        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;
              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;
                  default:
                    return $$typeof;
                }
            }
          case REACT_LAZY_TYPE:
          case REACT_MEMO_TYPE:
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    }

    // AsyncMode is deprecated along with isAsyncMode
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;

    var hasWarnedAboutDeprecatedIsAsyncMode = false;

    // AsyncMode should be deprecated
    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.typeOf = typeOf;
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isValidElementType = isValidElementType;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
      })();
    }
    });

    unwrapExports(reactIs_development);
    var reactIs_development_1 = reactIs_development.typeOf;
    var reactIs_development_2 = reactIs_development.AsyncMode;
    var reactIs_development_3 = reactIs_development.ConcurrentMode;
    var reactIs_development_4 = reactIs_development.ContextConsumer;
    var reactIs_development_5 = reactIs_development.ContextProvider;
    var reactIs_development_6 = reactIs_development.Element;
    var reactIs_development_7 = reactIs_development.ForwardRef;
    var reactIs_development_8 = reactIs_development.Fragment;
    var reactIs_development_9 = reactIs_development.Lazy;
    var reactIs_development_10 = reactIs_development.Memo;
    var reactIs_development_11 = reactIs_development.Portal;
    var reactIs_development_12 = reactIs_development.Profiler;
    var reactIs_development_13 = reactIs_development.StrictMode;
    var reactIs_development_14 = reactIs_development.Suspense;
    var reactIs_development_15 = reactIs_development.isValidElementType;
    var reactIs_development_16 = reactIs_development.isAsyncMode;
    var reactIs_development_17 = reactIs_development.isConcurrentMode;
    var reactIs_development_18 = reactIs_development.isContextConsumer;
    var reactIs_development_19 = reactIs_development.isContextProvider;
    var reactIs_development_20 = reactIs_development.isElement;
    var reactIs_development_21 = reactIs_development.isForwardRef;
    var reactIs_development_22 = reactIs_development.isFragment;
    var reactIs_development_23 = reactIs_development.isLazy;
    var reactIs_development_24 = reactIs_development.isMemo;
    var reactIs_development_25 = reactIs_development.isPortal;
    var reactIs_development_26 = reactIs_development.isProfiler;
    var reactIs_development_27 = reactIs_development.isStrictMode;
    var reactIs_development_28 = reactIs_development.isSuspense;

    var reactIs = createCommonjsModule(function (module) {

    {
      module.exports = reactIs_development;
    }
    });
    var reactIs_1 = reactIs.isValidElementType;

    var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning$1 = function() {};

    {
      printWarning$1 = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };
    }

    function emptyFunctionThatReturnsNull() {
      return null;
    }

    var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
      /* global Symbol */
      var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

      /**
       * Returns the iterator method function contained on the iterable object.
       *
       * Be sure to invoke the function with the iterable as context:
       *
       *     var iteratorFn = getIteratorFn(myIterable);
       *     if (iteratorFn) {
       *       var iterator = iteratorFn.call(myIterable);
       *       ...
       *     }
       *
       * @param {?object} maybeIterable
       * @return {?function}
       */
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') {
          return iteratorFn;
        }
      }

      /**
       * Collection of methods that allow declaration and validation of props that are
       * supplied to React components. Example usage:
       *
       *   var Props = require('ReactPropTypes');
       *   var MyArticle = React.createClass({
       *     propTypes: {
       *       // An optional string prop named "description".
       *       description: Props.string,
       *
       *       // A required enum prop named "category".
       *       category: Props.oneOf(['News','Photos']).isRequired,
       *
       *       // A prop named "dialog" that requires an instance of Dialog.
       *       dialog: Props.instanceOf(Dialog).isRequired
       *     },
       *     render: function() { ... }
       *   });
       *
       * A more formal specification of how these methods are used:
       *
       *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
       *   decl := ReactPropTypes.{type}(.isRequired)?
       *
       * Each and every declaration produces a function with the same signature. This
       * allows the creation of custom validation functions. For example:
       *
       *  var MyLink = React.createClass({
       *    propTypes: {
       *      // An optional string or URI prop named "href".
       *      href: function(props, propName, componentName) {
       *        var propValue = props[propName];
       *        if (propValue != null && typeof propValue !== 'string' &&
       *            !(propValue instanceof URI)) {
       *          return new Error(
       *            'Expected a string or an URI for ' + propName + ' in ' +
       *            componentName
       *          );
       *        }
       *      }
       *    },
       *    render: function() {...}
       *  });
       *
       * @internal
       */

      var ANONYMOUS = '<<anonymous>>';

      // Important!
      // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),

        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker,
      };

      /**
       * inlined Object.is polyfill to avoid requiring consumers ship their own
       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
       */
      /*eslint-disable no-self-compare*/
      function is(x, y) {
        // SameValue algorithm
        if (x === y) {
          // Steps 1-5, 7-10
          // Steps 6.b-6.e: +0 != -0
          return x !== 0 || 1 / x === 1 / y;
        } else {
          // Step 6.a: NaN == NaN
          return x !== x && y !== y;
        }
      }
      /*eslint-enable no-self-compare*/

      /**
       * We use an Error-like object for backward compatibility as people may call
       * PropTypes directly and inspect their output. However, we don't use real
       * Errors anymore. We don't inspect their stack anyway, and creating them
       * is prohibitively expensive if they are created too often, such as what
       * happens in oneOfType() for any type before the one that matched.
       */
      function PropTypeError(message) {
        this.message = message;
        this.stack = '';
      }
      // Make `instanceof Error` still work for returned errors.
      PropTypeError.prototype = Error.prototype;

      function createChainableTypeChecker(validate) {
        {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;

          if (secret !== ReactPropTypesSecret_1) {
            if (throwOnDirectAccess) {
              // New behavior only for users of `prop-types` package
              var err = new Error(
                'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                'Use `PropTypes.checkPropTypes()` to call them. ' +
                'Read more at http://fb.me/use-check-prop-types'
              );
              err.name = 'Invariant Violation';
              throw err;
            } else if ( typeof console !== 'undefined') {
              // Old behavior for people using React.PropTypes
              var cacheKey = componentName + ':' + propName;
              if (
                !manualPropTypeCallCache[cacheKey] &&
                // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3
              ) {
                printWarning$1(
                  'You are manually calling a React.PropTypes validation ' +
                  'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
                  'and will throw in the standalone `prop-types` package. ' +
                  'You may be seeing this warning due to a third-party PropTypes ' +
                  'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
              }
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }

        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);

        return chainedCheckType;
      }

      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            // `propValue` being instance of, say, date/regexp, pass the 'object'
            // check, but we can offer a more precise error message here rather than
            // 'of type `object`'.
            var preciseType = getPreciseType(propValue);

            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }

      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!reactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          {
            if (arguments.length > 1) {
              printWarning$1(
                'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
                'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
              );
            } else {
              printWarning$1('Invalid argument supplied to oneOf, expected an array.');
            }
          }
          return emptyFunctionThatReturnsNull;
        }

        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }

          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === 'symbol') {
              return String(value);
            }
            return value;
          });
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
      }

      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== 'function') {
            return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
          }
          for (var key in propValue) {
            if (has$1(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
           printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') ;
          return emptyFunctionThatReturnsNull;
        }

        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== 'function') {
            printWarning$1(
              'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
              'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
            );
            return emptyFunctionThatReturnsNull;
          }
        }

        function validate(props, propName, componentName, location, propFullName) {
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
              return null;
            }
          }

          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
        }
        return createChainableTypeChecker(validate);
      }

      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (!checker) {
              continue;
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }

      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== 'object') {
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
          }
          // We need to check all keys in case some are required but missing from
          // props.
          var allKeys = objectAssign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (!checker) {
              return new PropTypeError(
                'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
                '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
                '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
            if (error) {
              return error;
            }
          }
          return null;
        }

        return createChainableTypeChecker(validate);
      }

      function isNode(propValue) {
        switch (typeof propValue) {
          case 'number':
          case 'string':
          case 'undefined':
            return true;
          case 'boolean':
            return !propValue;
          case 'object':
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }

            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                // Iterator will provide entry [k,v] tuples rather than values.
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }

            return true;
          default:
            return false;
        }
      }

      function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') {
          return true;
        }

        // falsy value can't be a Symbol
        if (!propValue) {
          return false;
        }

        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') {
          return true;
        }

        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
          return true;
        }

        return false;
      }

      // Equivalent of `typeof` but with special handling for array and regexp.
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return 'array';
        }
        if (propValue instanceof RegExp) {
          // Old webkits (at least until Android 4.0) return 'function' rather than
          // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
          // passes PropTypes.object.
          return 'object';
        }
        if (isSymbol(propType, propValue)) {
          return 'symbol';
        }
        return propType;
      }

      // This handles more types than `getPropType`. Only used for error messages.
      // See `createPrimitiveTypeChecker`.
      function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
          return '' + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === 'object') {
          if (propValue instanceof Date) {
            return 'date';
          } else if (propValue instanceof RegExp) {
            return 'regexp';
          }
        }
        return propType;
      }

      // Returns a string that is postfixed to a warning about an invalid type.
      // For example, "undefined" or "of type array"
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case 'array':
          case 'object':
            return 'an ' + type;
          case 'boolean':
          case 'date':
          case 'regexp':
            return 'a ' + type;
          default:
            return type;
        }
      }

      // Returns class name of the object, if any.
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }

      ReactPropTypes.checkPropTypes = checkPropTypes_1;
      ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;

      return ReactPropTypes;
    };

    var propTypes = createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    {
      var ReactIs = reactIs;

      // By explicitly using `prop-types` you are opting into new development behavior.
      // http://fb.me/prop-types-in-prod
      var throwOnDirectAccess = true;
      module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
    }
    });

    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends.apply(this, arguments);
    }

    function isAbsolute(pathname) {
      return pathname.charAt(0) === '/';
    }

    // About 1.5x faster than the two-arg version of Array#splice()
    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
        list[i] = list[k];
      }

      list.pop();
    }

    // This implementation is based heavily on node's url.parse
    function resolvePathname(to, from) {
      if (from === undefined) from = '';

      var toParts = (to && to.split('/')) || [];
      var fromParts = (from && from.split('/')) || [];

      var isToAbs = to && isAbsolute(to);
      var isFromAbs = from && isAbsolute(from);
      var mustEndAbs = isToAbs || isFromAbs;

      if (to && isAbsolute(to)) {
        // to is absolute
        fromParts = toParts;
      } else if (toParts.length) {
        // to is relative, drop the filename
        fromParts.pop();
        fromParts = fromParts.concat(toParts);
      }

      if (!fromParts.length) return '/';

      var hasTrailingSlash;
      if (fromParts.length) {
        var last = fromParts[fromParts.length - 1];
        hasTrailingSlash = last === '.' || last === '..' || last === '';
      } else {
        hasTrailingSlash = false;
      }

      var up = 0;
      for (var i = fromParts.length; i >= 0; i--) {
        var part = fromParts[i];

        if (part === '.') {
          spliceOne(fromParts, i);
        } else if (part === '..') {
          spliceOne(fromParts, i);
          up++;
        } else if (up) {
          spliceOne(fromParts, i);
          up--;
        }
      }

      if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');

      if (
        mustEndAbs &&
        fromParts[0] !== '' &&
        (!fromParts[0] || !isAbsolute(fromParts[0]))
      )
        fromParts.unshift('');

      var result = fromParts.join('/');

      if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

      return result;
    }

    function valueOf(obj) {
      return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
    }

    function valueEqual(a, b) {
      // Test for strict equality first.
      if (a === b) return true;

      // Otherwise, if either of them == null they are not equal.
      if (a == null || b == null) return false;

      if (Array.isArray(a)) {
        return (
          Array.isArray(b) &&
          a.length === b.length &&
          a.every(function(item, index) {
            return valueEqual(item, b[index]);
          })
        );
      }

      if (typeof a === 'object' || typeof b === 'object') {
        var aValue = valueOf(a);
        var bValue = valueOf(b);

        if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

        return Object.keys(Object.assign({}, a, b)).every(function(key) {
          return valueEqual(a[key], b[key]);
        });
      }

      return false;
    }

    function warning(condition, message) {
      {
        if (condition) {
          return;
        }

        var text = "Warning: " + message;

        if (typeof console !== 'undefined') {
          console.warn(text);
        }

        try {
          throw Error(text);
        } catch (x) {}
      }
    }

    var prefix = 'Invariant failed';
    function invariant(condition, message) {
      if (condition) {
        return;
      }

      {
        throw new Error(prefix + ": " + (message || ''));
      }
    }

    function addLeadingSlash(path) {
      return path.charAt(0) === '/' ? path : '/' + path;
    }
    function stripLeadingSlash(path) {
      return path.charAt(0) === '/' ? path.substr(1) : path;
    }
    function hasBasename(path, prefix) {
      return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;
    }
    function stripBasename(path, prefix) {
      return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
    }
    function stripTrailingSlash(path) {
      return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
    }
    function parsePath(path) {
      var pathname = path || '/';
      var search = '';
      var hash = '';
      var hashIndex = pathname.indexOf('#');

      if (hashIndex !== -1) {
        hash = pathname.substr(hashIndex);
        pathname = pathname.substr(0, hashIndex);
      }

      var searchIndex = pathname.indexOf('?');

      if (searchIndex !== -1) {
        search = pathname.substr(searchIndex);
        pathname = pathname.substr(0, searchIndex);
      }

      return {
        pathname: pathname,
        search: search === '?' ? '' : search,
        hash: hash === '#' ? '' : hash
      };
    }
    function createPath(location) {
      var pathname = location.pathname,
          search = location.search,
          hash = location.hash;
      var path = pathname || '/';
      if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
      if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
      return path;
    }

    function createLocation(path, state, key, currentLocation) {
      var location;

      if (typeof path === 'string') {
        // Two-arg form: push(path, state)
        location = parsePath(path);
        location.state = state;
      } else {
        // One-arg form: push(location)
        location = _extends({}, path);
        if (location.pathname === undefined) location.pathname = '';

        if (location.search) {
          if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
        } else {
          location.search = '';
        }

        if (location.hash) {
          if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
        } else {
          location.hash = '';
        }

        if (state !== undefined && location.state === undefined) location.state = state;
      }

      try {
        location.pathname = decodeURI(location.pathname);
      } catch (e) {
        if (e instanceof URIError) {
          throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
        } else {
          throw e;
        }
      }

      if (key) location.key = key;

      if (currentLocation) {
        // Resolve incomplete/relative pathname relative to current location.
        if (!location.pathname) {
          location.pathname = currentLocation.pathname;
        } else if (location.pathname.charAt(0) !== '/') {
          location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
        }
      } else {
        // When there is no prior location and pathname is empty, set it to /
        if (!location.pathname) {
          location.pathname = '/';
        }
      }

      return location;
    }
    function locationsAreEqual(a, b) {
      return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);
    }

    function createTransitionManager() {
      var prompt = null;

      function setPrompt(nextPrompt) {
         warning(prompt == null, 'A history supports only one prompt at a time') ;
        prompt = nextPrompt;
        return function () {
          if (prompt === nextPrompt) prompt = null;
        };
      }

      function confirmTransitionTo(location, action, getUserConfirmation, callback) {
        // TODO: If another transition starts while we're still confirming
        // the previous one, we may end up in a weird state. Figure out the
        // best way to handle this.
        if (prompt != null) {
          var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

          if (typeof result === 'string') {
            if (typeof getUserConfirmation === 'function') {
              getUserConfirmation(result, callback);
            } else {
               warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message') ;
              callback(true);
            }
          } else {
            // Return false from a transition hook to cancel the transition.
            callback(result !== false);
          }
        } else {
          callback(true);
        }
      }

      var listeners = [];

      function appendListener(fn) {
        var isActive = true;

        function listener() {
          if (isActive) fn.apply(void 0, arguments);
        }

        listeners.push(listener);
        return function () {
          isActive = false;
          listeners = listeners.filter(function (item) {
            return item !== listener;
          });
        };
      }

      function notifyListeners() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        listeners.forEach(function (listener) {
          return listener.apply(void 0, args);
        });
      }

      return {
        setPrompt: setPrompt,
        confirmTransitionTo: confirmTransitionTo,
        appendListener: appendListener,
        notifyListeners: notifyListeners
      };
    }

    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
    function getConfirmation(message, callback) {
      callback(window.confirm(message)); // eslint-disable-line no-alert
    }
    /**
     * Returns true if the HTML5 history API is supported. Taken from Modernizr.
     *
     * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
     * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
     * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
     */

    function supportsHistory() {
      var ua = window.navigator.userAgent;
      if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
      return window.history && 'pushState' in window.history;
    }
    /**
     * Returns true if browser fires popstate on hash change.
     * IE10 and IE11 do not.
     */

    function supportsPopStateOnHashChange() {
      return window.navigator.userAgent.indexOf('Trident') === -1;
    }
    /**
     * Returns false if using go(n) with hash history causes a full page reload.
     */

    function supportsGoWithoutReloadUsingHash() {
      return window.navigator.userAgent.indexOf('Firefox') === -1;
    }
    /**
     * Returns true if a given popstate event is an extraneous WebKit event.
     * Accounts for the fact that Chrome on iOS fires real popstate events
     * containing undefined state when pressing the back button.
     */

    function isExtraneousPopstateEvent(event) {
      return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
    }

    var PopStateEvent = 'popstate';
    var HashChangeEvent = 'hashchange';

    function getHistoryState() {
      try {
        return window.history.state || {};
      } catch (e) {
        // IE 11 sometimes throws when accessing window.history.state
        // See https://github.com/ReactTraining/history/pull/289
        return {};
      }
    }
    /**
     * Creates a history object that uses the HTML5 history API including
     * pushState, replaceState, and the popstate event.
     */


    function createBrowserHistory(props) {
      if (props === void 0) {
        props = {};
      }

      !canUseDOM ?  invariant(false, 'Browser history needs a DOM')  : void 0;
      var globalHistory = window.history;
      var canUseHistory = supportsHistory();
      var needsHashChangeListener = !supportsPopStateOnHashChange();
      var _props = props,
          _props$forceRefresh = _props.forceRefresh,
          forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
          _props$getUserConfirm = _props.getUserConfirmation,
          getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
          _props$keyLength = _props.keyLength,
          keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
      var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

      function getDOMLocation(historyState) {
        var _ref = historyState || {},
            key = _ref.key,
            state = _ref.state;

        var _window$location = window.location,
            pathname = _window$location.pathname,
            search = _window$location.search,
            hash = _window$location.hash;
        var path = pathname + search + hash;
         warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') ;
        if (basename) path = stripBasename(path, basename);
        return createLocation(path, state, key);
      }

      function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
      }

      var transitionManager = createTransitionManager();

      function setState(nextState) {
        _extends(history, nextState);

        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
      }

      function handlePopState(event) {
        // Ignore extraneous popstate events in WebKit.
        if (isExtraneousPopstateEvent(event)) return;
        handlePop(getDOMLocation(event.state));
      }

      function handleHashChange() {
        handlePop(getDOMLocation(getHistoryState()));
      }

      var forceNextPop = false;

      function handlePop(location) {
        if (forceNextPop) {
          forceNextPop = false;
          setState();
        } else {
          var action = 'POP';
          transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (ok) {
              setState({
                action: action,
                location: location
              });
            } else {
              revertPop(location);
            }
          });
        }
      }

      function revertPop(fromLocation) {
        var toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of keys we've seen in sessionStorage.
        // Instead, we just default to 0 for keys we don't know.

        var toIndex = allKeys.indexOf(toLocation.key);
        if (toIndex === -1) toIndex = 0;
        var fromIndex = allKeys.indexOf(fromLocation.key);
        if (fromIndex === -1) fromIndex = 0;
        var delta = toIndex - fromIndex;

        if (delta) {
          forceNextPop = true;
          go(delta);
        }
      }

      var initialLocation = getDOMLocation(getHistoryState());
      var allKeys = [initialLocation.key]; // Public interface

      function createHref(location) {
        return basename + createPath(location);
      }

      function push(path, state) {
         warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
        var action = 'PUSH';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          var href = createHref(location);
          var key = location.key,
              state = location.state;

          if (canUseHistory) {
            globalHistory.pushState({
              key: key,
              state: state
            }, null, href);

            if (forceRefresh) {
              window.location.href = href;
            } else {
              var prevIndex = allKeys.indexOf(history.location.key);
              var nextKeys = allKeys.slice(0, prevIndex + 1);
              nextKeys.push(location.key);
              allKeys = nextKeys;
              setState({
                action: action,
                location: location
              });
            }
          } else {
             warning(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') ;
            window.location.href = href;
          }
        });
      }

      function replace(path, state) {
         warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
        var action = 'REPLACE';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          var href = createHref(location);
          var key = location.key,
              state = location.state;

          if (canUseHistory) {
            globalHistory.replaceState({
              key: key,
              state: state
            }, null, href);

            if (forceRefresh) {
              window.location.replace(href);
            } else {
              var prevIndex = allKeys.indexOf(history.location.key);
              if (prevIndex !== -1) allKeys[prevIndex] = location.key;
              setState({
                action: action,
                location: location
              });
            }
          } else {
             warning(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') ;
            window.location.replace(href);
          }
        });
      }

      function go(n) {
        globalHistory.go(n);
      }

      function goBack() {
        go(-1);
      }

      function goForward() {
        go(1);
      }

      var listenerCount = 0;

      function checkDOMListeners(delta) {
        listenerCount += delta;

        if (listenerCount === 1 && delta === 1) {
          window.addEventListener(PopStateEvent, handlePopState);
          if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
        } else if (listenerCount === 0) {
          window.removeEventListener(PopStateEvent, handlePopState);
          if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
        }
      }

      var isBlocked = false;

      function block(prompt) {
        if (prompt === void 0) {
          prompt = false;
        }

        var unblock = transitionManager.setPrompt(prompt);

        if (!isBlocked) {
          checkDOMListeners(1);
          isBlocked = true;
        }

        return function () {
          if (isBlocked) {
            isBlocked = false;
            checkDOMListeners(-1);
          }

          return unblock();
        };
      }

      function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function () {
          checkDOMListeners(-1);
          unlisten();
        };
      }

      var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
      };
      return history;
    }

    var HashChangeEvent$1 = 'hashchange';
    var HashPathCoders = {
      hashbang: {
        encodePath: function encodePath(path) {
          return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
        },
        decodePath: function decodePath(path) {
          return path.charAt(0) === '!' ? path.substr(1) : path;
        }
      },
      noslash: {
        encodePath: stripLeadingSlash,
        decodePath: addLeadingSlash
      },
      slash: {
        encodePath: addLeadingSlash,
        decodePath: addLeadingSlash
      }
    };

    function stripHash(url) {
      var hashIndex = url.indexOf('#');
      return hashIndex === -1 ? url : url.slice(0, hashIndex);
    }

    function getHashPath() {
      // We can't use window.location.hash here because it's not
      // consistent across browsers - Firefox will pre-decode it!
      var href = window.location.href;
      var hashIndex = href.indexOf('#');
      return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
    }

    function pushHashPath(path) {
      window.location.hash = path;
    }

    function replaceHashPath(path) {
      window.location.replace(stripHash(window.location.href) + '#' + path);
    }

    function createHashHistory(props) {
      if (props === void 0) {
        props = {};
      }

      !canUseDOM ?  invariant(false, 'Hash history needs a DOM')  : void 0;
      var globalHistory = window.history;
      var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
      var _props = props,
          _props$getUserConfirm = _props.getUserConfirmation,
          getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
          _props$hashType = _props.hashType,
          hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
      var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
      var _HashPathCoders$hashT = HashPathCoders[hashType],
          encodePath = _HashPathCoders$hashT.encodePath,
          decodePath = _HashPathCoders$hashT.decodePath;

      function getDOMLocation() {
        var path = decodePath(getHashPath());
         warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') ;
        if (basename) path = stripBasename(path, basename);
        return createLocation(path);
      }

      var transitionManager = createTransitionManager();

      function setState(nextState) {
        _extends(history, nextState);

        history.length = globalHistory.length;
        transitionManager.notifyListeners(history.location, history.action);
      }

      var forceNextPop = false;
      var ignorePath = null;

      function locationsAreEqual$$1(a, b) {
        return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;
      }

      function handleHashChange() {
        var path = getHashPath();
        var encodedPath = encodePath(path);

        if (path !== encodedPath) {
          // Ensure we always have a properly-encoded hash.
          replaceHashPath(encodedPath);
        } else {
          var location = getDOMLocation();
          var prevLocation = history.location;
          if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.

          if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

          ignorePath = null;
          handlePop(location);
        }
      }

      function handlePop(location) {
        if (forceNextPop) {
          forceNextPop = false;
          setState();
        } else {
          var action = 'POP';
          transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
            if (ok) {
              setState({
                action: action,
                location: location
              });
            } else {
              revertPop(location);
            }
          });
        }
      }

      function revertPop(fromLocation) {
        var toLocation = history.location; // TODO: We could probably make this more reliable by
        // keeping a list of paths we've seen in sessionStorage.
        // Instead, we just default to 0 for paths we don't know.

        var toIndex = allPaths.lastIndexOf(createPath(toLocation));
        if (toIndex === -1) toIndex = 0;
        var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
        if (fromIndex === -1) fromIndex = 0;
        var delta = toIndex - fromIndex;

        if (delta) {
          forceNextPop = true;
          go(delta);
        }
      } // Ensure the hash is encoded properly before doing anything else.


      var path = getHashPath();
      var encodedPath = encodePath(path);
      if (path !== encodedPath) replaceHashPath(encodedPath);
      var initialLocation = getDOMLocation();
      var allPaths = [createPath(initialLocation)]; // Public interface

      function createHref(location) {
        var baseTag = document.querySelector('base');
        var href = '';

        if (baseTag && baseTag.getAttribute('href')) {
          href = stripHash(window.location.href);
        }

        return href + '#' + encodePath(basename + createPath(location));
      }

      function push(path, state) {
         warning(state === undefined, 'Hash history cannot push state; it is ignored') ;
        var action = 'PUSH';
        var location = createLocation(path, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          var path = createPath(location);
          var encodedPath = encodePath(basename + path);
          var hashChanged = getHashPath() !== encodedPath;

          if (hashChanged) {
            // We cannot tell if a hashchange was caused by a PUSH, so we'd
            // rather setState here and ignore the hashchange. The caveat here
            // is that other hash histories in the page will consider it a POP.
            ignorePath = path;
            pushHashPath(encodedPath);
            var prevIndex = allPaths.lastIndexOf(createPath(history.location));
            var nextPaths = allPaths.slice(0, prevIndex + 1);
            nextPaths.push(path);
            allPaths = nextPaths;
            setState({
              action: action,
              location: location
            });
          } else {
             warning(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') ;
            setState();
          }
        });
      }

      function replace(path, state) {
         warning(state === undefined, 'Hash history cannot replace state; it is ignored') ;
        var action = 'REPLACE';
        var location = createLocation(path, undefined, undefined, history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          var path = createPath(location);
          var encodedPath = encodePath(basename + path);
          var hashChanged = getHashPath() !== encodedPath;

          if (hashChanged) {
            // We cannot tell if a hashchange was caused by a REPLACE, so we'd
            // rather setState here and ignore the hashchange. The caveat here
            // is that other hash histories in the page will consider it a POP.
            ignorePath = path;
            replaceHashPath(encodedPath);
          }

          var prevIndex = allPaths.indexOf(createPath(history.location));
          if (prevIndex !== -1) allPaths[prevIndex] = path;
          setState({
            action: action,
            location: location
          });
        });
      }

      function go(n) {
         warning(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') ;
        globalHistory.go(n);
      }

      function goBack() {
        go(-1);
      }

      function goForward() {
        go(1);
      }

      var listenerCount = 0;

      function checkDOMListeners(delta) {
        listenerCount += delta;

        if (listenerCount === 1 && delta === 1) {
          window.addEventListener(HashChangeEvent$1, handleHashChange);
        } else if (listenerCount === 0) {
          window.removeEventListener(HashChangeEvent$1, handleHashChange);
        }
      }

      var isBlocked = false;

      function block(prompt) {
        if (prompt === void 0) {
          prompt = false;
        }

        var unblock = transitionManager.setPrompt(prompt);

        if (!isBlocked) {
          checkDOMListeners(1);
          isBlocked = true;
        }

        return function () {
          if (isBlocked) {
            isBlocked = false;
            checkDOMListeners(-1);
          }

          return unblock();
        };
      }

      function listen(listener) {
        var unlisten = transitionManager.appendListener(listener);
        checkDOMListeners(1);
        return function () {
          checkDOMListeners(-1);
          unlisten();
        };
      }

      var history = {
        length: globalHistory.length,
        action: 'POP',
        location: initialLocation,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        block: block,
        listen: listen
      };
      return history;
    }

    function clamp(n, lowerBound, upperBound) {
      return Math.min(Math.max(n, lowerBound), upperBound);
    }
    /**
     * Creates a history object that stores locations in memory.
     */


    function createMemoryHistory(props) {
      if (props === void 0) {
        props = {};
      }

      var _props = props,
          getUserConfirmation = _props.getUserConfirmation,
          _props$initialEntries = _props.initialEntries,
          initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
          _props$initialIndex = _props.initialIndex,
          initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
          _props$keyLength = _props.keyLength,
          keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
      var transitionManager = createTransitionManager();

      function setState(nextState) {
        _extends(history, nextState);

        history.length = history.entries.length;
        transitionManager.notifyListeners(history.location, history.action);
      }

      function createKey() {
        return Math.random().toString(36).substr(2, keyLength);
      }

      var index = clamp(initialIndex, 0, initialEntries.length - 1);
      var entries = initialEntries.map(function (entry) {
        return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
      }); // Public interface

      var createHref = createPath;

      function push(path, state) {
         warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
        var action = 'PUSH';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          var prevIndex = history.index;
          var nextIndex = prevIndex + 1;
          var nextEntries = history.entries.slice(0);

          if (nextEntries.length > nextIndex) {
            nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
          } else {
            nextEntries.push(location);
          }

          setState({
            action: action,
            location: location,
            index: nextIndex,
            entries: nextEntries
          });
        });
      }

      function replace(path, state) {
         warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') ;
        var action = 'REPLACE';
        var location = createLocation(path, state, createKey(), history.location);
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (!ok) return;
          history.entries[history.index] = location;
          setState({
            action: action,
            location: location
          });
        });
      }

      function go(n) {
        var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
        var action = 'POP';
        var location = history.entries[nextIndex];
        transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
          if (ok) {
            setState({
              action: action,
              location: location,
              index: nextIndex
            });
          } else {
            // Mimic the behavior of DOM histories by
            // causing a render after a cancelled POP.
            setState();
          }
        });
      }

      function goBack() {
        go(-1);
      }

      function goForward() {
        go(1);
      }

      function canGo(n) {
        var nextIndex = history.index + n;
        return nextIndex >= 0 && nextIndex < history.entries.length;
      }

      function block(prompt) {
        if (prompt === void 0) {
          prompt = false;
        }

        return transitionManager.setPrompt(prompt);
      }

      function listen(listener) {
        return transitionManager.appendListener(listener);
      }

      var history = {
        length: entries.length,
        action: 'POP',
        location: entries[index],
        index: index,
        entries: entries,
        createHref: createHref,
        push: push,
        replace: replace,
        go: go,
        goBack: goBack,
        goForward: goForward,
        canGo: canGo,
        block: block,
        listen: listen
      };
      return history;
    }

    function _inheritsLoose$1(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }

    var inheritsLoose = _inheritsLoose$1;

    var key = '__global_unique_id__';

    var gud = function() {
      return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
    };

    var MAX_SIGNED_31_BIT_INT = 1073741823;

    function objectIs(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }

    function createEventEmitter(value) {
      var handlers = [];
      return {
        on: function on(handler) {
          handlers.push(handler);
        },
        off: function off(handler) {
          handlers = handlers.filter(function (h) {
            return h !== handler;
          });
        },
        get: function get() {
          return value;
        },
        set: function set(newValue, changedBits) {
          value = newValue;
          handlers.forEach(function (handler) {
            return handler(value, changedBits);
          });
        }
      };
    }

    function onlyChild(children) {
      return Array.isArray(children) ? children[0] : children;
    }

    function createReactContext(defaultValue, calculateChangedBits) {
      var _Provider$childContex, _Consumer$contextType;

      var contextProp = '__create-react-context-' + gud() + '__';

      var Provider =
      /*#__PURE__*/
      function (_Component) {
        inheritsLoose(Provider, _Component);

        function Provider() {
          var _this;

          _this = _Component.apply(this, arguments) || this;
          _this.emitter = createEventEmitter(_this.props.value);
          return _this;
        }

        var _proto = Provider.prototype;

        _proto.getChildContext = function getChildContext() {
          var _ref;

          return _ref = {}, _ref[contextProp] = this.emitter, _ref;
        };

        _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          if (this.props.value !== nextProps.value) {
            var oldValue = this.props.value;
            var newValue = nextProps.value;
            var changedBits;

            if (objectIs(oldValue, newValue)) {
              changedBits = 0;
            } else {
              changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

              {
                warning((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);
              }

              changedBits |= 0;

              if (changedBits !== 0) {
                this.emitter.set(nextProps.value, changedBits);
              }
            }
          }
        };

        _proto.render = function render() {
          return this.props.children;
        };

        return Provider;
      }(react_2);

      Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = propTypes.object.isRequired, _Provider$childContex);

      var Consumer =
      /*#__PURE__*/
      function (_Component2) {
        inheritsLoose(Consumer, _Component2);

        function Consumer() {
          var _this2;

          _this2 = _Component2.apply(this, arguments) || this;
          _this2.state = {
            value: _this2.getValue()
          };

          _this2.onUpdate = function (newValue, changedBits) {
            var observedBits = _this2.observedBits | 0;

            if ((observedBits & changedBits) !== 0) {
              _this2.setState({
                value: _this2.getValue()
              });
            }
          };

          return _this2;
        }

        var _proto2 = Consumer.prototype;

        _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          var observedBits = nextProps.observedBits;
          this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
        };

        _proto2.componentDidMount = function componentDidMount() {
          if (this.context[contextProp]) {
            this.context[contextProp].on(this.onUpdate);
          }

          var observedBits = this.props.observedBits;
          this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
        };

        _proto2.componentWillUnmount = function componentWillUnmount() {
          if (this.context[contextProp]) {
            this.context[contextProp].off(this.onUpdate);
          }
        };

        _proto2.getValue = function getValue() {
          if (this.context[contextProp]) {
            return this.context[contextProp].get();
          } else {
            return defaultValue;
          }
        };

        _proto2.render = function render() {
          return onlyChild(this.props.children)(this.state.value);
        };

        return Consumer;
      }(react_2);

      Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = propTypes.object, _Consumer$contextType);
      return {
        Provider: Provider,
        Consumer: Consumer
      };
    }

    var index = react.createContext || createReactContext;

    var isarray = Array.isArray || function (arr) {
      return Object.prototype.toString.call(arr) == '[object Array]';
    };

    /**
     * Expose `pathToRegexp`.
     */
    var pathToRegexp_1 = pathToRegexp;
    var parse_1 = parse;
    var compile_1 = compile;
    var tokensToFunction_1 = tokensToFunction;
    var tokensToRegExp_1 = tokensToRegExp;

    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */
    var PATH_REGEXP = new RegExp([
      // Match escaped characters that would otherwise appear in future matches.
      // This allows the user to escape special characters that won't transform.
      '(\\\\.)',
      // Match Express-style parameters and un-named parameters with a prefix
      // and optional suffixes. Matches appear as:
      //
      // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
      // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
      // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
      '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
    ].join('|'), 'g');

    /**
     * Parse a string for the raw tokens.
     *
     * @param  {string}  str
     * @param  {Object=} options
     * @return {!Array}
     */
    function parse (str, options) {
      var tokens = [];
      var key = 0;
      var index = 0;
      var path = '';
      var defaultDelimiter = options && options.delimiter || '/';
      var res;

      while ((res = PATH_REGEXP.exec(str)) != null) {
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;

        // Ignore already escaped sequences.
        if (escaped) {
          path += escaped[1];
          continue
        }

        var next = str[index];
        var prefix = res[2];
        var name = res[3];
        var capture = res[4];
        var group = res[5];
        var modifier = res[6];
        var asterisk = res[7];

        // Push the current path onto the tokens.
        if (path) {
          tokens.push(path);
          path = '';
        }

        var partial = prefix != null && next != null && next !== prefix;
        var repeat = modifier === '+' || modifier === '*';
        var optional = modifier === '?' || modifier === '*';
        var delimiter = res[2] || defaultDelimiter;
        var pattern = capture || group;

        tokens.push({
          name: name || key++,
          prefix: prefix || '',
          delimiter: delimiter,
          optional: optional,
          repeat: repeat,
          partial: partial,
          asterisk: !!asterisk,
          pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
        });
      }

      // Match any characters still remaining.
      if (index < str.length) {
        path += str.substr(index);
      }

      // If the path exists, push it onto the end.
      if (path) {
        tokens.push(path);
      }

      return tokens
    }

    /**
     * Compile a string to a template function for the path.
     *
     * @param  {string}             str
     * @param  {Object=}            options
     * @return {!function(Object=, Object=)}
     */
    function compile (str, options) {
      return tokensToFunction(parse(str, options), options)
    }

    /**
     * Prettier encoding of URI path segments.
     *
     * @param  {string}
     * @return {string}
     */
    function encodeURIComponentPretty (str) {
      return encodeURI(str).replace(/[\/?#]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase()
      })
    }

    /**
     * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
     *
     * @param  {string}
     * @return {string}
     */
    function encodeAsterisk (str) {
      return encodeURI(str).replace(/[?#]/g, function (c) {
        return '%' + c.charCodeAt(0).toString(16).toUpperCase()
      })
    }

    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction (tokens, options) {
      // Compile all the tokens into regexps.
      var matches = new Array(tokens.length);

      // Compile all the patterns before compilation.
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] === 'object') {
          matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
        }
      }

      return function (obj, opts) {
        var path = '';
        var data = obj || {};
        var options = opts || {};
        var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

        for (var i = 0; i < tokens.length; i++) {
          var token = tokens[i];

          if (typeof token === 'string') {
            path += token;

            continue
          }

          var value = data[token.name];
          var segment;

          if (value == null) {
            if (token.optional) {
              // Prepend partial segment prefixes.
              if (token.partial) {
                path += token.prefix;
              }

              continue
            } else {
              throw new TypeError('Expected "' + token.name + '" to be defined')
            }
          }

          if (isarray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
            }

            if (value.length === 0) {
              if (token.optional) {
                continue
              } else {
                throw new TypeError('Expected "' + token.name + '" to not be empty')
              }
            }

            for (var j = 0; j < value.length; j++) {
              segment = encode(value[j]);

              if (!matches[i].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
              }

              path += (j === 0 ? token.prefix : token.delimiter) + segment;
            }

            continue
          }

          segment = token.asterisk ? encodeAsterisk(value) : encode(value);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
          }

          path += token.prefix + segment;
        }

        return path
      }
    }

    /**
     * Escape a regular expression string.
     *
     * @param  {string} str
     * @return {string}
     */
    function escapeString (str) {
      return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
    }

    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {string} group
     * @return {string}
     */
    function escapeGroup (group) {
      return group.replace(/([=!:$\/()])/g, '\\$1')
    }

    /**
     * Attach the keys as a property of the regexp.
     *
     * @param  {!RegExp} re
     * @param  {Array}   keys
     * @return {!RegExp}
     */
    function attachKeys (re, keys) {
      re.keys = keys;
      return re
    }

    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {string}
     */
    function flags (options) {
      return options && options.sensitive ? '' : 'i'
    }

    /**
     * Pull out keys from a regexp.
     *
     * @param  {!RegExp} path
     * @param  {!Array}  keys
     * @return {!RegExp}
     */
    function regexpToRegexp (path, keys) {
      // Use a negative lookahead to match only capturing groups.
      var groups = path.source.match(/\((?!\?)/g);

      if (groups) {
        for (var i = 0; i < groups.length; i++) {
          keys.push({
            name: i,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            partial: false,
            asterisk: false,
            pattern: null
          });
        }
      }

      return attachKeys(path, keys)
    }

    /**
     * Transform an array into a regexp.
     *
     * @param  {!Array}  path
     * @param  {Array}   keys
     * @param  {!Object} options
     * @return {!RegExp}
     */
    function arrayToRegexp (path, keys, options) {
      var parts = [];

      for (var i = 0; i < path.length; i++) {
        parts.push(pathToRegexp(path[i], keys, options).source);
      }

      var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

      return attachKeys(regexp, keys)
    }

    /**
     * Create a path regexp from string input.
     *
     * @param  {string}  path
     * @param  {!Array}  keys
     * @param  {!Object} options
     * @return {!RegExp}
     */
    function stringToRegexp (path, keys, options) {
      return tokensToRegExp(parse(path, options), keys, options)
    }

    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {!Array}          tokens
     * @param  {(Array|Object)=} keys
     * @param  {Object=}         options
     * @return {!RegExp}
     */
    function tokensToRegExp (tokens, keys, options) {
      if (!isarray(keys)) {
        options = /** @type {!Object} */ (keys || options);
        keys = [];
      }

      options = options || {};

      var strict = options.strict;
      var end = options.end !== false;
      var route = '';

      // Iterate over the tokens and create our regexp string.
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          route += escapeString(token);
        } else {
          var prefix = escapeString(token.prefix);
          var capture = '(?:' + token.pattern + ')';

          keys.push(token);

          if (token.repeat) {
            capture += '(?:' + prefix + capture + ')*';
          }

          if (token.optional) {
            if (!token.partial) {
              capture = '(?:' + prefix + '(' + capture + '))?';
            } else {
              capture = prefix + '(' + capture + ')?';
            }
          } else {
            capture = prefix + '(' + capture + ')';
          }

          route += capture;
        }
      }

      var delimiter = escapeString(options.delimiter || '/');
      var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

      // In non-strict mode we allow a slash at the end of match. If the path to
      // match already ends with a slash, we remove it for consistency. The slash
      // is valid at the end of a path match, not in the middle. This is important
      // in non-ending mode, where "/test/" shouldn't match "/test//route".
      if (!strict) {
        route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
      }

      if (end) {
        route += '$';
      } else {
        // In non-ending mode, we need the capturing groups to match as much as
        // possible by using a positive lookahead to the end or next path segment.
        route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
      }

      return attachKeys(new RegExp('^' + route, flags(options)), keys)
    }

    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(string|RegExp|Array)} path
     * @param  {(Array|Object)=}       keys
     * @param  {Object=}               options
     * @return {!RegExp}
     */
    function pathToRegexp (path, keys, options) {
      if (!isarray(keys)) {
        options = /** @type {!Object} */ (keys || options);
        keys = [];
      }

      options = options || {};

      if (path instanceof RegExp) {
        return regexpToRegexp(path, /** @type {!Array} */ (keys))
      }

      if (isarray(path)) {
        return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
      }

      return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
    }
    pathToRegexp_1.parse = parse_1;
    pathToRegexp_1.compile = compile_1;
    pathToRegexp_1.tokensToFunction = tokensToFunction_1;
    pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    /**
     * Copyright 2015, Yahoo! Inc.
     * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
     */
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      '$$typeof': true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      '$$typeof': true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

    function getStatics(component) {
      // React v16.11 and below
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      } // React v16.12 and above


      return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
    }

    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);

          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols$1) {
          keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
        }

        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);

        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];

          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

            try {
              // Avoid failures from read-only properties
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {}
          }
        }
      }

      return targetComponent;
    }

    var hoistNonReactStatics_cjs = hoistNonReactStatics;

    // TODO: Replace with React.createContext once we can assume React 16+

    var createNamedContext = function createNamedContext(name) {
      var context = index();
      context.displayName = name;
      return context;
    };

    var context =
    /*#__PURE__*/
    createNamedContext("Router");

    /**
     * The public API for putting history on context.
     */

    var Router =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(Router, _React$Component);

      Router.computeRootMatch = function computeRootMatch(pathname) {
        return {
          path: "/",
          url: "/",
          params: {},
          isExact: pathname === "/"
        };
      };

      function Router(props) {
        var _this;

        _this = _React$Component.call(this, props) || this;
        _this.state = {
          location: props.history.location
        }; // This is a bit of a hack. We have to start listening for location
        // changes here in the constructor in case there are any <Redirect>s
        // on the initial render. If there are, they will replace/push when
        // they mount and since cDM fires in children before parents, we may
        // get a new location before the <Router> is mounted.

        _this._isMounted = false;
        _this._pendingLocation = null;

        if (!props.staticContext) {
          _this.unlisten = props.history.listen(function (location) {
            if (_this._isMounted) {
              _this.setState({
                location: location
              });
            } else {
              _this._pendingLocation = location;
            }
          });
        }

        return _this;
      }

      var _proto = Router.prototype;

      _proto.componentDidMount = function componentDidMount() {
        this._isMounted = true;

        if (this._pendingLocation) {
          this.setState({
            location: this._pendingLocation
          });
        }
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.unlisten) this.unlisten();
      };

      _proto.render = function render() {
        return react.createElement(context.Provider, {
          children: this.props.children || null,
          value: {
            history: this.props.history,
            location: this.state.location,
            match: Router.computeRootMatch(this.state.location.pathname),
            staticContext: this.props.staticContext
          }
        });
      };

      return Router;
    }(react.Component);

    {
      Router.propTypes = {
        children: propTypes.node,
        history: propTypes.object.isRequired,
        staticContext: propTypes.object
      };

      Router.prototype.componentDidUpdate = function (prevProps) {
         warning(prevProps.history === this.props.history, "You cannot change <Router history>") ;
      };
    }

    /**
     * The public API for a <Router> that stores location in memory.
     */

    var MemoryRouter =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(MemoryRouter, _React$Component);

      function MemoryRouter() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.history = createMemoryHistory(_this.props);
        return _this;
      }

      var _proto = MemoryRouter.prototype;

      _proto.render = function render() {
        return react.createElement(Router, {
          history: this.history,
          children: this.props.children
        });
      };

      return MemoryRouter;
    }(react.Component);

    {
      MemoryRouter.propTypes = {
        initialEntries: propTypes.array,
        initialIndex: propTypes.number,
        getUserConfirmation: propTypes.func,
        keyLength: propTypes.number,
        children: propTypes.node
      };

      MemoryRouter.prototype.componentDidMount = function () {
         warning(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.") ;
      };
    }

    var Lifecycle =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(Lifecycle, _React$Component);

      function Lifecycle() {
        return _React$Component.apply(this, arguments) || this;
      }

      var _proto = Lifecycle.prototype;

      _proto.componentDidMount = function componentDidMount() {
        if (this.props.onMount) this.props.onMount.call(this, this);
      };

      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.props.onUnmount) this.props.onUnmount.call(this, this);
      };

      _proto.render = function render() {
        return null;
      };

      return Lifecycle;
    }(react.Component);

    /**
     * The public API for prompting the user before navigating away from a screen.
     */

    function Prompt(_ref) {
      var message = _ref.message,
          _ref$when = _ref.when,
          when = _ref$when === void 0 ? true : _ref$when;
      return react.createElement(context.Consumer, null, function (context) {
        !context ?  invariant(false, "You should not use <Prompt> outside a <Router>")  : void 0;
        if (!when || context.staticContext) return null;
        var method = context.history.block;
        return react.createElement(Lifecycle, {
          onMount: function onMount(self) {
            self.release = method(message);
          },
          onUpdate: function onUpdate(self, prevProps) {
            if (prevProps.message !== message) {
              self.release();
              self.release = method(message);
            }
          },
          onUnmount: function onUnmount(self) {
            self.release();
          },
          message: message
        });
      });
    }

    {
      var messageType = propTypes.oneOfType([propTypes.func, propTypes.string]);
      Prompt.propTypes = {
        when: propTypes.bool,
        message: messageType.isRequired
      };
    }

    var cache = {};
    var cacheLimit = 10000;
    var cacheCount = 0;

    function compilePath(path) {
      if (cache[path]) return cache[path];
      var generator = pathToRegexp_1.compile(path);

      if (cacheCount < cacheLimit) {
        cache[path] = generator;
        cacheCount++;
      }

      return generator;
    }
    /**
     * Public API for generating a URL pathname from a path and parameters.
     */


    function generatePath(path, params) {
      if (path === void 0) {
        path = "/";
      }

      if (params === void 0) {
        params = {};
      }

      return path === "/" ? path : compilePath(path)(params, {
        pretty: true
      });
    }

    /**
     * The public API for navigating programmatically with a component.
     */

    function Redirect(_ref) {
      var computedMatch = _ref.computedMatch,
          to = _ref.to,
          _ref$push = _ref.push,
          push = _ref$push === void 0 ? false : _ref$push;
      return react.createElement(context.Consumer, null, function (context) {
        !context ?  invariant(false, "You should not use <Redirect> outside a <Router>")  : void 0;
        var history = context.history,
            staticContext = context.staticContext;
        var method = push ? history.push : history.replace;
        var location = createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({}, to, {
          pathname: generatePath(to.pathname, computedMatch.params)
        }) : to); // When rendering in a static context,
        // set the new location immediately.

        if (staticContext) {
          method(location);
          return null;
        }

        return react.createElement(Lifecycle, {
          onMount: function onMount() {
            method(location);
          },
          onUpdate: function onUpdate(self, prevProps) {
            var prevLocation = createLocation(prevProps.to);

            if (!locationsAreEqual(prevLocation, _extends({}, location, {
              key: prevLocation.key
            }))) {
              method(location);
            }
          },
          to: to
        });
      });
    }

    {
      Redirect.propTypes = {
        push: propTypes.bool,
        from: propTypes.string,
        to: propTypes.oneOfType([propTypes.string, propTypes.object]).isRequired
      };
    }

    var cache$1 = {};
    var cacheLimit$1 = 10000;
    var cacheCount$1 = 0;

    function compilePath$1(path, options) {
      var cacheKey = "" + options.end + options.strict + options.sensitive;
      var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
      if (pathCache[path]) return pathCache[path];
      var keys = [];
      var regexp = pathToRegexp_1(path, keys, options);
      var result = {
        regexp: regexp,
        keys: keys
      };

      if (cacheCount$1 < cacheLimit$1) {
        pathCache[path] = result;
        cacheCount$1++;
      }

      return result;
    }
    /**
     * Public API for matching a URL pathname to a path.
     */


    function matchPath(pathname, options) {
      if (options === void 0) {
        options = {};
      }

      if (typeof options === "string" || Array.isArray(options)) {
        options = {
          path: options
        };
      }

      var _options = options,
          path = _options.path,
          _options$exact = _options.exact,
          exact = _options$exact === void 0 ? false : _options$exact,
          _options$strict = _options.strict,
          strict = _options$strict === void 0 ? false : _options$strict,
          _options$sensitive = _options.sensitive,
          sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
      var paths = [].concat(path);
      return paths.reduce(function (matched, path) {
        if (!path && path !== "") return null;
        if (matched) return matched;

        var _compilePath = compilePath$1(path, {
          end: exact,
          strict: strict,
          sensitive: sensitive
        }),
            regexp = _compilePath.regexp,
            keys = _compilePath.keys;

        var match = regexp.exec(pathname);
        if (!match) return null;
        var url = match[0],
            values = match.slice(1);
        var isExact = pathname === url;
        if (exact && !isExact) return null;
        return {
          path: path,
          // the path used to match
          url: path === "/" && url === "" ? "/" : url,
          // the matched portion of the URL
          isExact: isExact,
          // whether or not we matched exactly
          params: keys.reduce(function (memo, key, index) {
            memo[key.name] = values[index];
            return memo;
          }, {})
        };
      }, null);
    }

    function isEmptyChildren(children) {
      return react.Children.count(children) === 0;
    }

    function evalChildrenDev(children, props, path) {
      var value = children(props);
       warning(value !== undefined, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`") ;
      return value || null;
    }
    /**
     * The public API for matching a single path and rendering.
     */


    var Route =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(Route, _React$Component);

      function Route() {
        return _React$Component.apply(this, arguments) || this;
      }

      var _proto = Route.prototype;

      _proto.render = function render() {
        var _this = this;

        return react.createElement(context.Consumer, null, function (context$1) {
          !context$1 ?  invariant(false, "You should not use <Route> outside a <Router>")  : void 0;
          var location = _this.props.location || context$1.location;
          var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
          : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;

          var props = _extends({}, context$1, {
            location: location,
            match: match
          });

          var _this$props = _this.props,
              children = _this$props.children,
              component = _this$props.component,
              render = _this$props.render; // Preact uses an empty array as children by
          // default, so use null if that's the case.

          if (Array.isArray(children) && children.length === 0) {
            children = null;
          }

          return react.createElement(context.Provider, {
            value: props
          }, props.match ? children ? typeof children === "function" ?  evalChildrenDev(children, props, _this.props.path)  : children : component ? react.createElement(component, props) : render ? render(props) : null : typeof children === "function" ?  evalChildrenDev(children, props, _this.props.path)  : null);
        });
      };

      return Route;
    }(react.Component);

    {
      Route.propTypes = {
        children: propTypes.oneOfType([propTypes.func, propTypes.node]),
        component: function component(props, propName) {
          if (props[propName] && !reactIs_1(props[propName])) {
            return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
          }
        },
        exact: propTypes.bool,
        location: propTypes.object,
        path: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]),
        render: propTypes.func,
        sensitive: propTypes.bool,
        strict: propTypes.bool
      };

      Route.prototype.componentDidMount = function () {
         warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") ;
         warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") ;
         warning(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") ;
      };

      Route.prototype.componentDidUpdate = function (prevProps) {
         warning(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') ;
         warning(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') ;
      };
    }

    function addLeadingSlash$1(path) {
      return path.charAt(0) === "/" ? path : "/" + path;
    }

    function addBasename(basename, location) {
      if (!basename) return location;
      return _extends({}, location, {
        pathname: addLeadingSlash$1(basename) + location.pathname
      });
    }

    function stripBasename$1(basename, location) {
      if (!basename) return location;
      var base = addLeadingSlash$1(basename);
      if (location.pathname.indexOf(base) !== 0) return location;
      return _extends({}, location, {
        pathname: location.pathname.substr(base.length)
      });
    }

    function createURL(location) {
      return typeof location === "string" ? location : createPath(location);
    }

    function staticHandler(methodName) {
      return function () {
          invariant(false, "You cannot %s with <StaticRouter>")  ;
      };
    }

    function noop() {}
    /**
     * The public top-level API for a "static" <Router>, so-called because it
     * can't actually change the current location. Instead, it just records
     * location changes in a context object. Useful mainly in testing and
     * server-rendering scenarios.
     */


    var StaticRouter =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(StaticRouter, _React$Component);

      function StaticRouter() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

        _this.handlePush = function (location) {
          return _this.navigateTo(location, "PUSH");
        };

        _this.handleReplace = function (location) {
          return _this.navigateTo(location, "REPLACE");
        };

        _this.handleListen = function () {
          return noop;
        };

        _this.handleBlock = function () {
          return noop;
        };

        return _this;
      }

      var _proto = StaticRouter.prototype;

      _proto.navigateTo = function navigateTo(location, action) {
        var _this$props = this.props,
            _this$props$basename = _this$props.basename,
            basename = _this$props$basename === void 0 ? "" : _this$props$basename,
            _this$props$context = _this$props.context,
            context = _this$props$context === void 0 ? {} : _this$props$context;
        context.action = action;
        context.location = addBasename(basename, createLocation(location));
        context.url = createURL(context.location);
      };

      _proto.render = function render() {
        var _this$props2 = this.props,
            _this$props2$basename = _this$props2.basename,
            basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,
            _this$props2$context = _this$props2.context,
            context = _this$props2$context === void 0 ? {} : _this$props2$context,
            _this$props2$location = _this$props2.location,
            location = _this$props2$location === void 0 ? "/" : _this$props2$location,
            rest = _objectWithoutPropertiesLoose(_this$props2, ["basename", "context", "location"]);

        var history = {
          createHref: function createHref(path) {
            return addLeadingSlash$1(basename + createURL(path));
          },
          action: "POP",
          location: stripBasename$1(basename, createLocation(location)),
          push: this.handlePush,
          replace: this.handleReplace,
          go: staticHandler(),
          goBack: staticHandler(),
          goForward: staticHandler(),
          listen: this.handleListen,
          block: this.handleBlock
        };
        return react.createElement(Router, _extends({}, rest, {
          history: history,
          staticContext: context
        }));
      };

      return StaticRouter;
    }(react.Component);

    {
      StaticRouter.propTypes = {
        basename: propTypes.string,
        context: propTypes.object,
        location: propTypes.oneOfType([propTypes.string, propTypes.object])
      };

      StaticRouter.prototype.componentDidMount = function () {
         warning(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.") ;
      };
    }

    /**
     * The public API for rendering the first <Route> that matches.
     */

    var Switch =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(Switch, _React$Component);

      function Switch() {
        return _React$Component.apply(this, arguments) || this;
      }

      var _proto = Switch.prototype;

      _proto.render = function render() {
        var _this = this;

        return react.createElement(context.Consumer, null, function (context) {
          !context ?  invariant(false, "You should not use <Switch> outside a <Router>")  : void 0;
          var location = _this.props.location || context.location;
          var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
          // here because toArray adds keys to all child elements and we do not want
          // to trigger an unmount/remount for two <Route>s that render the same
          // component at different URLs.

          react.Children.forEach(_this.props.children, function (child) {
            if (match == null && react.isValidElement(child)) {
              element = child;
              var path = child.props.path || child.props.from;
              match = path ? matchPath(location.pathname, _extends({}, child.props, {
                path: path
              })) : context.match;
            }
          });
          return match ? react.cloneElement(element, {
            location: location,
            computedMatch: match
          }) : null;
        });
      };

      return Switch;
    }(react.Component);

    {
      Switch.propTypes = {
        children: propTypes.node,
        location: propTypes.object
      };

      Switch.prototype.componentDidUpdate = function (prevProps) {
         warning(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') ;
         warning(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') ;
      };
    }

    var useContext = react.useContext;

    {
      if (typeof window !== "undefined") {
        var global$1 = window;
        var key$1 = "__react_router_build__";
        var buildNames = {
          cjs: "CommonJS",
          esm: "ES modules",
          umd: "UMD"
        };

        if (global$1[key$1] && global$1[key$1] !== "esm") {
          var initialBuildName = buildNames[global$1[key$1]];
          var secondaryBuildName = buildNames["esm"]; // TODO: Add link to article that explains in detail how to avoid
          // loading 2 different builds.

          throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
        }

        global$1[key$1] = "esm";
      }
    }

    /**
     * The public API for a <Router> that uses HTML5 history.
     */

    var BrowserRouter =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(BrowserRouter, _React$Component);

      function BrowserRouter() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.history = createBrowserHistory(_this.props);
        return _this;
      }

      var _proto = BrowserRouter.prototype;

      _proto.render = function render() {
        return react.createElement(Router, {
          history: this.history,
          children: this.props.children
        });
      };

      return BrowserRouter;
    }(react.Component);

    {
      BrowserRouter.propTypes = {
        basename: propTypes.string,
        children: propTypes.node,
        forceRefresh: propTypes.bool,
        getUserConfirmation: propTypes.func,
        keyLength: propTypes.number
      };

      BrowserRouter.prototype.componentDidMount = function () {
         warning(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.") ;
      };
    }

    /**
     * The public API for a <Router> that uses window.location.hash.
     */

    var HashRouter =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose(HashRouter, _React$Component);

      function HashRouter() {
        var _this;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.history = createHashHistory(_this.props);
        return _this;
      }

      var _proto = HashRouter.prototype;

      _proto.render = function render() {
        return react.createElement(Router, {
          history: this.history,
          children: this.props.children
        });
      };

      return HashRouter;
    }(react.Component);

    {
      HashRouter.propTypes = {
        basename: propTypes.string,
        children: propTypes.node,
        getUserConfirmation: propTypes.func,
        hashType: propTypes.oneOf(["hashbang", "noslash", "slash"])
      };

      HashRouter.prototype.componentDidMount = function () {
         warning(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.") ;
      };
    }

    var resolveToLocation = function resolveToLocation(to, currentLocation) {
      return typeof to === "function" ? to(currentLocation) : to;
    };
    var normalizeToLocation = function normalizeToLocation(to, currentLocation) {
      return typeof to === "string" ? createLocation(to, null, null, currentLocation) : to;
    };

    var forwardRefShim = function forwardRefShim(C) {
      return C;
    };

    var forwardRef = react.forwardRef;

    if (typeof forwardRef === "undefined") {
      forwardRef = forwardRefShim;
    }

    function isModifiedEvent(event) {
      return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
    }

    var LinkAnchor = forwardRef(function (_ref, forwardedRef) {
      var innerRef = _ref.innerRef,
          navigate = _ref.navigate,
          _onClick = _ref.onClick,
          rest = _objectWithoutPropertiesLoose(_ref, ["innerRef", "navigate", "onClick"]);

      var target = rest.target;

      var props = _extends({}, rest, {
        onClick: function onClick(event) {
          try {
            if (_onClick) _onClick(event);
          } catch (ex) {
            event.preventDefault();
            throw ex;
          }

          if (!event.defaultPrevented && // onClick prevented default
          event.button === 0 && ( // ignore everything but left clicks
          !target || target === "_self") && // let browser handle "target=_blank" etc.
          !isModifiedEvent(event) // ignore clicks with modifier keys
          ) {
              event.preventDefault();
              navigate();
            }
        }
      }); // React 15 compat


      if (forwardRefShim !== forwardRef) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.ref = innerRef;
      }

      return react.createElement("a", props);
    });

    {
      LinkAnchor.displayName = "LinkAnchor";
    }
    /**
     * The public API for rendering a history-aware <a>.
     */


    var Link = forwardRef(function (_ref2, forwardedRef) {
      var _ref2$component = _ref2.component,
          component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,
          replace = _ref2.replace,
          to = _ref2.to,
          innerRef = _ref2.innerRef,
          rest = _objectWithoutPropertiesLoose(_ref2, ["component", "replace", "to", "innerRef"]);

      return react.createElement(context.Consumer, null, function (context) {
        !context ?  invariant(false, "You should not use <Link> outside a <Router>")  : void 0;
        var history = context.history;
        var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);
        var href = location ? history.createHref(location) : "";

        var props = _extends({}, rest, {
          href: href,
          navigate: function navigate() {
            var location = resolveToLocation(to, context.location);
            var method = replace ? history.replace : history.push;
            method(location);
          }
        }); // React 15 compat


        if (forwardRefShim !== forwardRef) {
          props.ref = forwardedRef || innerRef;
        } else {
          props.innerRef = innerRef;
        }

        return react.createElement(component, props);
      });
    });

    {
      var toType = propTypes.oneOfType([propTypes.string, propTypes.object, propTypes.func]);
      var refType = propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.shape({
        current: propTypes.any
      })]);
      Link.displayName = "Link";
      Link.propTypes = {
        innerRef: refType,
        onClick: propTypes.func,
        replace: propTypes.bool,
        target: propTypes.string,
        to: toType.isRequired
      };
    }

    var forwardRefShim$1 = function forwardRefShim(C) {
      return C;
    };

    var forwardRef$1 = react.forwardRef;

    if (typeof forwardRef$1 === "undefined") {
      forwardRef$1 = forwardRefShim$1;
    }

    function joinClassnames() {
      for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
        classnames[_key] = arguments[_key];
      }

      return classnames.filter(function (i) {
        return i;
      }).join(" ");
    }
    /**
     * A <Link> wrapper that knows if it's "active" or not.
     */


    var NavLink = forwardRef$1(function (_ref, forwardedRef) {
      var _ref$ariaCurrent = _ref["aria-current"],
          ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
          _ref$activeClassName = _ref.activeClassName,
          activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,
          activeStyle = _ref.activeStyle,
          classNameProp = _ref.className,
          exact = _ref.exact,
          isActiveProp = _ref.isActive,
          locationProp = _ref.location,
          strict = _ref.strict,
          styleProp = _ref.style,
          to = _ref.to,
          innerRef = _ref.innerRef,
          rest = _objectWithoutPropertiesLoose(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "strict", "style", "to", "innerRef"]);

      return react.createElement(context.Consumer, null, function (context) {
        !context ?  invariant(false, "You should not use <NavLink> outside a <Router>")  : void 0;
        var currentLocation = locationProp || context.location;
        var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
        var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

        var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
        var match = escapedPath ? matchPath(currentLocation.pathname, {
          path: escapedPath,
          exact: exact,
          strict: strict
        }) : null;
        var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
        var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
        var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;

        var props = _extends({
          "aria-current": isActive && ariaCurrent || null,
          className: className,
          style: style,
          to: toLocation
        }, rest); // React 15 compat


        if (forwardRefShim$1 !== forwardRef$1) {
          props.ref = forwardedRef || innerRef;
        } else {
          props.innerRef = innerRef;
        }

        return react.createElement(Link, props);
      });
    });

    {
      NavLink.displayName = "NavLink";
      var ariaCurrentType = propTypes.oneOf(["page", "step", "location", "date", "time", "true"]);
      NavLink.propTypes = _extends({}, Link.propTypes, {
        "aria-current": ariaCurrentType,
        activeClassName: propTypes.string,
        activeStyle: propTypes.object,
        className: propTypes.string,
        exact: propTypes.bool,
        isActive: propTypes.func,
        location: propTypes.object,
        strict: propTypes.bool,
        style: propTypes.object
      });
    }

    var global$2 = (typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});

    function Cache () {
      var _cache = Object.create(null);
      var _hitCount = 0;
      var _missCount = 0;
      var _size = 0;
      var _debug = false;

      this.put = function(key, value, time, timeoutCallback) {
        if (_debug) {
          console.log('caching: %s = %j (@%s)', key, value, time);
        }

        if (typeof time !== 'undefined' && (typeof time !== 'number' || isNaN(time) || time <= 0)) {
          throw new Error('Cache timeout must be a positive number');
        } else if (typeof timeoutCallback !== 'undefined' && typeof timeoutCallback !== 'function') {
          throw new Error('Cache timeout callback must be a function');
        }

        var oldRecord = _cache[key];
        if (oldRecord) {
          clearTimeout(oldRecord.timeout);
        } else {
          _size++;
        }

        var record = {
          value: value,
          expire: time + Date.now()
        };

        if (!isNaN(record.expire)) {
          record.timeout = setTimeout(function() {
            _del(key);
            if (timeoutCallback) {
              timeoutCallback(key, value);
            }
          }.bind(this), time);
        }

        _cache[key] = record;

        return value;
      };

      this.del = function(key) {
        var canDelete = true;

        var oldRecord = _cache[key];
        if (oldRecord) {
          clearTimeout(oldRecord.timeout);
          if (!isNaN(oldRecord.expire) && oldRecord.expire < Date.now()) {
            canDelete = false;
          }
        } else {
          canDelete = false;
        }

        if (canDelete) {
          _del(key);
        }

        return canDelete;
      };

      function _del(key){
        _size--;
        delete _cache[key];
      }

      this.clear = function() {
        for (var key in _cache) {
          clearTimeout(_cache[key].timeout);
        }
        _size = 0;
        _cache = Object.create(null);
        if (_debug) {
          _hitCount = 0;
          _missCount = 0;
        }
      };

      this.get = function(key) {
        var data = _cache[key];
        if (typeof data != "undefined") {
          if (isNaN(data.expire) || data.expire >= Date.now()) {
            if (_debug) _hitCount++;
            return data.value;
          } else {
            // free some space
            if (_debug) _missCount++;
            _size--;
            delete _cache[key];
          }
        } else if (_debug) {
          _missCount++;
        }
        return null;
      };

      this.size = function() {
        return _size;
      };

      this.memsize = function() {
        var size = 0,
          key;
        for (key in _cache) {
          size++;
        }
        return size;
      };

      this.debug = function(bool) {
        _debug = bool;
      };

      this.hits = function() {
        return _hitCount;
      };

      this.misses = function() {
        return _missCount;
      };

      this.keys = function() {
        return Object.keys(_cache);
      };

      this.exportJson = function() {
        var plainJsCache = {};

        // Discard the `timeout` property.
        // Note: JSON doesn't support `NaN`, so convert it to `'NaN'`.
        for (var key in _cache) {
          var record = _cache[key];
          plainJsCache[key] = {
            value: record.value,
            expire: record.expire || 'NaN',
          };
        }

        return JSON.stringify(plainJsCache);
      };

      this.importJson = function(jsonToImport, options) {
        var cacheToImport = JSON.parse(jsonToImport);
        var currTime = Date.now();

        var skipDuplicates = options && options.skipDuplicates;

        for (var key in cacheToImport) {
          if (cacheToImport.hasOwnProperty(key)) {
            if (skipDuplicates) {
              var existingRecord = _cache[key];
              if (existingRecord) {
                if (_debug) {
                  console.log('Skipping duplicate imported key \'%s\'', key);
                }
                continue;
              }
            }

            var record = cacheToImport[key];

            // record.expire could be `'NaN'` if no expiry was set.
            // Try to subtract from it; a string minus a number is `NaN`, which is perfectly fine here.
            var remainingTime = record.expire - currTime;

            if (remainingTime <= 0) {
              // Delete any record that might exist with the same key, since this key is expired.
              this.del(key);
              continue;
            }

            // Remaining time must now be either positive or `NaN`,
            // but `put` will throw an error if we try to give it `NaN`.
            remainingTime = remainingTime > 0 ? remainingTime : undefined;

            this.put(key, record.value, remainingTime);
          }
        }

        return this.size();
      };
    }

    var memoryCache = new Cache();
    var Cache_1 = Cache;
    memoryCache.Cache = Cache_1;

    var reactDomFactories = createCommonjsModule(function (module, exports) {

    /**
     * Copyright (c) 2015-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */

    (function(f) {
      {
        module.exports = f(react);
        /* global define */
      }
    })(function(React) {
      /**
       * Create a factory that creates HTML tag elements.
       */
      function createDOMFactory(type) {
        var factory = React.createElement.bind(null, type);
        // Expose the type on the factory and the prototype so that it can be
        // easily accessed on elements. E.g. `<Foo />.type === Foo`.
        // This should not be named `constructor` since this may not be the function
        // that created the element, and it may not even be a constructor.
        factory.type = type;
        return factory;
      }
      /**
       * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
       */
      var ReactDOMFactories = {
        a: createDOMFactory('a'),
        abbr: createDOMFactory('abbr'),
        address: createDOMFactory('address'),
        area: createDOMFactory('area'),
        article: createDOMFactory('article'),
        aside: createDOMFactory('aside'),
        audio: createDOMFactory('audio'),
        b: createDOMFactory('b'),
        base: createDOMFactory('base'),
        bdi: createDOMFactory('bdi'),
        bdo: createDOMFactory('bdo'),
        big: createDOMFactory('big'),
        blockquote: createDOMFactory('blockquote'),
        body: createDOMFactory('body'),
        br: createDOMFactory('br'),
        button: createDOMFactory('button'),
        canvas: createDOMFactory('canvas'),
        caption: createDOMFactory('caption'),
        cite: createDOMFactory('cite'),
        code: createDOMFactory('code'),
        col: createDOMFactory('col'),
        colgroup: createDOMFactory('colgroup'),
        data: createDOMFactory('data'),
        datalist: createDOMFactory('datalist'),
        dd: createDOMFactory('dd'),
        del: createDOMFactory('del'),
        details: createDOMFactory('details'),
        dfn: createDOMFactory('dfn'),
        dialog: createDOMFactory('dialog'),
        div: createDOMFactory('div'),
        dl: createDOMFactory('dl'),
        dt: createDOMFactory('dt'),
        em: createDOMFactory('em'),
        embed: createDOMFactory('embed'),
        fieldset: createDOMFactory('fieldset'),
        figcaption: createDOMFactory('figcaption'),
        figure: createDOMFactory('figure'),
        footer: createDOMFactory('footer'),
        form: createDOMFactory('form'),
        h1: createDOMFactory('h1'),
        h2: createDOMFactory('h2'),
        h3: createDOMFactory('h3'),
        h4: createDOMFactory('h4'),
        h5: createDOMFactory('h5'),
        h6: createDOMFactory('h6'),
        head: createDOMFactory('head'),
        header: createDOMFactory('header'),
        hgroup: createDOMFactory('hgroup'),
        hr: createDOMFactory('hr'),
        html: createDOMFactory('html'),
        i: createDOMFactory('i'),
        iframe: createDOMFactory('iframe'),
        img: createDOMFactory('img'),
        input: createDOMFactory('input'),
        ins: createDOMFactory('ins'),
        kbd: createDOMFactory('kbd'),
        keygen: createDOMFactory('keygen'),
        label: createDOMFactory('label'),
        legend: createDOMFactory('legend'),
        li: createDOMFactory('li'),
        link: createDOMFactory('link'),
        main: createDOMFactory('main'),
        map: createDOMFactory('map'),
        mark: createDOMFactory('mark'),
        menu: createDOMFactory('menu'),
        menuitem: createDOMFactory('menuitem'),
        meta: createDOMFactory('meta'),
        meter: createDOMFactory('meter'),
        nav: createDOMFactory('nav'),
        noscript: createDOMFactory('noscript'),
        object: createDOMFactory('object'),
        ol: createDOMFactory('ol'),
        optgroup: createDOMFactory('optgroup'),
        option: createDOMFactory('option'),
        output: createDOMFactory('output'),
        p: createDOMFactory('p'),
        param: createDOMFactory('param'),
        picture: createDOMFactory('picture'),
        pre: createDOMFactory('pre'),
        progress: createDOMFactory('progress'),
        q: createDOMFactory('q'),
        rp: createDOMFactory('rp'),
        rt: createDOMFactory('rt'),
        ruby: createDOMFactory('ruby'),
        s: createDOMFactory('s'),
        samp: createDOMFactory('samp'),
        script: createDOMFactory('script'),
        section: createDOMFactory('section'),
        select: createDOMFactory('select'),
        small: createDOMFactory('small'),
        source: createDOMFactory('source'),
        span: createDOMFactory('span'),
        strong: createDOMFactory('strong'),
        style: createDOMFactory('style'),
        sub: createDOMFactory('sub'),
        summary: createDOMFactory('summary'),
        sup: createDOMFactory('sup'),
        table: createDOMFactory('table'),
        tbody: createDOMFactory('tbody'),
        td: createDOMFactory('td'),
        textarea: createDOMFactory('textarea'),
        tfoot: createDOMFactory('tfoot'),
        th: createDOMFactory('th'),
        thead: createDOMFactory('thead'),
        time: createDOMFactory('time'),
        title: createDOMFactory('title'),
        tr: createDOMFactory('tr'),
        track: createDOMFactory('track'),
        u: createDOMFactory('u'),
        ul: createDOMFactory('ul'),
        var: createDOMFactory('var'),
        video: createDOMFactory('video'),
        wbr: createDOMFactory('wbr'),

        // SVG
        circle: createDOMFactory('circle'),
        clipPath: createDOMFactory('clipPath'),
        defs: createDOMFactory('defs'),
        ellipse: createDOMFactory('ellipse'),
        g: createDOMFactory('g'),
        image: createDOMFactory('image'),
        line: createDOMFactory('line'),
        linearGradient: createDOMFactory('linearGradient'),
        mask: createDOMFactory('mask'),
        path: createDOMFactory('path'),
        pattern: createDOMFactory('pattern'),
        polygon: createDOMFactory('polygon'),
        polyline: createDOMFactory('polyline'),
        radialGradient: createDOMFactory('radialGradient'),
        rect: createDOMFactory('rect'),
        stop: createDOMFactory('stop'),
        svg: createDOMFactory('svg'),
        text: createDOMFactory('text'),
        tspan: createDOMFactory('tspan'),
      };

      // due to wrapper and conditionals at the top, this will either become
      // `module.exports ReactDOMFactories` if that is available,
      // otherwise it will be defined via `define(['react'], ReactDOMFactories)`
      // if that is available,
      // otherwise it will be defined as global variable.
      return ReactDOMFactories;
    });
    });

    var uaParser = createCommonjsModule(function (module, exports) {
    /*!
     * UAParser.js v0.7.21
     * Lightweight JavaScript-based User-Agent string parser
     * https://github.com/faisalman/ua-parser-js
     *
     * Copyright © 2012-2019 Faisal Salman <f@faisalman.com>
     * Licensed under MIT License
     */

    (function (window, undefined$1) {

        //////////////
        // Constants
        /////////////


        var LIBVERSION  = '0.7.21',
            EMPTY       = '',
            UNKNOWN     = '?',
            FUNC_TYPE   = 'function',
            OBJ_TYPE    = 'object',
            STR_TYPE    = 'string',
            MAJOR       = 'major', // deprecated
            MODEL       = 'model',
            NAME        = 'name',
            TYPE        = 'type',
            VENDOR      = 'vendor',
            VERSION     = 'version',
            ARCHITECTURE= 'architecture',
            CONSOLE     = 'console',
            MOBILE      = 'mobile',
            TABLET      = 'tablet',
            SMARTTV     = 'smarttv',
            WEARABLE    = 'wearable',
            EMBEDDED    = 'embedded';


        ///////////
        // Helper
        //////////


        var util = {
            extend : function (regexes, extensions) {
                var mergedRegexes = {};
                for (var i in regexes) {
                    if (extensions[i] && extensions[i].length % 2 === 0) {
                        mergedRegexes[i] = extensions[i].concat(regexes[i]);
                    } else {
                        mergedRegexes[i] = regexes[i];
                    }
                }
                return mergedRegexes;
            },
            has : function (str1, str2) {
              if (typeof str1 === "string") {
                return str2.toLowerCase().indexOf(str1.toLowerCase()) !== -1;
              } else {
                return false;
              }
            },
            lowerize : function (str) {
                return str.toLowerCase();
            },
            major : function (version) {
                return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g,'').split(".")[0] : undefined$1;
            },
            trim : function (str) {
              return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
            }
        };


        ///////////////
        // Map helper
        //////////////


        var mapper = {

            rgx : function (ua, arrays) {

                var i = 0, j, k, p, q, matches, match;

                // loop through all regexes maps
                while (i < arrays.length && !matches) {

                    var regex = arrays[i],       // even sequence (0,2,4,..)
                        props = arrays[i + 1];   // odd sequence (1,3,5,..)
                    j = k = 0;

                    // try matching uastring with regexes
                    while (j < regex.length && !matches) {

                        matches = regex[j++].exec(ua);

                        if (!!matches) {
                            for (p = 0; p < props.length; p++) {
                                match = matches[++k];
                                q = props[p];
                                // check if given property is actually array
                                if (typeof q === OBJ_TYPE && q.length > 0) {
                                    if (q.length == 2) {
                                        if (typeof q[1] == FUNC_TYPE) {
                                            // assign modified match
                                            this[q[0]] = q[1].call(this, match);
                                        } else {
                                            // assign given value, ignore regex match
                                            this[q[0]] = q[1];
                                        }
                                    } else if (q.length == 3) {
                                        // check whether function or regex
                                        if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                            // call function (usually string mapper)
                                            this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined$1;
                                        } else {
                                            // sanitize match using given regex
                                            this[q[0]] = match ? match.replace(q[1], q[2]) : undefined$1;
                                        }
                                    } else if (q.length == 4) {
                                            this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined$1;
                                    }
                                } else {
                                    this[q] = match ? match : undefined$1;
                                }
                            }
                        }
                    }
                    i += 2;
                }
            },

            str : function (str, map) {

                for (var i in map) {
                    // check if array
                    if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                        for (var j = 0; j < map[i].length; j++) {
                            if (util.has(map[i][j], str)) {
                                return (i === UNKNOWN) ? undefined$1 : i;
                            }
                        }
                    } else if (util.has(map[i], str)) {
                        return (i === UNKNOWN) ? undefined$1 : i;
                    }
                }
                return str;
            }
        };


        ///////////////
        // String map
        //////////////


        var maps = {

            browser : {
                oldsafari : {
                    version : {
                        '1.0'   : '/8',
                        '1.2'   : '/1',
                        '1.3'   : '/3',
                        '2.0'   : '/412',
                        '2.0.2' : '/416',
                        '2.0.3' : '/417',
                        '2.0.4' : '/419',
                        '?'     : '/'
                    }
                }
            },

            device : {
                amazon : {
                    model : {
                        'Fire Phone' : ['SD', 'KF']
                    }
                },
                sprint : {
                    model : {
                        'Evo Shift 4G' : '7373KT'
                    },
                    vendor : {
                        'HTC'       : 'APA',
                        'Sprint'    : 'Sprint'
                    }
                }
            },

            os : {
                windows : {
                    version : {
                        'ME'        : '4.90',
                        'NT 3.11'   : 'NT3.51',
                        'NT 4.0'    : 'NT4.0',
                        '2000'      : 'NT 5.0',
                        'XP'        : ['NT 5.1', 'NT 5.2'],
                        'Vista'     : 'NT 6.0',
                        '7'         : 'NT 6.1',
                        '8'         : 'NT 6.2',
                        '8.1'       : 'NT 6.3',
                        '10'        : ['NT 6.4', 'NT 10.0'],
                        'RT'        : 'ARM'
                    }
                }
            }
        };


        //////////////
        // Regex map
        /////////////


        var regexes = {

            browser : [[

                // Presto based
                /(opera\smini)\/([\w\.-]+)/i,                                       // Opera Mini
                /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i,                      // Opera Mobi/Tablet
                /(opera).+version\/([\w\.]+)/i,                                     // Opera > 9.80
                /(opera)[\/\s]+([\w\.]+)/i                                          // Opera < 9.80
                ], [NAME, VERSION], [

                /(opios)[\/\s]+([\w\.]+)/i                                          // Opera mini on iphone >= 8.0
                ], [[NAME, 'Opera Mini'], VERSION], [

                /\s(opr)\/([\w\.]+)/i                                               // Opera Webkit
                ], [[NAME, 'Opera'], VERSION], [

                // Mixed
                /(kindle)\/([\w\.]+)/i,                                             // Kindle
                /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]*)/i,
                                                                                    // Lunascape/Maxthon/Netfront/Jasmine/Blazer
                // Trident based
                /(avant\s|iemobile|slim)(?:browser)?[\/\s]?([\w\.]*)/i,
                                                                                    // Avant/IEMobile/SlimBrowser
                /(bidubrowser|baidubrowser)[\/\s]?([\w\.]+)/i,                      // Baidu Browser
                /(?:ms|\()(ie)\s([\w\.]+)/i,                                        // Internet Explorer

                // Webkit/KHTML based
                /(rekonq)\/([\w\.]*)/i,                                             // Rekonq
                /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon)\/([\w\.-]+)/i
                                                                                    // Chromium/Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
                ], [NAME, VERSION], [

                /(konqueror)\/([\w\.]+)/i                                           // Konqueror
                ], [[NAME, 'Konqueror'], VERSION], [

                /(trident).+rv[:\s]([\w\.]+).+like\sgecko/i                         // IE11
                ], [[NAME, 'IE'], VERSION], [

                /(edge|edgios|edga|edg)\/((\d+)?[\w\.]+)/i                          // Microsoft Edge
                ], [[NAME, 'Edge'], VERSION], [

                /(yabrowser)\/([\w\.]+)/i                                           // Yandex
                ], [[NAME, 'Yandex'], VERSION], [

                /(Avast)\/([\w\.]+)/i                                               // Avast Secure Browser
                ], [[NAME, 'Avast Secure Browser'], VERSION], [

                /(AVG)\/([\w\.]+)/i                                                 // AVG Secure Browser
                ], [[NAME, 'AVG Secure Browser'], VERSION], [

                /(puffin)\/([\w\.]+)/i                                              // Puffin
                ], [[NAME, 'Puffin'], VERSION], [

                /(focus)\/([\w\.]+)/i                                               // Firefox Focus
                ], [[NAME, 'Firefox Focus'], VERSION], [

                /(opt)\/([\w\.]+)/i                                                 // Opera Touch
                ], [[NAME, 'Opera Touch'], VERSION], [

                /((?:[\s\/])uc?\s?browser|(?:juc.+)ucweb)[\/\s]?([\w\.]+)/i         // UCBrowser
                ], [[NAME, 'UCBrowser'], VERSION], [

                /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
                ], [[NAME, /_/g, ' '], VERSION], [

                /(windowswechat qbcore)\/([\w\.]+)/i                                // WeChat Desktop for Windows Built-in Browser
                ], [[NAME, 'WeChat(Win) Desktop'], VERSION], [

                /(micromessenger)\/([\w\.]+)/i                                      // WeChat
                ], [[NAME, 'WeChat'], VERSION], [

                /(brave)\/([\w\.]+)/i                                               // Brave browser
                ], [[NAME, 'Brave'], VERSION], [

                /(qqbrowserlite)\/([\w\.]+)/i                                       // QQBrowserLite
                ], [NAME, VERSION], [

                /(QQ)\/([\d\.]+)/i                                                  // QQ, aka ShouQ
                ], [NAME, VERSION], [

                /m?(qqbrowser)[\/\s]?([\w\.]+)/i                                    // QQBrowser
                ], [NAME, VERSION], [

                /(baiduboxapp)[\/\s]?([\w\.]+)/i                                    // Baidu App
                ], [NAME, VERSION], [

                /(2345Explorer)[\/\s]?([\w\.]+)/i                                   // 2345 Browser
                ], [NAME, VERSION], [

                /(MetaSr)[\/\s]?([\w\.]+)/i                                         // SouGouBrowser
                ], [NAME], [

                /(LBBROWSER)/i                                                      // LieBao Browser
                ], [NAME], [

                /xiaomi\/miuibrowser\/([\w\.]+)/i                                   // MIUI Browser
                ], [VERSION, [NAME, 'MIUI Browser']], [

                /;fbav\/([\w\.]+);/i                                                // Facebook App for iOS & Android
                ], [VERSION, [NAME, 'Facebook']], [

                /safari\s(line)\/([\w\.]+)/i,                                       // Line App for iOS
                /android.+(line)\/([\w\.]+)\/iab/i                                  // Line App for Android
                ], [NAME, VERSION], [

                /headlesschrome(?:\/([\w\.]+)|\s)/i                                 // Chrome Headless
                ], [VERSION, [NAME, 'Chrome Headless']], [

                /\swv\).+(chrome)\/([\w\.]+)/i                                      // Chrome WebView
                ], [[NAME, /(.+)/, '$1 WebView'], VERSION], [

                /((?:oculus|samsung)browser)\/([\w\.]+)/i
                ], [[NAME, /(.+(?:g|us))(.+)/, '$1 $2'], VERSION], [                // Oculus / Samsung Browser

                /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)*/i        // Android Browser
                ], [VERSION, [NAME, 'Android Browser']], [

                /(sailfishbrowser)\/([\w\.]+)/i                                     // Sailfish Browser
                ], [[NAME, 'Sailfish Browser'], VERSION], [

                /(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i
                                                                                    // Chrome/OmniWeb/Arora/Tizen/Nokia
                ], [NAME, VERSION], [

                /(dolfin)\/([\w\.]+)/i                                              // Dolphin
                ], [[NAME, 'Dolphin'], VERSION], [

                /(qihu|qhbrowser|qihoobrowser|360browser)/i                         // 360
                ], [[NAME, '360 Browser']], [

                /((?:android.+)crmo|crios)\/([\w\.]+)/i                             // Chrome for Android/iOS
                ], [[NAME, 'Chrome'], VERSION], [

                /(coast)\/([\w\.]+)/i                                               // Opera Coast
                ], [[NAME, 'Opera Coast'], VERSION], [

                /fxios\/([\w\.-]+)/i                                                // Firefox for iOS
                ], [VERSION, [NAME, 'Firefox']], [

                /version\/([\w\.]+).+?mobile\/\w+\s(safari)/i                       // Mobile Safari
                ], [VERSION, [NAME, 'Mobile Safari']], [

                /version\/([\w\.]+).+?(mobile\s?safari|safari)/i                    // Safari & Safari Mobile
                ], [VERSION, NAME], [

                /webkit.+?(gsa)\/([\w\.]+).+?(mobile\s?safari|safari)(\/[\w\.]+)/i  // Google Search Appliance on iOS
                ], [[NAME, 'GSA'], VERSION], [

                /webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i                     // Safari < 3.0
                ], [NAME, [VERSION, mapper.str, maps.browser.oldsafari.version]], [

                /(webkit|khtml)\/([\w\.]+)/i
                ], [NAME, VERSION], [

                // Gecko based
                /(navigator|netscape)\/([\w\.-]+)/i                                 // Netscape
                ], [[NAME, 'Netscape'], VERSION], [
                /(swiftfox)/i,                                                      // Swiftfox
                /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,
                                                                                    // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
                /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([\w\.-]+)$/i,

                                                                                    // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
                /(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i,                          // Mozilla

                // Other
                /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,
                                                                                    // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir
                /(links)\s\(([\w\.]+)/i,                                            // Links
                /(gobrowser)\/?([\w\.]*)/i,                                         // GoBrowser
                /(ice\s?browser)\/v?([\w\._]+)/i,                                   // ICE Browser
                /(mosaic)[\/\s]([\w\.]+)/i                                          // Mosaic
                ], [NAME, VERSION]
            ],

            cpu : [[

                /(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i                     // AMD64
                ], [[ARCHITECTURE, 'amd64']], [

                /(ia32(?=;))/i                                                      // IA32 (quicktime)
                ], [[ARCHITECTURE, util.lowerize]], [

                /((?:i[346]|x)86)[;\)]/i                                            // IA32
                ], [[ARCHITECTURE, 'ia32']], [

                // PocketPC mistakenly identified as PowerPC
                /windows\s(ce|mobile);\sppc;/i
                ], [[ARCHITECTURE, 'arm']], [

                /((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i                           // PowerPC
                ], [[ARCHITECTURE, /ower/, '', util.lowerize]], [

                /(sun4\w)[;\)]/i                                                    // SPARC
                ], [[ARCHITECTURE, 'sparc']], [

                /((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+[;l]))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i
                                                                                    // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
                ], [[ARCHITECTURE, util.lowerize]]
            ],

            device : [[

                /\((ipad|playbook);[\w\s\),;-]+(rim|apple)/i                        // iPad/PlayBook
                ], [MODEL, VENDOR, [TYPE, TABLET]], [

                /applecoremedia\/[\w\.]+ \((ipad)/                                  // iPad
                ], [MODEL, [VENDOR, 'Apple'], [TYPE, TABLET]], [

                /(apple\s{0,1}tv)/i                                                 // Apple TV
                ], [[MODEL, 'Apple TV'], [VENDOR, 'Apple'], [TYPE, SMARTTV]], [

                /(archos)\s(gamepad2?)/i,                                           // Archos
                /(hp).+(touchpad)/i,                                                // HP TouchPad
                /(hp).+(tablet)/i,                                                  // HP Tablet
                /(kindle)\/([\w\.]+)/i,                                             // Kindle
                /\s(nook)[\w\s]+build\/(\w+)/i,                                     // Nook
                /(dell)\s(strea[kpr\s\d]*[\dko])/i                                  // Dell Streak
                ], [VENDOR, MODEL, [TYPE, TABLET]], [

                /(kf[A-z]+)\sbuild\/.+silk\//i                                      // Kindle Fire HD
                ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [
                /(sd|kf)[0349hijorstuw]+\sbuild\/.+silk\//i                         // Fire Phone
                ], [[MODEL, mapper.str, maps.device.amazon.model], [VENDOR, 'Amazon'], [TYPE, MOBILE]], [
                /android.+aft([bms])\sbuild/i                                       // Fire TV
                ], [MODEL, [VENDOR, 'Amazon'], [TYPE, SMARTTV]], [

                /\((ip[honed|\s\w*]+);.+(apple)/i                                   // iPod/iPhone
                ], [MODEL, VENDOR, [TYPE, MOBILE]], [
                /\((ip[honed|\s\w*]+);/i                                            // iPod/iPhone
                ], [MODEL, [VENDOR, 'Apple'], [TYPE, MOBILE]], [

                /(blackberry)[\s-]?(\w+)/i,                                         // BlackBerry
                /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[\s_-]?([\w-]*)/i,
                                                                                    // BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
                /(hp)\s([\w\s]+\w)/i,                                               // HP iPAQ
                /(asus)-?(\w+)/i                                                    // Asus
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                /\(bb10;\s(\w+)/i                                                   // BlackBerry 10
                ], [MODEL, [VENDOR, 'BlackBerry'], [TYPE, MOBILE]], [
                                                                                    // Asus Tablets
                /android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7|padfone|p00c)/i
                ], [MODEL, [VENDOR, 'Asus'], [TYPE, TABLET]], [

                /(sony)\s(tablet\s[ps])\sbuild\//i,                                  // Sony
                /(sony)?(?:sgp.+)\sbuild\//i
                ], [[VENDOR, 'Sony'], [MODEL, 'Xperia Tablet'], [TYPE, TABLET]], [
                /android.+\s([c-g]\d{4}|so[-l]\w+)(?=\sbuild\/|\).+chrome\/(?![1-6]{0,1}\d\.))/i
                ], [MODEL, [VENDOR, 'Sony'], [TYPE, MOBILE]], [

                /\s(ouya)\s/i,                                                      // Ouya
                /(nintendo)\s([wids3u]+)/i                                          // Nintendo
                ], [VENDOR, MODEL, [TYPE, CONSOLE]], [

                /android.+;\s(shield)\sbuild/i                                      // Nvidia
                ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [

                /(playstation\s[34portablevi]+)/i                                   // Playstation
                ], [MODEL, [VENDOR, 'Sony'], [TYPE, CONSOLE]], [

                /(sprint\s(\w+))/i                                                  // Sprint Phones
                ], [[VENDOR, mapper.str, maps.device.sprint.vendor], [MODEL, mapper.str, maps.device.sprint.model], [TYPE, MOBILE]], [

                /(htc)[;_\s-]+([\w\s]+(?=\)|\sbuild)|\w+)/i,                        // HTC
                /(zte)-(\w*)/i,                                                     // ZTE
                /(alcatel|geeksphone|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]*)/i
                                                                                    // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
                ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

                /(nexus\s9)/i                                                       // HTC Nexus 9
                ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [

                /d\/huawei([\w\s-]+)[;\)]/i,
                /(nexus\s6p|vog-l29|ane-lx1|eml-l29)/i                              // Huawei
                ], [MODEL, [VENDOR, 'Huawei'], [TYPE, MOBILE]], [

                /android.+(bah2?-a?[lw]\d{2})/i                                     // Huawei MediaPad
                ], [MODEL, [VENDOR, 'Huawei'], [TYPE, TABLET]], [

                /(microsoft);\s(lumia[\s\w]+)/i                                     // Microsoft Lumia
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [

                /[\s\(;](xbox(?:\sone)?)[\s\);]/i                                   // Microsoft Xbox
                ], [MODEL, [VENDOR, 'Microsoft'], [TYPE, CONSOLE]], [
                /(kin\.[onetw]{3})/i                                                // Microsoft Kin
                ], [[MODEL, /\./g, ' '], [VENDOR, 'Microsoft'], [TYPE, MOBILE]], [

                                                                                    // Motorola
                /\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?:?(\s4g)?)[\w\s]+build\//i,
                /mot[\s-]?(\w*)/i,
                /(XT\d{3,4}) build\//i,
                /(nexus\s6)/i
                ], [MODEL, [VENDOR, 'Motorola'], [TYPE, MOBILE]], [
                /android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i
                ], [MODEL, [VENDOR, 'Motorola'], [TYPE, TABLET]], [

                /hbbtv\/\d+\.\d+\.\d+\s+\([\w\s]*;\s*(\w[^;]*);([^;]*)/i            // HbbTV devices
                ], [[VENDOR, util.trim], [MODEL, util.trim], [TYPE, SMARTTV]], [

                /hbbtv.+maple;(\d+)/i
                ], [[MODEL, /^/, 'SmartTV'], [VENDOR, 'Samsung'], [TYPE, SMARTTV]], [

                /\(dtv[\);].+(aquos)/i                                              // Sharp
                ], [MODEL, [VENDOR, 'Sharp'], [TYPE, SMARTTV]], [

                /android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n\d+|sgh-t8[56]9|nexus 10))/i,
                /((SM-T\w+))/i
                ], [[VENDOR, 'Samsung'], MODEL, [TYPE, TABLET]], [                  // Samsung
                /smart-tv.+(samsung)/i
                ], [VENDOR, [TYPE, SMARTTV], MODEL], [
                /((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-\w[\w\d]+))/i,
                /(sam[sung]*)[\s-]*(\w+-?[\w-]*)/i,
                /sec-((sgh\w+))/i
                ], [[VENDOR, 'Samsung'], MODEL, [TYPE, MOBILE]], [

                /sie-(\w*)/i                                                        // Siemens
                ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [

                /(maemo|nokia).*(n900|lumia\s\d+)/i,                                // Nokia
                /(nokia)[\s_-]?([\w-]*)/i
                ], [[VENDOR, 'Nokia'], MODEL, [TYPE, MOBILE]], [

                /android[x\d\.\s;]+\s([ab][1-7]\-?[0178a]\d\d?)/i                   // Acer
                ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

                /android.+([vl]k\-?\d{3})\s+build/i                                 // LG Tablet
                ], [MODEL, [VENDOR, 'LG'], [TYPE, TABLET]], [
                /android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i                     // LG Tablet
                ], [[VENDOR, 'LG'], MODEL, [TYPE, TABLET]], [
                /(lg) netcast\.tv/i                                                 // LG SmartTV
                ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
                /(nexus\s[45])/i,                                                   // LG
                /lg[e;\s\/-]+(\w*)/i,
                /android.+lg(\-?[\d\w]+)\s+build/i
                ], [MODEL, [VENDOR, 'LG'], [TYPE, MOBILE]], [

                /(lenovo)\s?(s(?:5000|6000)(?:[\w-]+)|tab(?:[\s\w]+))/i             // Lenovo tablets
                ], [VENDOR, MODEL, [TYPE, TABLET]], [
                /android.+(ideatab[a-z0-9\-\s]+)/i                                  // Lenovo
                ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [
                /(lenovo)[_\s-]?([\w-]+)/i
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [

                /linux;.+((jolla));/i                                               // Jolla
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [

                /((pebble))app\/[\d\.]+\s/i                                         // Pebble
                ], [VENDOR, MODEL, [TYPE, WEARABLE]], [

                /android.+;\s(oppo)\s?([\w\s]+)\sbuild/i                            // OPPO
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [

                /crkey/i                                                            // Google Chromecast
                ], [[MODEL, 'Chromecast'], [VENDOR, 'Google'], [TYPE, SMARTTV]], [

                /android.+;\s(glass)\s\d/i                                          // Google Glass
                ], [MODEL, [VENDOR, 'Google'], [TYPE, WEARABLE]], [

                /android.+;\s(pixel c)[\s)]/i                                       // Google Pixel C
                ], [MODEL, [VENDOR, 'Google'], [TYPE, TABLET]], [

                /android.+;\s(pixel( [23])?( xl)?)[\s)]/i                              // Google Pixel
                ], [MODEL, [VENDOR, 'Google'], [TYPE, MOBILE]], [

                /android.+;\s(\w+)\s+build\/hm\1/i,                                 // Xiaomi Hongmi 'numeric' models
                /android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i,               // Xiaomi Hongmi
                /android.+(mi[\s\-_]*(?:a\d|one|one[\s_]plus|note lte)?[\s_]*(?:\d?\w?)[\s_]*(?:plus)?)\s+build/i,    
                                                                                    // Xiaomi Mi
                /android.+(redmi[\s\-_]*(?:note)?(?:[\s_]*[\w\s]+))\s+build/i       // Redmi Phones
                ], [[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, MOBILE]], [
                /android.+(mi[\s\-_]*(?:pad)(?:[\s_]*[\w\s]+))\s+build/i            // Mi Pad tablets
                ],[[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, TABLET]], [
                /android.+;\s(m[1-5]\snote)\sbuild/i                                // Meizu
                ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [
                /(mz)-([\w-]{2,})/i
                ], [[VENDOR, 'Meizu'], MODEL, [TYPE, MOBILE]], [

                /android.+a000(1)\s+build/i,                                        // OnePlus
                /android.+oneplus\s(a\d{4})[\s)]/i
                ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

                /android.+[;\/]\s*(RCT[\d\w]+)\s+build/i                            // RCA Tablets
                ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [

                /android.+[;\/\s]+(Venue[\d\s]{2,7})\s+build/i                      // Dell Venue Tablets
                ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [

                /android.+[;\/]\s*(Q[T|M][\d\w]+)\s+build/i                         // Verizon Tablet
                ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [

                /android.+[;\/]\s+(Barnes[&\s]+Noble\s+|BN[RT])(V?.*)\s+build/i     // Barnes & Noble Tablet
                ], [[VENDOR, 'Barnes & Noble'], MODEL, [TYPE, TABLET]], [

                /android.+[;\/]\s+(TM\d{3}.*\b)\s+build/i                           // Barnes & Noble Tablet
                ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [

                /android.+;\s(k88)\sbuild/i                                         // ZTE K Series Tablet
                ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [

                /android.+[;\/]\s*(gen\d{3})\s+build.*49h/i                         // Swiss GEN Mobile
                ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [

                /android.+[;\/]\s*(zur\d{3})\s+build/i                              // Swiss ZUR Tablet
                ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [

                /android.+[;\/]\s*((Zeki)?TB.*\b)\s+build/i                         // Zeki Tablets
                ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [

                /(android).+[;\/]\s+([YR]\d{2})\s+build/i,
                /android.+[;\/]\s+(Dragon[\-\s]+Touch\s+|DT)(\w{5})\sbuild/i        // Dragon Touch Tablet
                ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [

                /android.+[;\/]\s*(NS-?\w{0,9})\sbuild/i                            // Insignia Tablets
                ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [

                /android.+[;\/]\s*((NX|Next)-?\w{0,9})\s+build/i                    // NextBook Tablets
                ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [

                /android.+[;\/]\s*(Xtreme\_)?(V(1[045]|2[015]|30|40|60|7[05]|90))\s+build/i
                ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [                    // Voice Xtreme Phones

                /android.+[;\/]\s*(LVTEL\-)?(V1[12])\s+build/i                     // LvTel Phones
                ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [

                /android.+;\s(PH-1)\s/i
                ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [                // Essential PH-1

                /android.+[;\/]\s*(V(100MD|700NA|7011|917G).*\b)\s+build/i          // Envizen Tablets
                ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [

                /android.+[;\/]\s*(Le[\s\-]+Pan)[\s\-]+(\w{1,9})\s+build/i          // Le Pan Tablets
                ], [VENDOR, MODEL, [TYPE, TABLET]], [

                /android.+[;\/]\s*(Trio[\s\-]*.*)\s+build/i                         // MachSpeed Tablets
                ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [

                /android.+[;\/]\s*(Trinity)[\-\s]*(T\d{3})\s+build/i                // Trinity Tablets
                ], [VENDOR, MODEL, [TYPE, TABLET]], [

                /android.+[;\/]\s*TU_(1491)\s+build/i                               // Rotor Tablets
                ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [

                /android.+(KS(.+))\s+build/i                                        // Amazon Kindle Tablets
                ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [

                /android.+(Gigaset)[\s\-]+(Q\w{1,9})\s+build/i                      // Gigaset Tablets
                ], [VENDOR, MODEL, [TYPE, TABLET]], [

                /\s(tablet|tab)[;\/]/i,                                             // Unidentifiable Tablet
                /\s(mobile)(?:[;\/]|\ssafari)/i                                     // Unidentifiable Mobile
                ], [[TYPE, util.lowerize], VENDOR, MODEL], [

                /[\s\/\(](smart-?tv)[;\)]/i                                         // SmartTV
                ], [[TYPE, SMARTTV]], [

                /(android[\w\.\s\-]{0,9});.+build/i                                 // Generic Android Device
                ], [MODEL, [VENDOR, 'Generic']]
            ],

            engine : [[

                /windows.+\sedge\/([\w\.]+)/i                                       // EdgeHTML
                ], [VERSION, [NAME, 'EdgeHTML']], [

                /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i                         // Blink
                ], [VERSION, [NAME, 'Blink']], [

                /(presto)\/([\w\.]+)/i,                                             // Presto
                /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,     
                                                                                    // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
                /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i,                          // KHTML/Tasman/Links
                /(icab)[\/\s]([23]\.[\d\.]+)/i                                      // iCab
                ], [NAME, VERSION], [

                /rv\:([\w\.]{1,9}).+(gecko)/i                                       // Gecko
                ], [VERSION, NAME]
            ],

            os : [[

                // Windows based
                /microsoft\s(windows)\s(vista|xp)/i                                 // Windows (iTunes)
                ], [NAME, VERSION], [
                /(windows)\snt\s6\.2;\s(arm)/i,                                     // Windows RT
                /(windows\sphone(?:\sos)*)[\s\/]?([\d\.\s\w]*)/i,                   // Windows Phone
                /(windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i
                ], [NAME, [VERSION, mapper.str, maps.os.windows.version]], [
                /(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i
                ], [[NAME, 'Windows'], [VERSION, mapper.str, maps.os.windows.version]], [

                // Mobile/Embedded OS
                /\((bb)(10);/i                                                      // BlackBerry 10
                ], [[NAME, 'BlackBerry'], VERSION], [
                /(blackberry)\w*\/?([\w\.]*)/i,                                     // Blackberry
                /(tizen|kaios)[\/\s]([\w\.]+)/i,                                    // Tizen/KaiOS
                /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|sailfish|contiki)[\/\s-]?([\w\.]*)/i
                                                                                    // Android/WebOS/Palm/QNX/Bada/RIM/MeeGo/Contiki/Sailfish OS
                ], [NAME, VERSION], [
                /(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]*)/i                  // Symbian
                ], [[NAME, 'Symbian'], VERSION], [
                /\((series40);/i                                                    // Series 40
                ], [NAME], [
                /mozilla.+\(mobile;.+gecko.+firefox/i                               // Firefox OS
                ], [[NAME, 'Firefox OS'], VERSION], [

                // Console
                /(nintendo|playstation)\s([wids34portablevu]+)/i,                   // Nintendo/Playstation

                // GNU/Linux based
                /(mint)[\/\s\(]?(\w*)/i,                                            // Mint
                /(mageia|vectorlinux)[;\s]/i,                                       // Mageia/VectorLinux
                /(joli|[kxln]?ubuntu|debian|suse|opensuse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?(?!chrom)([\w\.-]*)/i,
                                                                                    // Joli/Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware
                                                                                    // Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus
                /(hurd|linux)\s?([\w\.]*)/i,                                        // Hurd/Linux
                /(gnu)\s?([\w\.]*)/i                                                // GNU
                ], [NAME, VERSION], [

                /(cros)\s[\w]+\s([\w\.]+\w)/i                                       // Chromium OS
                ], [[NAME, 'Chromium OS'], VERSION],[

                // Solaris
                /(sunos)\s?([\w\.\d]*)/i                                            // Solaris
                ], [[NAME, 'Solaris'], VERSION], [

                // BSD based
                /\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]*)/i                    // FreeBSD/NetBSD/OpenBSD/PC-BSD/DragonFly
                ], [NAME, VERSION],[

                /(haiku)\s(\w+)/i                                                   // Haiku
                ], [NAME, VERSION],[

                /cfnetwork\/.+darwin/i,
                /ip[honead]{2,4}(?:.*os\s([\w]+)\slike\smac|;\sopera)/i             // iOS
                ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [

                /(mac\sos\sx)\s?([\w\s\.]*)/i,
                /(macintosh|mac(?=_powerpc)\s)/i                                    // Mac OS
                ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [

                // Other
                /((?:open)?solaris)[\/\s-]?([\w\.]*)/i,                             // Solaris
                /(aix)\s((\d)(?=\.|\)|\s)[\w\.])*/i,                                // AIX
                /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms|fuchsia)/i,
                                                                                    // Plan9/Minix/BeOS/OS2/AmigaOS/MorphOS/RISCOS/OpenVMS/Fuchsia
                /(unix)\s?([\w\.]*)/i                                               // UNIX
                ], [NAME, VERSION]
            ]
        };


        /////////////////
        // Constructor
        ////////////////
        var UAParser = function (uastring, extensions) {

            if (typeof uastring === 'object') {
                extensions = uastring;
                uastring = undefined$1;
            }

            if (!(this instanceof UAParser)) {
                return new UAParser(uastring, extensions).getResult();
            }

            var ua = uastring || ((window && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);
            var rgxmap = extensions ? util.extend(regexes, extensions) : regexes;

            this.getBrowser = function () {
                var browser = { name: undefined$1, version: undefined$1 };
                mapper.rgx.call(browser, ua, rgxmap.browser);
                browser.major = util.major(browser.version); // deprecated
                return browser;
            };
            this.getCPU = function () {
                var cpu = { architecture: undefined$1 };
                mapper.rgx.call(cpu, ua, rgxmap.cpu);
                return cpu;
            };
            this.getDevice = function () {
                var device = { vendor: undefined$1, model: undefined$1, type: undefined$1 };
                mapper.rgx.call(device, ua, rgxmap.device);
                return device;
            };
            this.getEngine = function () {
                var engine = { name: undefined$1, version: undefined$1 };
                mapper.rgx.call(engine, ua, rgxmap.engine);
                return engine;
            };
            this.getOS = function () {
                var os = { name: undefined$1, version: undefined$1 };
                mapper.rgx.call(os, ua, rgxmap.os);
                return os;
            };
            this.getResult = function () {
                return {
                    ua      : this.getUA(),
                    browser : this.getBrowser(),
                    engine  : this.getEngine(),
                    os      : this.getOS(),
                    device  : this.getDevice(),
                    cpu     : this.getCPU()
                };
            };
            this.getUA = function () {
                return ua;
            };
            this.setUA = function (uastring) {
                ua = uastring;
                return this;
            };
            return this;
        };

        UAParser.VERSION = LIBVERSION;
        UAParser.BROWSER = {
            NAME    : NAME,
            MAJOR   : MAJOR, // deprecated
            VERSION : VERSION
        };
        UAParser.CPU = {
            ARCHITECTURE : ARCHITECTURE
        };
        UAParser.DEVICE = {
            MODEL   : MODEL,
            VENDOR  : VENDOR,
            TYPE    : TYPE,
            CONSOLE : CONSOLE,
            MOBILE  : MOBILE,
            SMARTTV : SMARTTV,
            TABLET  : TABLET,
            WEARABLE: WEARABLE,
            EMBEDDED: EMBEDDED
        };
        UAParser.ENGINE = {
            NAME    : NAME,
            VERSION : VERSION
        };
        UAParser.OS = {
            NAME    : NAME,
            VERSION : VERSION
        };

        ///////////
        // Export
        //////////


        // check js environment
        {
            // nodejs env
            if ( module.exports) {
                exports = module.exports = UAParser;
            }
            exports.UAParser = UAParser;
        }

        // jQuery/Zepto specific (optional)
        // Note:
        //   In AMD env the global scope should be kept clean, but jQuery is an exception.
        //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
        //   and we should catch that.
        var $ = window && (window.jQuery || window.Zepto);
        if ($ && !$.ua) {
            var parser = new UAParser();
            $.ua = parser.getResult();
            $.ua.get = function () {
                return parser.getUA();
            };
            $.ua.set = function (uastring) {
                parser.setUA(uastring);
                var result = parser.getResult();
                for (var prop in result) {
                    $.ua[prop] = result[prop];
                }
            };
        }

    })(typeof window === 'object' ? window : commonjsGlobal);
    });
    var uaParser_1 = uaParser.UAParser;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     */

    var emptyObject = {};

    {
      Object.freeze(emptyObject);
    }

    var emptyObject_1 = emptyObject;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     */

    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */

    var validateFormat = function validateFormat(format) {};

    {
      validateFormat = function validateFormat(format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant$1(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error;
        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame
        throw error;
      }
    }

    var invariant_1 = invariant$1;

    /**
     * Copyright (c) 2013-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     *
     * 
     */

    function makeEmptyFunction(arg) {
      return function () {
        return arg;
      };
    }

    /**
     * This function accepts and discards inputs; it has no side effects. This is
     * primarily useful idiomatically for overridable function endpoints which
     * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
     */
    var emptyFunction = function emptyFunction() {};

    emptyFunction.thatReturns = makeEmptyFunction;
    emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
    emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
    emptyFunction.thatReturnsNull = makeEmptyFunction(null);
    emptyFunction.thatReturnsThis = function () {
      return this;
    };
    emptyFunction.thatReturnsArgument = function (arg) {
      return arg;
    };

    var emptyFunction_1 = emptyFunction;

    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning$1 = emptyFunction_1;

    {
      var printWarning$2 = function printWarning(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      warning$1 = function warning(condition, format) {
        if (format === undefined) {
          throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (format.indexOf('Failed Composite propType: ') === 0) {
          return; // Ignore CompositeComponent proptype check.
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning$2.apply(undefined, [format].concat(args));
        }
      };
    }

    var warning_1 = warning$1;

    {
      var warning$2 = warning_1;
    }

    var MIXINS_KEY = 'mixins';

    // Helper function to allow the creation of anonymous functions which do not
    // have .name set to the name of the variable being assigned to.
    function identity(fn) {
      return fn;
    }

    var ReactPropTypeLocationNames;
    {
      ReactPropTypeLocationNames = {
        prop: 'prop',
        context: 'context',
        childContext: 'child context'
      };
    }

    function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
      /**
       * Policies that describe methods in `ReactClassInterface`.
       */

      var injectedMixins = [];

      /**
       * Composite components are higher-level components that compose other composite
       * or host components.
       *
       * To create a new type of `ReactClass`, pass a specification of
       * your new class to `React.createClass`. The only requirement of your class
       * specification is that you implement a `render` method.
       *
       *   var MyComponent = React.createClass({
       *     render: function() {
       *       return <div>Hello World</div>;
       *     }
       *   });
       *
       * The class specification supports a specific protocol of methods that have
       * special meaning (e.g. `render`). See `ReactClassInterface` for
       * more the comprehensive protocol. Any other properties and methods in the
       * class specification will be available on the prototype.
       *
       * @interface ReactClassInterface
       * @internal
       */
      var ReactClassInterface = {
        /**
         * An array of Mixin objects to include when defining your component.
         *
         * @type {array}
         * @optional
         */
        mixins: 'DEFINE_MANY',

        /**
         * An object containing properties and methods that should be defined on
         * the component's constructor instead of its prototype (static methods).
         *
         * @type {object}
         * @optional
         */
        statics: 'DEFINE_MANY',

        /**
         * Definition of prop types for this component.
         *
         * @type {object}
         * @optional
         */
        propTypes: 'DEFINE_MANY',

        /**
         * Definition of context types for this component.
         *
         * @type {object}
         * @optional
         */
        contextTypes: 'DEFINE_MANY',

        /**
         * Definition of context types this component sets for its children.
         *
         * @type {object}
         * @optional
         */
        childContextTypes: 'DEFINE_MANY',

        // ==== Definition methods ====

        /**
         * Invoked when the component is mounted. Values in the mapping will be set on
         * `this.props` if that prop is not specified (i.e. using an `in` check).
         *
         * This method is invoked before `getInitialState` and therefore cannot rely
         * on `this.state` or use `this.setState`.
         *
         * @return {object}
         * @optional
         */
        getDefaultProps: 'DEFINE_MANY_MERGED',

        /**
         * Invoked once before the component is mounted. The return value will be used
         * as the initial value of `this.state`.
         *
         *   getInitialState: function() {
         *     return {
         *       isOn: false,
         *       fooBaz: new BazFoo()
         *     }
         *   }
         *
         * @return {object}
         * @optional
         */
        getInitialState: 'DEFINE_MANY_MERGED',

        /**
         * @return {object}
         * @optional
         */
        getChildContext: 'DEFINE_MANY_MERGED',

        /**
         * Uses props from `this.props` and state from `this.state` to render the
         * structure of the component.
         *
         * No guarantees are made about when or how often this method is invoked, so
         * it must not have side effects.
         *
         *   render: function() {
         *     var name = this.props.name;
         *     return <div>Hello, {name}!</div>;
         *   }
         *
         * @return {ReactComponent}
         * @required
         */
        render: 'DEFINE_ONCE',

        // ==== Delegate methods ====

        /**
         * Invoked when the component is initially created and about to be mounted.
         * This may have side effects, but any external subscriptions or data created
         * by this method must be cleaned up in `componentWillUnmount`.
         *
         * @optional
         */
        componentWillMount: 'DEFINE_MANY',

        /**
         * Invoked when the component has been mounted and has a DOM representation.
         * However, there is no guarantee that the DOM node is in the document.
         *
         * Use this as an opportunity to operate on the DOM when the component has
         * been mounted (initialized and rendered) for the first time.
         *
         * @param {DOMElement} rootNode DOM element representing the component.
         * @optional
         */
        componentDidMount: 'DEFINE_MANY',

        /**
         * Invoked before the component receives new props.
         *
         * Use this as an opportunity to react to a prop transition by updating the
         * state using `this.setState`. Current props are accessed via `this.props`.
         *
         *   componentWillReceiveProps: function(nextProps, nextContext) {
         *     this.setState({
         *       likesIncreasing: nextProps.likeCount > this.props.likeCount
         *     });
         *   }
         *
         * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
         * transition may cause a state change, but the opposite is not true. If you
         * need it, you are probably looking for `componentWillUpdate`.
         *
         * @param {object} nextProps
         * @optional
         */
        componentWillReceiveProps: 'DEFINE_MANY',

        /**
         * Invoked while deciding if the component should be updated as a result of
         * receiving new props, state and/or context.
         *
         * Use this as an opportunity to `return false` when you're certain that the
         * transition to the new props/state/context will not require a component
         * update.
         *
         *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
         *     return !equal(nextProps, this.props) ||
         *       !equal(nextState, this.state) ||
         *       !equal(nextContext, this.context);
         *   }
         *
         * @param {object} nextProps
         * @param {?object} nextState
         * @param {?object} nextContext
         * @return {boolean} True if the component should update.
         * @optional
         */
        shouldComponentUpdate: 'DEFINE_ONCE',

        /**
         * Invoked when the component is about to update due to a transition from
         * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
         * and `nextContext`.
         *
         * Use this as an opportunity to perform preparation before an update occurs.
         *
         * NOTE: You **cannot** use `this.setState()` in this method.
         *
         * @param {object} nextProps
         * @param {?object} nextState
         * @param {?object} nextContext
         * @param {ReactReconcileTransaction} transaction
         * @optional
         */
        componentWillUpdate: 'DEFINE_MANY',

        /**
         * Invoked when the component's DOM representation has been updated.
         *
         * Use this as an opportunity to operate on the DOM when the component has
         * been updated.
         *
         * @param {object} prevProps
         * @param {?object} prevState
         * @param {?object} prevContext
         * @param {DOMElement} rootNode DOM element representing the component.
         * @optional
         */
        componentDidUpdate: 'DEFINE_MANY',

        /**
         * Invoked when the component is about to be removed from its parent and have
         * its DOM representation destroyed.
         *
         * Use this as an opportunity to deallocate any external resources.
         *
         * NOTE: There is no `componentDidUnmount` since your component will have been
         * destroyed by that point.
         *
         * @optional
         */
        componentWillUnmount: 'DEFINE_MANY',

        /**
         * Replacement for (deprecated) `componentWillMount`.
         *
         * @optional
         */
        UNSAFE_componentWillMount: 'DEFINE_MANY',

        /**
         * Replacement for (deprecated) `componentWillReceiveProps`.
         *
         * @optional
         */
        UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',

        /**
         * Replacement for (deprecated) `componentWillUpdate`.
         *
         * @optional
         */
        UNSAFE_componentWillUpdate: 'DEFINE_MANY',

        // ==== Advanced methods ====

        /**
         * Updates the component's currently mounted DOM representation.
         *
         * By default, this implements React's rendering and reconciliation algorithm.
         * Sophisticated clients may wish to override this.
         *
         * @param {ReactReconcileTransaction} transaction
         * @internal
         * @overridable
         */
        updateComponent: 'OVERRIDE_BASE'
      };

      /**
       * Similar to ReactClassInterface but for static methods.
       */
      var ReactClassStaticInterface = {
        /**
         * This method is invoked after a component is instantiated and when it
         * receives new props. Return an object to update state in response to
         * prop changes. Return null to indicate no change to state.
         *
         * If an object is returned, its keys will be merged into the existing state.
         *
         * @return {object || null}
         * @optional
         */
        getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
      };

      /**
       * Mapping from class specification keys to special processing functions.
       *
       * Although these are declared like instance properties in the specification
       * when defining classes using `React.createClass`, they are actually static
       * and are accessible on the constructor instead of the prototype. Despite
       * being static, they must be defined outside of the "statics" key under
       * which all other static methods are defined.
       */
      var RESERVED_SPEC_KEYS = {
        displayName: function(Constructor, displayName) {
          Constructor.displayName = displayName;
        },
        mixins: function(Constructor, mixins) {
          if (mixins) {
            for (var i = 0; i < mixins.length; i++) {
              mixSpecIntoComponent(Constructor, mixins[i]);
            }
          }
        },
        childContextTypes: function(Constructor, childContextTypes) {
          {
            validateTypeDef(Constructor, childContextTypes, 'childContext');
          }
          Constructor.childContextTypes = objectAssign(
            {},
            Constructor.childContextTypes,
            childContextTypes
          );
        },
        contextTypes: function(Constructor, contextTypes) {
          {
            validateTypeDef(Constructor, contextTypes, 'context');
          }
          Constructor.contextTypes = objectAssign(
            {},
            Constructor.contextTypes,
            contextTypes
          );
        },
        /**
         * Special case getDefaultProps which should move into statics but requires
         * automatic merging.
         */
        getDefaultProps: function(Constructor, getDefaultProps) {
          if (Constructor.getDefaultProps) {
            Constructor.getDefaultProps = createMergedResultFunction(
              Constructor.getDefaultProps,
              getDefaultProps
            );
          } else {
            Constructor.getDefaultProps = getDefaultProps;
          }
        },
        propTypes: function(Constructor, propTypes) {
          {
            validateTypeDef(Constructor, propTypes, 'prop');
          }
          Constructor.propTypes = objectAssign({}, Constructor.propTypes, propTypes);
        },
        statics: function(Constructor, statics) {
          mixStaticSpecIntoComponent(Constructor, statics);
        },
        autobind: function() {}
      };

      function validateTypeDef(Constructor, typeDef, location) {
        for (var propName in typeDef) {
          if (typeDef.hasOwnProperty(propName)) {
            // use a warning instead of an _invariant so components
            // don't show up in prod but only in __DEV__
            {
              warning$2(
                typeof typeDef[propName] === 'function',
                '%s: %s type `%s` is invalid; it must be a function, usually from ' +
                  'React.PropTypes.',
                Constructor.displayName || 'ReactClass',
                ReactPropTypeLocationNames[location],
                propName
              );
            }
          }
        }
      }

      function validateMethodOverride(isAlreadyDefined, name) {
        var specPolicy = ReactClassInterface.hasOwnProperty(name)
          ? ReactClassInterface[name]
          : null;

        // Disallow overriding of base class methods unless explicitly allowed.
        if (ReactClassMixin.hasOwnProperty(name)) {
          invariant_1(
            specPolicy === 'OVERRIDE_BASE',
            'ReactClassInterface: You are attempting to override ' +
              '`%s` from your class specification. Ensure that your method names ' +
              'do not overlap with React methods.',
            name
          );
        }

        // Disallow defining methods more than once unless explicitly allowed.
        if (isAlreadyDefined) {
          invariant_1(
            specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
            'ReactClassInterface: You are attempting to define ' +
              '`%s` on your component more than once. This conflict may be due ' +
              'to a mixin.',
            name
          );
        }
      }

      /**
       * Mixin helper which handles policy validation and reserved
       * specification keys when building React classes.
       */
      function mixSpecIntoComponent(Constructor, spec) {
        if (!spec) {
          {
            var typeofSpec = typeof spec;
            var isMixinValid = typeofSpec === 'object' && spec !== null;

            {
              warning$2(
                isMixinValid,
                "%s: You're attempting to include a mixin that is either null " +
                  'or not an object. Check the mixins included by the component, ' +
                  'as well as any mixins they include themselves. ' +
                  'Expected object but got %s.',
                Constructor.displayName || 'ReactClass',
                spec === null ? null : typeofSpec
              );
            }
          }

          return;
        }

        invariant_1(
          typeof spec !== 'function',
          "ReactClass: You're attempting to " +
            'use a component class or function as a mixin. Instead, just use a ' +
            'regular object.'
        );
        invariant_1(
          !isValidElement(spec),
          "ReactClass: You're attempting to " +
            'use a component as a mixin. Instead, just use a regular object.'
        );

        var proto = Constructor.prototype;
        var autoBindPairs = proto.__reactAutoBindPairs;

        // By handling mixins before any other properties, we ensure the same
        // chaining order is applied to methods with DEFINE_MANY policy, whether
        // mixins are listed before or after these methods in the spec.
        if (spec.hasOwnProperty(MIXINS_KEY)) {
          RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
        }

        for (var name in spec) {
          if (!spec.hasOwnProperty(name)) {
            continue;
          }

          if (name === MIXINS_KEY) {
            // We have already handled mixins in a special case above.
            continue;
          }

          var property = spec[name];
          var isAlreadyDefined = proto.hasOwnProperty(name);
          validateMethodOverride(isAlreadyDefined, name);

          if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
            RESERVED_SPEC_KEYS[name](Constructor, property);
          } else {
            // Setup methods on prototype:
            // The following member methods should not be automatically bound:
            // 1. Expected ReactClass methods (in the "interface").
            // 2. Overridden methods (that were mixed in).
            var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
            var isFunction = typeof property === 'function';
            var shouldAutoBind =
              isFunction &&
              !isReactClassMethod &&
              !isAlreadyDefined &&
              spec.autobind !== false;

            if (shouldAutoBind) {
              autoBindPairs.push(name, property);
              proto[name] = property;
            } else {
              if (isAlreadyDefined) {
                var specPolicy = ReactClassInterface[name];

                // These cases should already be caught by validateMethodOverride.
                invariant_1(
                  isReactClassMethod &&
                    (specPolicy === 'DEFINE_MANY_MERGED' ||
                      specPolicy === 'DEFINE_MANY'),
                  'ReactClass: Unexpected spec policy %s for key %s ' +
                    'when mixing in component specs.',
                  specPolicy,
                  name
                );

                // For methods which are defined more than once, call the existing
                // methods before calling the new property, merging if appropriate.
                if (specPolicy === 'DEFINE_MANY_MERGED') {
                  proto[name] = createMergedResultFunction(proto[name], property);
                } else if (specPolicy === 'DEFINE_MANY') {
                  proto[name] = createChainedFunction(proto[name], property);
                }
              } else {
                proto[name] = property;
                {
                  // Add verbose displayName to the function, which helps when looking
                  // at profiling tools.
                  if (typeof property === 'function' && spec.displayName) {
                    proto[name].displayName = spec.displayName + '_' + name;
                  }
                }
              }
            }
          }
        }
      }

      function mixStaticSpecIntoComponent(Constructor, statics) {
        if (!statics) {
          return;
        }

        for (var name in statics) {
          var property = statics[name];
          if (!statics.hasOwnProperty(name)) {
            continue;
          }

          var isReserved = name in RESERVED_SPEC_KEYS;
          invariant_1(
            !isReserved,
            'ReactClass: You are attempting to define a reserved ' +
              'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
              'as an instance property instead; it will still be accessible on the ' +
              'constructor.',
            name
          );

          var isAlreadyDefined = name in Constructor;
          if (isAlreadyDefined) {
            var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)
              ? ReactClassStaticInterface[name]
              : null;

            invariant_1(
              specPolicy === 'DEFINE_MANY_MERGED',
              'ReactClass: You are attempting to define ' +
                '`%s` on your component more than once. This conflict may be ' +
                'due to a mixin.',
              name
            );

            Constructor[name] = createMergedResultFunction(Constructor[name], property);

            return;
          }

          Constructor[name] = property;
        }
      }

      /**
       * Merge two objects, but throw if both contain the same key.
       *
       * @param {object} one The first object, which is mutated.
       * @param {object} two The second object
       * @return {object} one after it has been mutated to contain everything in two.
       */
      function mergeIntoWithNoDuplicateKeys(one, two) {
        invariant_1(
          one && two && typeof one === 'object' && typeof two === 'object',
          'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
        );

        for (var key in two) {
          if (two.hasOwnProperty(key)) {
            invariant_1(
              one[key] === undefined,
              'mergeIntoWithNoDuplicateKeys(): ' +
                'Tried to merge two objects with the same key: `%s`. This conflict ' +
                'may be due to a mixin; in particular, this may be caused by two ' +
                'getInitialState() or getDefaultProps() methods returning objects ' +
                'with clashing keys.',
              key
            );
            one[key] = two[key];
          }
        }
        return one;
      }

      /**
       * Creates a function that invokes two functions and merges their return values.
       *
       * @param {function} one Function to invoke first.
       * @param {function} two Function to invoke second.
       * @return {function} Function that invokes the two argument functions.
       * @private
       */
      function createMergedResultFunction(one, two) {
        return function mergedResult() {
          var a = one.apply(this, arguments);
          var b = two.apply(this, arguments);
          if (a == null) {
            return b;
          } else if (b == null) {
            return a;
          }
          var c = {};
          mergeIntoWithNoDuplicateKeys(c, a);
          mergeIntoWithNoDuplicateKeys(c, b);
          return c;
        };
      }

      /**
       * Creates a function that invokes two functions and ignores their return vales.
       *
       * @param {function} one Function to invoke first.
       * @param {function} two Function to invoke second.
       * @return {function} Function that invokes the two argument functions.
       * @private
       */
      function createChainedFunction(one, two) {
        return function chainedFunction() {
          one.apply(this, arguments);
          two.apply(this, arguments);
        };
      }

      /**
       * Binds a method to the component.
       *
       * @param {object} component Component whose method is going to be bound.
       * @param {function} method Method to be bound.
       * @return {function} The bound method.
       */
      function bindAutoBindMethod(component, method) {
        var boundMethod = method.bind(component);
        {
          boundMethod.__reactBoundContext = component;
          boundMethod.__reactBoundMethod = method;
          boundMethod.__reactBoundArguments = null;
          var componentName = component.constructor.displayName;
          var _bind = boundMethod.bind;
          boundMethod.bind = function(newThis) {
            for (
              var _len = arguments.length,
                args = Array(_len > 1 ? _len - 1 : 0),
                _key = 1;
              _key < _len;
              _key++
            ) {
              args[_key - 1] = arguments[_key];
            }

            // User is trying to bind() an autobound method; we effectively will
            // ignore the value of "this" that the user is trying to use, so
            // let's warn.
            if (newThis !== component && newThis !== null) {
              {
                warning$2(
                  false,
                  'bind(): React component methods may only be bound to the ' +
                    'component instance. See %s',
                  componentName
                );
              }
            } else if (!args.length) {
              {
                warning$2(
                  false,
                  'bind(): You are binding a component method to the component. ' +
                    'React does this for you automatically in a high-performance ' +
                    'way, so you can safely remove this call. See %s',
                  componentName
                );
              }
              return boundMethod;
            }
            var reboundMethod = _bind.apply(boundMethod, arguments);
            reboundMethod.__reactBoundContext = component;
            reboundMethod.__reactBoundMethod = method;
            reboundMethod.__reactBoundArguments = args;
            return reboundMethod;
          };
        }
        return boundMethod;
      }

      /**
       * Binds all auto-bound methods in a component.
       *
       * @param {object} component Component whose method is going to be bound.
       */
      function bindAutoBindMethods(component) {
        var pairs = component.__reactAutoBindPairs;
        for (var i = 0; i < pairs.length; i += 2) {
          var autoBindKey = pairs[i];
          var method = pairs[i + 1];
          component[autoBindKey] = bindAutoBindMethod(component, method);
        }
      }

      var IsMountedPreMixin = {
        componentDidMount: function() {
          this.__isMounted = true;
        }
      };

      var IsMountedPostMixin = {
        componentWillUnmount: function() {
          this.__isMounted = false;
        }
      };

      /**
       * Add more to the ReactClass base class. These are all legacy features and
       * therefore not already part of the modern ReactComponent.
       */
      var ReactClassMixin = {
        /**
         * TODO: This will be deprecated because state should always keep a consistent
         * type signature and the only use case for this, is to avoid that.
         */
        replaceState: function(newState, callback) {
          this.updater.enqueueReplaceState(this, newState, callback);
        },

        /**
         * Checks whether or not this composite component is mounted.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function() {
          {
            warning$2(
              this.__didWarnIsMounted,
              '%s: isMounted is deprecated. Instead, make sure to clean up ' +
                'subscriptions and pending requests in componentWillUnmount to ' +
                'prevent memory leaks.',
              (this.constructor && this.constructor.displayName) ||
                this.name ||
                'Component'
            );
            this.__didWarnIsMounted = true;
          }
          return !!this.__isMounted;
        }
      };

      var ReactClassComponent = function() {};
      objectAssign(
        ReactClassComponent.prototype,
        ReactComponent.prototype,
        ReactClassMixin
      );

      /**
       * Creates a composite component class given a class specification.
       * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
       *
       * @param {object} spec Class specification (which must define `render`).
       * @return {function} Component constructor function.
       * @public
       */
      function createClass(spec) {
        // To keep our warnings more understandable, we'll use a little hack here to
        // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
        // unnecessarily identify a class without displayName as 'Constructor'.
        var Constructor = identity(function(props, context, updater) {
          // This constructor gets overridden by mocks. The argument is used
          // by mocks to assert on what gets mounted.

          {
            warning$2(
              this instanceof Constructor,
              'Something is calling a React component directly. Use a factory or ' +
                'JSX instead. See: https://fb.me/react-legacyfactory'
            );
          }

          // Wire up auto-binding
          if (this.__reactAutoBindPairs.length) {
            bindAutoBindMethods(this);
          }

          this.props = props;
          this.context = context;
          this.refs = emptyObject_1;
          this.updater = updater || ReactNoopUpdateQueue;

          this.state = null;

          // ReactClasses doesn't have constructors. Instead, they use the
          // getInitialState and componentWillMount methods for initialization.

          var initialState = this.getInitialState ? this.getInitialState() : null;
          {
            // We allow auto-mocks to proceed as if they're returning null.
            if (
              initialState === undefined &&
              this.getInitialState._isMockFunction
            ) {
              // This is probably bad practice. Consider warning here and
              // deprecating this convenience.
              initialState = null;
            }
          }
          invariant_1(
            typeof initialState === 'object' && !Array.isArray(initialState),
            '%s.getInitialState(): must return an object or null',
            Constructor.displayName || 'ReactCompositeComponent'
          );

          this.state = initialState;
        });
        Constructor.prototype = new ReactClassComponent();
        Constructor.prototype.constructor = Constructor;
        Constructor.prototype.__reactAutoBindPairs = [];

        injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

        mixSpecIntoComponent(Constructor, IsMountedPreMixin);
        mixSpecIntoComponent(Constructor, spec);
        mixSpecIntoComponent(Constructor, IsMountedPostMixin);

        // Initialize the defaultProps property after all mixins have been merged.
        if (Constructor.getDefaultProps) {
          Constructor.defaultProps = Constructor.getDefaultProps();
        }

        {
          // This is a tag to indicate that the use of these method names is ok,
          // since it's used with createClass. If it's not, then it's likely a
          // mistake so we'll warn you to use the static property, property
          // initializer or constructor respectively.
          if (Constructor.getDefaultProps) {
            Constructor.getDefaultProps.isReactClassApproved = {};
          }
          if (Constructor.prototype.getInitialState) {
            Constructor.prototype.getInitialState.isReactClassApproved = {};
          }
        }

        invariant_1(
          Constructor.prototype.render,
          'createClass(...): Class specification must implement a `render` method.'
        );

        {
          warning$2(
            !Constructor.prototype.componentShouldUpdate,
            '%s has a method called ' +
              'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
              'The name is phrased as a question because the function is ' +
              'expected to return a value.',
            spec.displayName || 'A component'
          );
          warning$2(
            !Constructor.prototype.componentWillRecieveProps,
            '%s has a method called ' +
              'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
            spec.displayName || 'A component'
          );
          warning$2(
            !Constructor.prototype.UNSAFE_componentWillRecieveProps,
            '%s has a method called UNSAFE_componentWillRecieveProps(). ' +
              'Did you mean UNSAFE_componentWillReceiveProps()?',
            spec.displayName || 'A component'
          );
        }

        // Reduce time spent doing lookups by setting these on the prototype.
        for (var methodName in ReactClassInterface) {
          if (!Constructor.prototype[methodName]) {
            Constructor.prototype[methodName] = null;
          }
        }

        return Constructor;
      }

      return createClass;
    }

    var factory_1 = factory;

    if (typeof react === 'undefined') {
      throw Error(
        'create-react-class could not find the React object. If you are using script tags, ' +
          'make sure that React is being loaded before create-react-class.'
      );
    }

    // Hack to grab NoopUpdateQueue from isomorphic React
    var ReactNoopUpdateQueue = new react.Component().updater;

    var createReactClass = factory_1(
      react.Component,
      react.isValidElement,
      ReactNoopUpdateQueue
    );

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // resolves . and .. elements in a path array with directory names there
    // must be no slashes, empty elements, or device names (c:\) in the array
    // (so also no leading and trailing slashes - it does not distinguish
    // relative and absolute paths)
    function normalizeArray(parts, allowAboveRoot) {
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = parts.length - 1; i >= 0; i--) {
        var last = parts[i];
        if (last === '.') {
          parts.splice(i, 1);
        } else if (last === '..') {
          parts.splice(i, 1);
          up++;
        } else if (up) {
          parts.splice(i, 1);
          up--;
        }
      }

      // if the path is allowed to go above the root, restore leading ..s
      if (allowAboveRoot) {
        for (; up--; up) {
          parts.unshift('..');
        }
      }

      return parts;
    }

    // Split a filename into [root, dir, basename, ext], unix version
    // 'root' is just a slash, or nothing.
    var splitPathRe =
        /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    var splitPath = function(filename) {
      return splitPathRe.exec(filename).slice(1);
    };

    // path.resolve([from ...], to)
    // posix version
    function resolve() {
      var resolvedPath = '',
          resolvedAbsolute = false;

      for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path = (i >= 0) ? arguments[i] : '/';

        // Skip empty and invalid entries
        if (typeof path !== 'string') {
          throw new TypeError('Arguments to path.resolve must be strings');
        } else if (!path) {
          continue;
        }

        resolvedPath = path + '/' + resolvedPath;
        resolvedAbsolute = path.charAt(0) === '/';
      }

      // At this point the path should be resolved to a full absolute path, but
      // handle relative paths to be safe (might happen when process.cwd() fails)

      // Normalize the path
      resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
        return !!p;
      }), !resolvedAbsolute).join('/');

      return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
    }
    // path.normalize(path)
    // posix version
    function normalize(path) {
      var isPathAbsolute = isAbsolute$1(path),
          trailingSlash = substr(path, -1) === '/';

      // Normalize the path
      path = normalizeArray(filter(path.split('/'), function(p) {
        return !!p;
      }), !isPathAbsolute).join('/');

      if (!path && !isPathAbsolute) {
        path = '.';
      }
      if (path && trailingSlash) {
        path += '/';
      }

      return (isPathAbsolute ? '/' : '') + path;
    }
    // posix version
    function isAbsolute$1(path) {
      return path.charAt(0) === '/';
    }

    // posix version
    function join() {
      var paths = Array.prototype.slice.call(arguments, 0);
      return normalize(filter(paths, function(p, index) {
        if (typeof p !== 'string') {
          throw new TypeError('Arguments to path.join must be strings');
        }
        return p;
      }).join('/'));
    }


    // path.relative(from, to)
    // posix version
    function relative(from, to) {
      from = resolve(from).substr(1);
      to = resolve(to).substr(1);

      function trim(arr) {
        var start = 0;
        for (; start < arr.length; start++) {
          if (arr[start] !== '') break;
        }

        var end = arr.length - 1;
        for (; end >= 0; end--) {
          if (arr[end] !== '') break;
        }

        if (start > end) return [];
        return arr.slice(start, end - start + 1);
      }

      var fromParts = trim(from.split('/'));
      var toParts = trim(to.split('/'));

      var length = Math.min(fromParts.length, toParts.length);
      var samePartsLength = length;
      for (var i = 0; i < length; i++) {
        if (fromParts[i] !== toParts[i]) {
          samePartsLength = i;
          break;
        }
      }

      var outputParts = [];
      for (var i = samePartsLength; i < fromParts.length; i++) {
        outputParts.push('..');
      }

      outputParts = outputParts.concat(toParts.slice(samePartsLength));

      return outputParts.join('/');
    }

    var sep = '/';
    var delimiter = ':';

    function dirname(path) {
      var result = splitPath(path),
          root = result[0],
          dir = result[1];

      if (!root && !dir) {
        // No dirname whatsoever
        return '.';
      }

      if (dir) {
        // It has a dirname, strip trailing slash
        dir = dir.substr(0, dir.length - 1);
      }

      return root + dir;
    }

    function basename(path, ext) {
      var f = splitPath(path)[2];
      // TODO: make this comparison case-insensitive on windows?
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    }


    function extname(path) {
      return splitPath(path)[3];
    }
    var path = {
      extname: extname,
      basename: basename,
      dirname: dirname,
      sep: sep,
      delimiter: delimiter,
      relative: relative,
      join: join,
      isAbsolute: isAbsolute$1,
      normalize: normalize,
      resolve: resolve
    };
    function filter (xs, f) {
        if (xs.filter) return xs.filter(f);
        var res = [];
        for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
        }
        return res;
    }

    // String.prototype.substr - negative index don't work in IE8
    var substr = 'ab'.substr(-1) === 'b' ?
        function (str, start, len) { return str.substr(start, len) } :
        function (str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
        }
    ;

    var isUndefined = (val) => val === undefined;

    var isNullOrUndefined = (value) => value === null || isUndefined(value);

    var isArray = (value) => Array.isArray(value);

    const isObjectType = (value) => typeof value === 'object';
    var isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);

    var isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;

    const VALIDATION_MODE = {
        onBlur: 'onBlur',
        onChange: 'onChange',
        onSubmit: 'onSubmit',
    };
    const VALUE = 'value';
    const UNDEFINED = 'undefined';
    const EVENTS = {
        BLUR: 'blur',
        CHANGE: 'change',
        INPUT: 'input',
    };
    const INPUT_VALIDATION_RULES = {
        max: 'max',
        min: 'min',
        maxLength: 'maxLength',
        minLength: 'minLength',
        pattern: 'pattern',
        required: 'required',
        validate: 'validate',
    };
    const REGEX_IS_DEEP_PROP = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    const REGEX_IS_PLAIN_PROP = /^\w*$/;
    const REGEX_PROP_NAME = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    const REGEX_ESCAPE_CHAR = /\\(\\)?/g;

    function attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {
        const { ref } = field;
        if (isHTMLElement(ref) && ref.addEventListener && handleChange) {
            ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);
            ref.addEventListener(EVENTS.BLUR, handleChange);
        }
    }

    var isKey = (value) => !isArray(value) &&
        (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));

    var stringToPath = (string) => {
        const result = [];
        string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {
            result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);
        });
        return result;
    };

    function set(object, path, value) {
        let index = -1;
        const tempPath = isKey(path) ? [path] : stringToPath(path);
        const length = tempPath.length;
        const lastIndex = length - 1;
        while (++index < length) {
            const key = tempPath[index];
            let newValue = value;
            if (index !== lastIndex) {
                const objValue = object[key];
                newValue =
                    isObject(objValue) || isArray(objValue)
                        ? objValue
                        : !isNaN(tempPath[index + 1])
                            ? []
                            : {};
            }
            object[key] = newValue;
            object = object[key];
        }
        return object;
    }

    var transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {
        if (!isKey(key)) {
            set(previous, key, value);
            return previous;
        }
        return Object.assign(Object.assign({}, previous), { [key]: value });
    }, {});

    var get = (obj, path, defaultValue) => {
        const result = path
            .split(/[,[\].]+?/)
            .filter(Boolean)
            .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);
        return isUndefined(result) || result === obj
            ? obj[path] || defaultValue
            : result;
    };

    var focusErrorField = (fields, fieldErrors) => {
        for (const key in fields) {
            if (get(fieldErrors, key)) {
                const field = fields[key];
                if (field) {
                    if (isHTMLElement(field.ref) && field.ref.focus) {
                        field.ref.focus();
                        break;
                    }
                    else if (field.options) {
                        field.options[0].ref.focus();
                        break;
                    }
                }
            }
        }
    };

    var removeAllEventListeners = (ref, validateWithStateUpdate) => {
        if (isHTMLElement(ref) && ref.removeEventListener) {
            ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);
            ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);
            ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);
        }
    };

    var isRadioInput = (element) => !!element && element.type === 'radio';

    var isCheckBoxInput = (element) => !!element && element.type === 'checkbox';

    function isDetached(element) {
        if (!element) {
            return true;
        }
        if (!(element instanceof HTMLElement) ||
            element.nodeType === Node.DOCUMENT_NODE) {
            return false;
        }
        return isDetached(element.parentNode);
    }

    var isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;

    function castPath(value) {
        return isArray(value) ? value : stringToPath(value);
    }
    function baseGet(object, path) {
        const updatePath = isKey(path) ? [path] : castPath(path);
        const length = path.length;
        let index = 0;
        while (index < length) {
            object = isUndefined(object) ? index++ : object[updatePath[index++]];
        }
        return index == length ? object : undefined;
    }
    function baseSlice(array, start, end) {
        let index = -1;
        let length = array.length;
        if (start < 0) {
            start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
            end += length;
        }
        length = start > end ? 0 : end - start;
        const result = Array(length);
        while (++index < length) {
            result[index] = array[index + start];
        }
        return result;
    }
    function parent(object, path) {
        return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
    }
    function baseUnset(object, path) {
        const updatePath = isKey(path) ? [path] : castPath(path);
        const childObject = parent(object, updatePath);
        const key = updatePath[updatePath.length - 1];
        const result = !(childObject != null) || delete childObject[key];
        let previousObjRef = undefined;
        for (let k = 0; k < updatePath.slice(0, -1).length; k++) {
            let index = -1;
            let objectRef = undefined;
            const currentPaths = updatePath.slice(0, -(k + 1));
            const currentPathsLength = currentPaths.length - 1;
            if (k > 0) {
                previousObjRef = object;
            }
            while (++index < currentPaths.length) {
                const item = currentPaths[index];
                objectRef = objectRef ? objectRef[item] : object[item];
                if (currentPathsLength === index) {
                    if (isObject(objectRef) && isEmptyObject(objectRef)) {
                        previousObjRef ? delete previousObjRef[item] : delete object[item];
                    }
                    else if (isArray(objectRef) &&
                        !objectRef.filter(data => isObject(data) && !isEmptyObject(data))
                            .length) {
                        if (previousObjRef) {
                            delete previousObjRef[item];
                        }
                    }
                }
                previousObjRef = objectRef;
            }
        }
        return result;
    }
    function unset(object, paths) {
        paths.forEach(path => {
            baseUnset(object, path);
        });
        return object;
    }

    function findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {
        if (!field) {
            return;
        }
        const { ref, ref: { name, type }, mutationWatcher, } = field;
        if (!type) {
            delete fields[name];
            return;
        }
        const fieldValue = fields[name];
        if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {
            const { options } = fieldValue;
            if (isArray(options) && options.length) {
                options
                    .filter(Boolean)
                    .forEach(({ ref, mutationWatcher }, index) => {
                    if ((ref && isDetached(ref)) || forceDelete) {
                        removeAllEventListeners(ref, handleChange);
                        if (mutationWatcher) {
                            mutationWatcher.disconnect();
                        }
                        unset(options, [`[${index}]`]);
                    }
                });
                if (options && !options.filter(Boolean).length) {
                    delete fields[name];
                }
            }
            else {
                delete fields[name];
            }
        }
        else if (isDetached(ref) || forceDelete) {
            removeAllEventListeners(ref, handleChange);
            if (mutationWatcher) {
                mutationWatcher.disconnect();
            }
            delete fields[name];
        }
    }

    const defaultReturn = {
        isValid: false,
        value: '',
    };
    var getRadioValue = (options) => isArray(options)
        ? options.filter(Boolean).reduce((previous, { ref: { checked, value } }) => checked
            ? {
                isValid: true,
                value,
            }
            : previous, defaultReturn)
        : defaultReturn;

    var getMultipleSelectValue = (options) => [...options]
        .filter(({ selected }) => selected)
        .map(({ value }) => value);

    var isFileInput = (element) => !!element && element.type === 'file';

    var isMultipleSelect = (element) => !!element && element.type === 'select-multiple';

    var isEmptyString = (value) => value === '';

    const defaultResult = {
        value: false,
        isValid: false,
    };
    const validResult = { value: true, isValid: true };
    var getCheckboxValue = (options) => {
        if (isArray(options)) {
            if (options.length > 1) {
                const values = options
                    .filter(({ ref: { checked } }) => checked)
                    .map(({ ref: { value } }) => value);
                return { value: values, isValid: !!values.length };
            }
            const { checked, value, attributes } = options[0].ref;
            return checked
                ? attributes && !isUndefined(attributes.value)
                    ? isUndefined(value) || isEmptyString(value)
                        ? validResult
                        : { value: value, isValid: true }
                    : validResult
                : defaultResult;
        }
        return defaultResult;
    };

    function getFieldValue(fields, ref) {
        const { name, value } = ref;
        const field = fields[name];
        if (isFileInput(ref)) {
            return ref.files;
        }
        if (isRadioInput(ref)) {
            return field ? getRadioValue(field.options).value : '';
        }
        if (isMultipleSelect(ref)) {
            return getMultipleSelectValue(ref.options);
        }
        if (isCheckBoxInput(ref)) {
            return field ? getCheckboxValue(field.options).value : false;
        }
        return value;
    }

    var isString = (value) => typeof value === 'string';

    var getFieldsValues = (fields, search) => {
        const output = {};
        const isSearchString = isString(search);
        const isSearchArray = isArray(search);
        const isNest = search && search.nest;
        for (const name in fields) {
            if (isUndefined(search) ||
                isNest ||
                (isSearchString && name.startsWith(search)) ||
                (isSearchArray &&
                    search.find((data) => name.startsWith(data)))) {
                output[name] = getFieldValue(fields, fields[name].ref);
            }
        }
        return output;
    };

    var compareObject = (objectA = {}, objectB = {}) => Object.entries(objectA).reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);

    var isSameError = (error, { type, types, message, }) => {
        return (isObject(error) &&
            error.type === type &&
            error.message === message &&
            compareObject(error.types, types));
    };

    function shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {
        const isFieldValid = isEmptyObject(error);
        const isFormValid = isEmptyObject(errors);
        const currentFieldError = get(error, name);
        const existFieldError = get(errors, name);
        if ((isFieldValid && validFields.has(name)) ||
            (existFieldError && existFieldError.isManual)) {
            return false;
        }
        if (isFormValid !== isFieldValid ||
            (!isFormValid && !existFieldError) ||
            (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {
            return true;
        }
        return currentFieldError && !isSameError(existFieldError, currentFieldError);
    }

    var isRegex = (value) => value instanceof RegExp;

    var getValueAndMessage = (validationData) => {
        const isValueMessage = (value) => isObject(value) && !isRegex(value);
        return isValueMessage(validationData)
            ? validationData
            : {
                value: validationData,
                message: '',
            };
    };

    var isFunction = (value) => typeof value === 'function';

    var isBoolean = (value) => typeof value === 'boolean';

    var isMessage = (value) => isString(value) || (isObject(value) && react_9(value));

    function getValidateError(result, ref, type = 'validate') {
        if (isMessage(result) || (isBoolean(result) && !result)) {
            const message = isMessage(result) ? result : '';
            return {
                type,
                message,
                ref,
            };
        }
    }

    var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {
        if (!validateAllFieldCriteria) {
            return {};
        }
        const error = errors[name];
        return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });
    };

    var validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {
        const fields = fieldsRef.current;
        const error = {};
        const isRadio = isRadioInput(ref);
        const isCheckBox = isCheckBoxInput(ref);
        const isRadioOrCheckbox = isRadio || isCheckBox;
        const isEmpty = isEmptyString(value);
        const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);
        const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
            const message = exceedMax ? maxLengthMessage : minLengthMessage;
            error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,
                ref }, (exceedMax
                ? appendErrorsCurry(maxType, message)
                : appendErrorsCurry(minType, message)));
            if (!validateAllFieldCriteria) {
                return error;
            }
        };
        if (required &&
            ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||
                (isBoolean(value) && !value) ||
                (isCheckBox && !getCheckboxValue(options).isValid) ||
                (isRadio && !getRadioValue(options).isValid))) {
            const { value: requiredValue, message: requiredMessage } = isMessage(required)
                ? { value: !!required, message: required }
                : getValueAndMessage(required);
            if (requiredValue) {
                error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));
                if (!validateAllFieldCriteria) {
                    return error;
                }
            }
        }
        if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {
            let exceedMax;
            let exceedMin;
            const { value: maxValue, message: maxMessage } = getValueAndMessage(max);
            const { value: minValue, message: minMessage } = getValueAndMessage(min);
            if (type === 'number' || (!type && !isNaN(value))) {
                const valueNumber = ref.valueAsNumber || parseFloat(value);
                if (!isNullOrUndefined(maxValue)) {
                    exceedMax = valueNumber > maxValue;
                }
                if (!isNullOrUndefined(minValue)) {
                    exceedMin = valueNumber < minValue;
                }
            }
            else {
                const valueDate = ref.valueAsDate || new Date(value);
                if (isString(maxValue)) {
                    exceedMax = valueDate > new Date(maxValue);
                }
                if (isString(minValue)) {
                    exceedMin = valueDate < new Date(minValue);
                }
            }
            if (exceedMax || exceedMin) {
                getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
                if (!validateAllFieldCriteria) {
                    return error;
                }
            }
        }
        if (isString(value) && !isEmpty && (maxLength || minLength)) {
            const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);
            const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);
            const inputLength = value.toString().length;
            const exceedMax = !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;
            const exceedMin = !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;
            if (exceedMax || exceedMin) {
                getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);
                if (!validateAllFieldCriteria) {
                    return error;
                }
            }
        }
        if (pattern && !isEmpty) {
            const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);
            if (isRegex(patternValue) && !patternValue.test(value)) {
                error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));
                if (!validateAllFieldCriteria) {
                    return error;
                }
            }
        }
        if (validate) {
            const fieldValue = getFieldValue(fields, ref);
            const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;
            if (isFunction(validate)) {
                const result = await validate(fieldValue);
                const validateError = getValidateError(result, validateRef);
                if (validateError) {
                    error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));
                    if (!validateAllFieldCriteria) {
                        return error;
                    }
                }
            }
            else if (isObject(validate)) {
                let validationResult = {};
                for (const [key, validateFunction] of Object.entries(validate)) {
                    if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
                        break;
                    }
                    const validateResult = await validateFunction(fieldValue);
                    const validateError = getValidateError(validateResult, validateRef, key);
                    if (validateError) {
                        validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));
                        if (validateAllFieldCriteria) {
                            error[name] = validationResult;
                        }
                    }
                }
                if (!isEmptyObject(validationResult)) {
                    error[name] = Object.assign({ ref: validateRef }, validationResult);
                    if (!validateAllFieldCriteria) {
                        return error;
                    }
                }
            }
        }
        return error;
    };

    const parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)
        ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria
            ? {
                [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),
            }
            : {
                [path]: previous[path] || Object.assign({ message,
                    type }, (validateAllFieldCriteria
                    ? {
                        types: { [type]: message || true },
                    }
                    : {})),
            }))), {})
        : {
            [error.path]: { message: error.message, type: error.type },
        };
    async function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {
        if (validationResolver) {
            return validationResolver(data, context);
        }
        try {
            return {
                values: await validationSchema.validate(data, {
                    abortEarly: false,
                    context,
                }),
                errors: {},
            };
        }
        catch (e) {
            return {
                values: {},
                errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),
            };
        }
    }

    var getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])
        ? get(defaultValues, name, defaultValue)
        : defaultValues[name];

    function flatArray(list) {
        return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);
    }

    var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);

    const getPath = (path, values) => {
        const getInnerPath = (value, key, isObject) => {
            const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;
            return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);
        };
        return isArray(values)
            ? values.map((value, key) => getInnerPath(value, key))
            : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));
    };
    var getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));

    var assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {
        let value;
        watchFields.add(fieldName);
        if (isEmptyObject(fieldValues)) {
            value = undefined;
        }
        else if (!isUndefined(fieldValues[fieldName])) {
            value = fieldValues[fieldName];
            watchFields.add(fieldName);
        }
        else {
            value = get(transformToNestObject(fieldValues), fieldName);
            if (!isUndefined(value)) {
                getPath$1(fieldName, value).forEach(name => watchFields.add(name));
            }
        }
        return isUndefined(value)
            ? isObject(combinedDefaultValues)
                ? getDefaultValue(combinedDefaultValues, fieldName)
                : combinedDefaultValues
            : value;
    };

    var skipValidation = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||
        (isOnSubmit && isReValidateOnSubmit) ||
        (isOnSubmit && !isSubmitted) ||
        (isOnBlur && !isBlurEvent && !hasError) ||
        (isReValidateOnBlur && !isBlurEvent && hasError) ||
        (isReValidateOnSubmit && isSubmitted);

    var getFieldValueByName = (fields, name) => {
        const results = transformToNestObject(getFieldsValues(fields));
        return name ? get(results, name, results) : results;
    };

    function getIsFieldsDifferent(referenceArray, differenceArray) {
        let isMatch = false;
        if (!isArray(referenceArray) ||
            !isArray(differenceArray) ||
            referenceArray.length !== differenceArray.length) {
            return true;
        }
        for (let i = 0; i < referenceArray.length; i++) {
            if (isMatch) {
                break;
            }
            const dataA = referenceArray[i];
            const dataB = differenceArray[i];
            if (isUndefined(dataB) ||
                Object.keys(dataA).length !== Object.keys(dataB).length) {
                isMatch = true;
                break;
            }
            for (const key in dataA) {
                if (dataA[key] !== dataB[key]) {
                    isMatch = true;
                    break;
                }
            }
        }
        return isMatch;
    }

    const isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);
    var isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);

    var isFileListObject = (data) => typeof FileList !== UNDEFINED && data instanceof FileList;

    function onDomRemove(element, onDetachCallback) {
        const observer = new MutationObserver(() => {
            if (isDetached(element)) {
                observer.disconnect();
                onDetachCallback();
            }
        });
        observer.observe(window.document, {
            childList: true,
            subtree: true,
        });
        return observer;
    }

    var modeChecker = (mode) => ({
        isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
        isOnBlur: mode === VALIDATION_MODE.onBlur,
        isOnChange: mode === VALIDATION_MODE.onChange,
    });

    const { useRef, useState, useCallback, useEffect } = React;
    function useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {
        const fieldsRef = useRef({});
        const validateAllFieldCriteria = validateCriteriaMode === 'all';
        const errorsRef = useRef({});
        const touchedFieldsRef = useRef({});
        const watchFieldsRef = useRef(new Set());
        const dirtyFieldsRef = useRef(new Set());
        const fieldsWithValidationRef = useRef(new Set());
        const validFieldsRef = useRef(new Set());
        const isValidRef = useRef(true);
        const defaultRenderValuesRef = useRef({});
        const defaultValuesRef = useRef(defaultValues);
        const isUnMount = useRef(false);
        const isWatchAllRef = useRef(false);
        const isSubmittedRef = useRef(false);
        const isDirtyRef = useRef(false);
        const submitCountRef = useRef(0);
        const isSubmittingRef = useRef(false);
        const handleChangeRef = useRef();
        const resetFieldArrayFunctionRef = useRef({});
        const validationContextRef = useRef(validationContext);
        const fieldArrayNamesRef = useRef(new Set());
        const [, render] = useState();
        const { isOnBlur, isOnSubmit, isOnChange } = useRef(modeChecker(mode)).current;
        const isWindowUndefined = typeof window === UNDEFINED;
        const shouldValidateCallback = !!(validationSchema || validationResolver);
        const isWeb = typeof document !== UNDEFINED &&
            !isWindowUndefined &&
            !isUndefined(window.HTMLElement);
        const isProxyEnabled = isWeb && 'Proxy' in window;
        const readFormStateRef = useRef({
            dirty: !isProxyEnabled,
            dirtyFields: !isProxyEnabled,
            isSubmitted: isOnSubmit,
            submitCount: !isProxyEnabled,
            touched: !isProxyEnabled,
            isSubmitting: !isProxyEnabled,
            isValid: !isProxyEnabled,
        });
        const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;
        const reRender = useCallback(() => {
            if (!isUnMount.current) {
                render({});
            }
        }, []);
        const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {
            let shouldReRender = shouldRender ||
                shouldUpdateWithError({
                    errors: errorsRef.current,
                    error,
                    name,
                    validFields: validFieldsRef.current,
                    fieldsWithValidation: fieldsWithValidationRef.current,
                });
            if (isEmptyObject(error)) {
                if (fieldsWithValidationRef.current.has(name) ||
                    shouldValidateCallback) {
                    validFieldsRef.current.add(name);
                    shouldReRender = shouldReRender || get(errorsRef.current, name);
                }
                errorsRef.current = unset(errorsRef.current, [name]);
            }
            else {
                validFieldsRef.current.delete(name);
                shouldReRender = shouldReRender || !get(errorsRef.current, name);
                set(errorsRef.current, name, error[name]);
            }
            if (shouldReRender && !skipReRender) {
                reRender();
                return true;
            }
        }, [reRender, shouldValidateCallback]);
        const setFieldValue = useCallback((field, rawValue) => {
            const ref = field.ref;
            const options = field.options;
            const { type } = ref;
            const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)
                ? ''
                : rawValue;
            if (isRadioInput(ref) && options) {
                options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));
            }
            else if (isFileInput(ref)) {
                if (isEmptyString(value) ||
                    isFileListObject(value)) {
                    ref.files = value;
                }
                else {
                    ref.value = value;
                }
            }
            else if (isMultipleSelect(ref)) {
                [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));
            }
            else if (isCheckBoxInput(ref) && options) {
                options.length > 1
                    ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))
                    : (options[0].ref.checked = !!value);
            }
            else {
                ref.value = value;
            }
            return !!type;
        }, [isWeb]);
        const setDirty = (name) => {
            if (!fieldsRef.current[name] ||
                (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {
                return false;
            }
            const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);
            const previousDirtyFieldsLength = dirtyFieldsRef.current.size;
            let isDirty = defaultRenderValuesRef.current[name] !==
                getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);
            if (isFieldArray) {
                const fieldArrayName = name.substring(0, name.indexOf('['));
                isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));
            }
            const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==
                isDirty;
            if (isDirty) {
                dirtyFieldsRef.current.add(name);
            }
            else {
                dirtyFieldsRef.current.delete(name);
            }
            isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;
            return readFormStateRef.current.dirty
                ? isDirtyChanged
                : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;
        };
        const setDirtyAndTouchedFields = useCallback((fieldName) => {
            if (setDirty(fieldName) ||
                (!get(touchedFieldsRef.current, fieldName) &&
                    readFormStateRef.current.touched)) {
                return !!set(touchedFieldsRef.current, fieldName, true);
            }
        }, []);
        const setInternalValueBatch = useCallback((name, value, parentFieldName) => {
            const isValueArray = isArray(value);
            for (const key in value) {
                const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;
                if (isObject(value[key])) {
                    setInternalValueBatch(name, value[key], fieldName);
                }
                const field = fieldsRef.current[fieldName];
                if (field) {
                    setFieldValue(field, value[key]);
                    setDirtyAndTouchedFields(fieldName);
                }
            }
        }, [setFieldValue, setDirtyAndTouchedFields]);
        const setInternalValue = useCallback((name, value) => {
            const field = fieldsRef.current[name];
            if (field) {
                setFieldValue(field, value);
                const output = setDirtyAndTouchedFields(name);
                if (isBoolean(output)) {
                    return output;
                }
            }
            else if (!isPrimitive(value)) {
                setInternalValueBatch(name, value);
            }
        }, [setDirtyAndTouchedFields, setFieldValue, setInternalValueBatch]);
        const executeValidation = useCallback(async (name, skipReRender) => {
            const field = fieldsRef.current[name];
            if (!field) {
                return false;
            }
            const error = await validateField(fieldsRef, validateAllFieldCriteria, field);
            shouldRenderBaseOnError(name, error, false, skipReRender);
            return isEmptyObject(error);
        }, [shouldRenderBaseOnError, validateAllFieldCriteria]);
        const executeSchemaValidation = useCallback(async (payload) => {
            const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContextRef.current);
            const previousFormIsValid = isValidRef.current;
            isValidRef.current = isEmptyObject(errors);
            if (isArray(payload)) {
                payload.forEach(name => {
                    const error = get(errors, name);
                    if (error) {
                        set(errorsRef.current, name, error);
                    }
                    else {
                        unset(errorsRef.current, [name]);
                    }
                });
                reRender();
            }
            else {
                shouldRenderBaseOnError(payload, (get(errors, payload)
                    ? { [payload]: get(errors, payload) }
                    : {}), previousFormIsValid !== isValidRef.current);
            }
            return isEmptyObject(errorsRef.current);
        }, [
            reRender,
            shouldRenderBaseOnError,
            validateAllFieldCriteria,
            validationResolver,
            validationSchema,
        ]);
        const triggerValidation = useCallback(async (payload) => {
            const fields = payload || Object.keys(fieldsRef.current);
            if (shouldValidateCallback) {
                return executeSchemaValidation(fields);
            }
            if (isArray(fields)) {
                const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));
                reRender();
                return result.every(Boolean);
            }
            return await executeValidation(fields);
        }, [
            executeSchemaValidation,
            executeValidation,
            reRender,
            shouldValidateCallback,
        ]);
        const isFieldWatched = (name) => isWatchAllRef.current ||
            watchFieldsRef.current.has(name) ||
            watchFieldsRef.current.has((name.match(/\w+/) || [])[0]);
        function setValue(names, valueOrShouldValidate, shouldValidate) {
            let shouldRender = false;
            const isMultiple = isArray(names);
            (isMultiple
                ? names
                : [names]).forEach((name) => {
                const isStringFieldName = isString(name);
                shouldRender =
                    setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName
                        ? valueOrShouldValidate
                        : Object.values(name)[0]) || isMultiple
                        ? true
                        : isFieldWatched(name);
            });
            if (shouldRender || isMultiple) {
                reRender();
            }
            if (shouldValidate || (isMultiple && valueOrShouldValidate)) {
                triggerValidation(isMultiple ? undefined : names);
            }
        }
        handleChangeRef.current = handleChangeRef.current
            ? handleChangeRef.current
            : async ({ type, target }) => {
                const name = target ? target.name : '';
                const fields = fieldsRef.current;
                const errors = errorsRef.current;
                const field = fields[name];
                const currentError = get(errors, name);
                let error;
                if (!field) {
                    return;
                }
                const isBlurEvent = type === EVENTS.BLUR;
                const shouldSkipValidation = skipValidation({
                    hasError: !!currentError,
                    isOnChange,
                    isBlurEvent,
                    isOnSubmit,
                    isReValidateOnSubmit,
                    isOnBlur,
                    isReValidateOnBlur,
                    isSubmitted: isSubmittedRef.current,
                });
                const shouldUpdateDirty = setDirty(name);
                let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;
                if (isBlurEvent &&
                    !get(touchedFieldsRef.current, name) &&
                    readFormStateRef.current.touched) {
                    set(touchedFieldsRef.current, name, true);
                    shouldUpdateState = true;
                }
                if (shouldSkipValidation) {
                    return shouldUpdateState && reRender();
                }
                if (shouldValidateCallback) {
                    const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContextRef.current);
                    const previousFormIsValid = isValidRef.current;
                    isValidRef.current = isEmptyObject(errors);
                    error = (get(errors, name)
                        ? { [name]: get(errors, name) }
                        : {});
                    if (previousFormIsValid !== isValidRef.current) {
                        shouldUpdateState = true;
                    }
                }
                else {
                    error = await validateField(fieldsRef, validateAllFieldCriteria, field);
                }
                if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {
                    reRender();
                }
            };
        const validateSchemaIsValid = useCallback((values = {}) => {
            const fieldValues = isEmptyObject(defaultValuesRef.current)
                ? getFieldsValues(fieldsRef.current)
                : defaultValuesRef.current;
            validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {
                const previousFormIsValid = isValidRef.current;
                isValidRef.current = isEmptyObject(errors);
                if (previousFormIsValid !== isValidRef.current) {
                    reRender();
                }
            });
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [reRender, validateAllFieldCriteria, validationResolver]);
        const removeFieldEventListener = (field, forceDelete) => {
            if (!isUndefined(handleChangeRef.current) && field) {
                findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);
            }
        };
        const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {
            if (!field ||
                (field &&
                    isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&
                    !forceDelete)) {
                return;
            }
            removeFieldEventListener(field, forceDelete);
            const { name } = field.ref;
            errorsRef.current = unset(errorsRef.current, [name]);
            touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);
            defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [
                name,
            ]);
            [
                dirtyFieldsRef,
                fieldsWithValidationRef,
                validFieldsRef,
                watchFieldsRef,
            ].forEach(data => data.current.delete(name));
            if (readFormStateRef.current.isValid ||
                readFormStateRef.current.touched) {
                reRender();
                if (shouldValidateCallback) {
                    validateSchemaIsValid();
                }
            }
        }, [reRender, shouldValidateCallback, validateSchemaIsValid]);
        function clearError(name) {
            if (isUndefined(name)) {
                errorsRef.current = {};
            }
            else {
                unset(errorsRef.current, isArray(name) ? name : [name]);
            }
            reRender();
        }
        const setInternalError = ({ name, type, types, message, preventRender, }) => {
            const field = fieldsRef.current[name];
            if (!isSameError(errorsRef.current[name], {
                type,
                message,
                types,
            })) {
                set(errorsRef.current, name, {
                    type,
                    types,
                    message,
                    ref: field ? field.ref : {},
                    isManual: true,
                });
                if (!preventRender) {
                    reRender();
                }
            }
        };
        function setError(name, type = '', message) {
            if (isString(name)) {
                setInternalError(Object.assign({ name }, (isObject(type)
                    ? {
                        types: type,
                        type: '',
                    }
                    : {
                        type,
                        message,
                    })));
            }
            else if (isArray(name)) {
                name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));
                reRender();
            }
        }
        function watch(fieldNames, defaultValue) {
            const combinedDefaultValues = isUndefined(defaultValue)
                ? isUndefined(defaultValuesRef.current)
                    ? {}
                    : defaultValuesRef.current
                : defaultValue;
            const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);
            const watchFields = watchFieldsRef.current;
            if (isString(fieldNames)) {
                return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);
            }
            if (isArray(fieldNames)) {
                return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});
            }
            isWatchAllRef.current = true;
            const result = (!isEmptyObject(fieldValues) && fieldValues) ||
                defaultValue ||
                defaultValuesRef.current;
            return fieldNames && fieldNames.nest
                ? transformToNestObject(result)
                : result;
        }
        function unregister(names) {
            if (!isEmptyObject(fieldsRef.current)) {
                (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));
            }
        }
        function registerFieldsRef(ref, validateOptions = {}) {
            if (!ref.name) {
                // eslint-disable-next-line no-console
                return console.warn('Missing name @', ref);
            }
            const { name, type, value } = ref;
            const fieldAttributes = Object.assign({ ref }, validateOptions);
            const fields = fieldsRef.current;
            const isRadioOrCheckbox = isRadioInput(ref) || isCheckBoxInput(ref);
            let currentField = fields[name];
            let isEmptyDefaultValue = true;
            let isFieldArray = false;
            let defaultValue;
            if (isRadioOrCheckbox
                ? currentField &&
                    isArray(currentField.options) &&
                    currentField.options
                        .filter(Boolean)
                        .find(({ ref }) => value === ref.value)
                : currentField) {
                fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);
                return;
            }
            if (type) {
                const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));
                currentField = isRadioOrCheckbox
                    ? Object.assign({ options: [
                            ...((currentField && currentField.options) || []),
                            {
                                ref,
                                mutationWatcher,
                            },
                        ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });
            }
            else {
                currentField = fieldAttributes;
            }
            fields[name] = currentField;
            if (!isEmptyObject(defaultValuesRef.current)) {
                defaultValue = getDefaultValue(defaultValuesRef.current, name);
                isEmptyDefaultValue = isUndefined(defaultValue);
                isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);
                if (!isEmptyDefaultValue && !isFieldArray) {
                    setFieldValue(currentField, defaultValue);
                }
            }
            if (shouldValidateCallback &&
                !isFieldArray &&
                readFormStateRef.current.isValid) {
                validateSchemaIsValid();
            }
            else if (!isEmptyObject(validateOptions)) {
                fieldsWithValidationRef.current.add(name);
                if (!isOnSubmit && readFormStateRef.current.isValid) {
                    validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {
                        const previousFormIsValid = isValidRef.current;
                        if (isEmptyObject(error)) {
                            validFieldsRef.current.add(name);
                        }
                        else {
                            isValidRef.current = false;
                        }
                        if (previousFormIsValid !== isValidRef.current) {
                            reRender();
                        }
                    });
                }
            }
            if (!defaultRenderValuesRef.current[name] &&
                !(isFieldArray && isEmptyDefaultValue)) {
                defaultRenderValuesRef.current[name] = isEmptyDefaultValue
                    ? getFieldValue(fields, currentField.ref)
                    : defaultValue;
            }
            if (!type) {
                return;
            }
            const fieldToAttachListener = isRadioOrCheckbox && currentField.options
                ? currentField.options[currentField.options.length - 1]
                : currentField;
            attachEventListeners({
                field: fieldToAttachListener,
                isRadioOrCheckbox,
                handleChange: handleChangeRef.current,
            });
        }
        function register(refOrValidationOptions, validationOptions) {
            if (isWindowUndefined) {
                return;
            }
            if (isString(refOrValidationOptions)) {
                registerFieldsRef({ name: refOrValidationOptions }, validationOptions);
                return;
            }
            if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {
                registerFieldsRef(refOrValidationOptions, validationOptions);
                return;
            }
            return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);
        }
        const handleSubmit = useCallback((callback) => async (e) => {
            if (e) {
                e.preventDefault();
                e.persist();
            }
            let fieldErrors = {};
            let fieldValues = {};
            const fields = fieldsRef.current;
            if (readFormStateRef.current.isSubmitting) {
                isSubmittingRef.current = true;
                reRender();
            }
            try {
                if (shouldValidateCallback) {
                    fieldValues = getFieldsValues(fields);
                    const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContextRef.current);
                    errorsRef.current = errors;
                    fieldErrors = errors;
                    fieldValues = values;
                }
                else {
                    for (const field of Object.values(fields)) {
                        if (field) {
                            const { ref, ref: { name }, } = field;
                            const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);
                            if (fieldError[name]) {
                                set(fieldErrors, name, fieldError[name]);
                                validFieldsRef.current.delete(name);
                            }
                            else {
                                if (fieldsWithValidationRef.current.has(name)) {
                                    validFieldsRef.current.add(name);
                                }
                                fieldValues[name] = getFieldValue(fields, ref);
                            }
                        }
                    }
                }
                if (isEmptyObject(fieldErrors)) {
                    errorsRef.current = {};
                    await callback(transformToNestObject(fieldValues), e);
                }
                else {
                    if (submitFocusError && isWeb) {
                        focusErrorField(fields, fieldErrors);
                    }
                    errorsRef.current = fieldErrors;
                }
            }
            finally {
                isSubmittedRef.current = true;
                isSubmittingRef.current = false;
                submitCountRef.current = submitCountRef.current + 1;
                reRender();
            }
        }, [
            isWeb,
            reRender,
            shouldValidateCallback,
            submitFocusError,
            validateAllFieldCriteria,
            validationResolver,
            validationSchema,
        ]);
        const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, }) => {
            fieldsRef.current = {};
            if (!errors) {
                errorsRef.current = {};
            }
            if (!touched) {
                touchedFieldsRef.current = {};
            }
            if (!isValid) {
                validFieldsRef.current = new Set();
                fieldsWithValidationRef.current = new Set();
                isValidRef.current = true;
            }
            if (!dirty) {
                dirtyFieldsRef.current = new Set();
                isDirtyRef.current = false;
            }
            if (!isSubmitted) {
                isSubmittedRef.current = false;
            }
            if (!submitCount) {
                submitCountRef.current = 0;
            }
            defaultRenderValuesRef.current = {};
            watchFieldsRef.current = new Set();
            isWatchAllRef.current = false;
        };
        const reset = (values, omitResetState = {}) => {
            if (isWeb) {
                for (const value of Object.values(fieldsRef.current)) {
                    if (value && isHTMLElement(value.ref) && value.ref.closest) {
                        try {
                            value.ref.closest('form').reset();
                            break;
                        }
                        catch (_a) { }
                    }
                }
            }
            if (values) {
                defaultValuesRef.current = values;
            }
            Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());
            resetRefs(omitResetState);
            reRender();
        };
        const getValues = (payload) => {
            const fieldValues = getFieldsValues(fieldsRef.current);
            const outputValues = isEmptyObject(fieldValues)
                ? defaultValuesRef.current
                : fieldValues;
            return payload && payload.nest
                ? transformToNestObject(outputValues)
                : outputValues;
        };
        useEffect(() => () => {
            isUnMount.current = true;
            fieldsRef.current &&
                "development" === 'production' &&
                Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));
        }, [removeFieldEventListenerAndRef]);
        if (!shouldValidateCallback) {
            isValidRef.current =
                validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&
                    isEmptyObject(errorsRef.current);
        }
        const formState = {
            dirty: isDirtyRef.current,
            dirtyFields: dirtyFieldsRef.current,
            isSubmitted: isSubmittedRef.current,
            submitCount: submitCountRef.current,
            touched: touchedFieldsRef.current,
            isSubmitting: isSubmittingRef.current,
            isValid: isOnSubmit
                ? isSubmittedRef.current && isEmptyObject(errorsRef.current)
                : isValidRef.current,
        };
        const control = Object.assign(Object.assign({ register,
            unregister,
            removeFieldEventListener,
            getValues,
            setValue,
            reRender,
            triggerValidation }, (shouldValidateCallback ? { validateSchemaIsValid } : {})), { formState, mode: {
                isOnBlur,
                isOnSubmit,
                isOnChange,
            }, reValidateMode: {
                isReValidateOnBlur,
                isReValidateOnSubmit,
            }, errorsRef,
            touchedFieldsRef,
            fieldsRef,
            resetFieldArrayFunctionRef,
            validFieldsRef,
            dirtyFieldsRef,
            fieldsWithValidationRef,
            watchFieldsRef,
            fieldArrayNamesRef,
            isDirtyRef,
            readFormStateRef,
            defaultValuesRef });
        return {
            watch,
            control,
            handleSubmit,
            setValue: useCallback(setValue, [
                reRender,
                setInternalValue,
                triggerValidation,
            ]),
            triggerValidation,
            getValues: useCallback(getValues, []),
            reset: useCallback(reset, []),
            register: useCallback(register, [
                defaultValuesRef.current,
                defaultRenderValuesRef.current,
            ]),
            unregister: useCallback(unregister, []),
            clearError: useCallback(clearError, []),
            setError: useCallback(setError, []),
            errors: errorsRef.current,
            formState: isProxyEnabled
                ? new Proxy(formState, {
                    get: (obj, prop) => {
                        if (prop in obj) {
                            readFormStateRef.current[prop] = true;
                            return obj[prop];
                        }
                        return {};
                    },
                })
                : formState,
        };
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    const FormGlobalContext = react_4(null);
    function useFormContext() {
        return react_13(FormGlobalContext);
    }

    var getInputValue = (event, isCheckboxInput) => isPrimitive(event) ||
        !isObject(event.target) ||
        (isObject(event.target) && !event.type)
        ? event
        : isCheckboxInput || isUndefined(event.target.value)
            ? event.target.checked
            : event.target.value;

    const Controller = (_a) => {
        var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control } = _a, rest = __rest(_a, ["name", "rules", "as", "onBlur", "onChange", "onChangeName", "onBlurName", "valueName", "defaultValue", "control"]);
        const methods = useFormContext();
        const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;
        const [value, setInputStateValue] = react_11(isUndefined(defaultValue)
            ? get(defaultValuesRef.current, name)
            : defaultValue);
        const valueRef = react_17(value);
        const isCheckboxInput = isBoolean(value);
        const shouldValidate = () => !skipValidation({
            hasError: !!get(errorsRef.current, name),
            isOnBlur,
            isOnSubmit,
            isOnChange,
            isReValidateOnBlur,
            isReValidateOnSubmit,
            isSubmitted,
        });
        const commonTask = (event) => {
            const data = getInputValue(event, isCheckboxInput);
            setInputStateValue(data);
            valueRef.current = data;
            return data;
        };
        const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());
        const handleChange = (event) => {
            const data = commonTask(event);
            setValue(name, data, shouldValidate());
        };
        const registerField = () => {
            if (isNameInFieldArray(fieldArrayNamesRef.current, name) &&
                fieldsRef.current[name]) {
                removeFieldEventListener(fieldsRef.current[name], true);
            }
            register(Object.defineProperty({ name }, VALUE, {
                set(data) {
                    setInputStateValue(data);
                    valueRef.current = data;
                },
                get() {
                    return valueRef.current;
                },
            }), Object.assign({}, rules));
        };
        react_12(() => {
            if (!fieldsRef.current[name]) {
                registerField();
                setInputStateValue(isUndefined(defaultValue)
                    ? get(defaultValuesRef.current, name)
                    : defaultValue);
            }
        });
        react_12(() => {
            registerField();
            return () => {
                if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {
                    unregister(name);
                }
            };
        }, [name]);
        react_12(() => {
            registerField();
        }, [rules]);
        const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;
        const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange
            ? { [onChangeName]: eventWrapper(onChange) }
            : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur
            ? {
                [onBlurName]: (...args) => {
                    if (onBlur) {
                        onBlur(args);
                    }
                    if (shouldReValidateOnBlur) {
                        triggerValidation(name);
                    }
                },
            }
            : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });
        return react_9(InnerComponent)
            ? react_10(InnerComponent, props)
            : react_8(InnerComponent, props);
    };

    const ErrorMessage = (_a) => {
        var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, ["as", "errors", "name", "message", "children"]);
        const methods = useFormContext();
        const error = get(errors || methods.errors, name);
        if (!error) {
            return null;
        }
        const { message: messageFromRegister, types } = error;
        const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children
                ? children({ message: messageFromRegister || message, messages: types })
                : messageFromRegister || message });
        return InnerComponent ? (react_9(InnerComponent) ? (react_10(InnerComponent, props)) : (react_8(InnerComponent, props))) : (react_8(react_5, Object.assign({}, props)));
    };

    var global$1$1 = typeof global$1$1 !== "undefined"
        ? global$1$1
        : typeof globalThis !== "undefined"
            ? globalThis
            : {};
    /**
     * Used to evaluate whether or not to render a component
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} options.props - Props to test comparison values against, usually Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops)
     * @returns {Boolean} returns true if all comparisons are true or if using or comparisons, at least one condition is true
     * @example
     const sampleJSONX = {
      component: 'div',
      props: {
        id: 'generatedJSONX',
        className: 'jsonx',
        bigNum: 1430931039,
        smallNum: 0.425,
        falsey: false,
        truthy: true,
      },
      children: 'some div',
    };
    const testJSONX = Object.assign({}, sampleJSONX, {
      comparisonprops: [{
        left: ['truthy',],
        operation:'==',
        right:['falsey',],
      }],
    });
    displayComponent({ jsonx: testJSONX, props: testJSONX2.props, }) // => false
     */
    function displayComponent(options = {}) {
        const { jsonx = {}, props } = options;
        const propsToCompare = jsonx.comparisonprops;
        const comparisons = Array.isArray(propsToCompare)
            ? propsToCompare.map(comp => {
                const compares = {};
                if (Array.isArray(comp.left)) {
                    compares.left = comp.left;
                }
                if (Array.isArray(comp.right)) {
                    compares.right = comp.right;
                }
                const propcompares = traverse(compares, props || jsonx.props);
                const opscompares = Object.assign({}, comp, propcompares);
                // console.debug({ opscompares, compares, renderedCompProps });
                switch (opscompares.operation) {
                    case "eq":
                    case "==":
                        // return opscompares.left == opscompares.right;
                        // eslint-disable-next-line
                        return opscompares.left == opscompares.right;
                    case "dneq":
                    case "!=":
                    case "!":
                        // return opscompares.left != opscompares.right;
                        return opscompares.left !== opscompares.right;
                    case "dnseq":
                    case "!==":
                        return opscompares.left !== opscompares.right;
                    case "seq":
                    case "===":
                        return opscompares.left === opscompares.right;
                    case "lt":
                    case "<":
                        return opscompares.left < opscompares.right;
                    case "lte":
                    case "<=":
                        return opscompares.left <= opscompares.right;
                    case "gt":
                    case ">":
                        return opscompares.left > opscompares.right;
                    case "gte":
                    case ">=":
                        return opscompares.left >= opscompares.right;
                    case "dne":
                    case "undefined":
                    case "null":
                        return opscompares.left === undefined || opscompares.left === null;
                    case "!null":
                    case "!undefined":
                    case "exists":
                    default:
                        //'exists'
                        return opscompares.left !== undefined && opscompares.left !== null;
                }
                // }
                // if (opscompares.operation === 'eq') {
                //   // return opscompares.left == opscompares.right;
                //   // eslint-disable-next-line
                //   return opscompares.left == opscompares.right;
                // } else if (opscompares.operation === 'dneq') {
                //   // return opscompares.left != opscompares.right;
                //   return opscompares.left !== opscompares.right;
                // } else if (opscompares.operation === 'dnseq') {
                //   return opscompares.left !== opscompares.right;
                // } else if (opscompares.operation === 'seq') {
                //   return opscompares.left === opscompares.right;
                // } else if (opscompares.operation === 'lt') {
                //   return opscompares.left < opscompares.right;
                // } else if (opscompares.operation === 'lte') {
                //   return opscompares.left <= opscompares.right;
                // } else if (opscompares.operation === 'gt') {
                //   return opscompares.left > opscompares.right;
                // } else if (opscompares.operation === 'gte') {
                //   return opscompares.left >= opscompares.right;
                // } else if (opscompares.operation === 'dne') {
                //   return opscompares.left === undefined || opscompares.left === null;
                // } else { //'exists'
                //   return opscompares.left !== undefined && opscompares.left !== null;
                // }
            })
            : [];
        const validProps = comparisons.filter(comp => comp === true);
        if (!jsonx.comparisonprops) {
            return true;
        }
        else if (jsonx.comparisonorprops && validProps.length < 1) {
            return false;
        }
        else if (validProps.length !== comparisons.length &&
            !jsonx.comparisonorprops) {
            return false;
        }
        else {
            return true;
        }
    }
    /**
     * Use to test if can bind components this context for react-redux-router
     * @returns {Boolean} true if browser is not IE or old android / chrome
     */
    function getAdvancedBinding() {
        var window = window;
        if (typeof window === "undefined") {
            if (this && this.window) {
                window = this.window;
            }
            else if (typeof global$1$1 !== "undefined" && (typeof global$1$1 !== "undefined" ? global$1$1 : window).window) {
                window = (typeof global$1$1 !== "undefined" ? global$1$1 : window).window;
            }
            else if (typeof globalThis !== "undefined" && globalThis.window) {
                window = globalThis.window;
            }
            if (!window.navigator)
                return false;
        }
        try {
            if (window &&
                window.navigator &&
                window.navigator.userAgent &&
                typeof window.navigator.userAgent === "string") {
                // console.log('window.navigator.userAgent',window.navigator.userAgent)
                if (window.navigator.userAgent.indexOf("Trident") !== -1) {
                    return false;
                }
                const uastring = window.navigator.userAgent;
                //@ts-ignore
                const parser = new uaParser();
                parser.setUA(uastring);
                const parseUserAgent = parser.getResult();
                // console.log({ parseUserAgent, });
                if ((parseUserAgent.browser.name === "Chrome" ||
                    parseUserAgent.browser.name === "Chrome WebView") &&
                    parseUserAgent.os.name === "Android" &&
                    parseInt(parseUserAgent.browser.version, 10) < 50) {
                    return false;
                }
                if (parseUserAgent.browser.name === "Android Browser") {
                    return false;
                }
            }
        }
        catch (e) {
            console.error(e);
            // console.warn('could not detect browser support', e);
            return false;
        }
        return true;
    }
    /**
     * take an object of array paths to traverse and resolve
     * @example
     * const testObj = {
          user: {
            name: 'jsonx',
            description: 'react withouth javascript',
          },
          stats: {
            logins: 102,
            comments: 3,
          },
          authentication: 'OAuth2',
        };
    const testVals = { auth: ['authentication', ], username: ['user', 'name', ], };

     traverse(testVals, testObj) // =>{ auth:'OAuth2', username:'jsonx',  }
     * @param {Object} paths - an object to resolve array property paths
     * @param {Object} data - object to traverse
     * @returns {Object} resolved object with traversed properties
     * @throws {TypeError}
     */
    function traverse(paths = {}, data = {}) {
        let keys = Object.keys(paths);
        if (!keys.length)
            return paths;
        return keys.reduce((result, key) => {
            //@ts-ignore
            if (typeof paths[key] === "string")
                result[key] = data[paths[key]];
            else if (Array.isArray(paths[key])) {
                let _path = Object.assign([], paths[key]);
                let value = data;
                while (_path.length && value && typeof value === "object") {
                    let prop = _path.shift();
                    //@ts-ignore
                    value = value[prop];
                }
                result[key] = _path.length ? undefined : value;
            }
            else
                throw new TypeError("dynamic property paths must be a string or an array of strings or numeric indexes");
            return result;
        }, {});
    }
    /**
     * Validates JSONX JSON Syntax
     * @example
     * validateJSONX({component:'p',children:'hello world'})=>true
     * validateJSONX({children:'hello world'})=>throw SyntaxError('[0001] Missing React Component')
     * @param {Object} jsonx - JSONX JSON to validate
     * @param {Boolean} [returnAllErrors=false] - flag to either throw error or to return all errors in an array of errors
     * @returns {Boolean|Error[]} either returns true if JSONX is valid, or throws validation error or returns list of errors in array
     * @throws {SyntaxError|TypeError|ReferenceError}
     */
    function validateJSONX(jsonx = {}, returnAllErrors = false) {
        const dynamicPropsNames = [
            "asyncprops",
            "resourceprops",
            "windowprops",
            "thisprops",
            "thisstate",
            "thiscontext"
        ];
        const evalPropNames = [
            "__dangerouslyEvalProps",
            "__dangerouslyBindEvalProps"
        ];
        const validKeys = [
            "component",
            "props",
            "test",
            "children",
            "__spreadComponent",
            "__inline",
            "__functionargs",
            "__dangerouslyInsertComponents",
            "__dangerouslyInsertComponentProps",
            "__dangerouslyInsertJSONXComponents",
            "__functionProps",
            "__functionparams",
            "__windowComponents",
            "__windowComponentProps",
            "comparisonprops",
            "comparisonorprops",
            "passprops",
            "exposeprops",
            "debug",
            "___stringifyChildren",
            "___toStringChildren",
            "___toNumeral",
            "___FromLuxonTimeZone",
            "___ISOtoLuxonString",
            "___JSDatetoLuxonString",
            "___template"
        ].concat(dynamicPropsNames, evalPropNames);
        let errors = [];
        if (!jsonx.component) {
            errors.push(SyntaxError("[0001] Missing React Component"));
        }
        if (jsonx.props) {
            if (typeof jsonx.props !== "object" || Array.isArray(jsonx.props)) {
                errors.push(TypeError("[0002] " +
                    jsonx.component +
                    ": props must be an Object / valid React props"));
            }
            if (jsonx.props.children &&
                (typeof jsonx.props.children !== "string" ||
                    !Array.isArray(jsonx.props.children))) {
                errors.push(TypeError("[0003] " +
                    jsonx.component +
                    ": props.children must be an array of JSONX JSON objects or a string"));
            }
            if (jsonx.props._children &&
                (typeof jsonx.props._children !== "string" ||
                    !Array.isArray(jsonx.props._children))) {
                errors.push(TypeError("[0004] " +
                    jsonx.component +
                    ": props._children must be an array of JSONX JSON objects or a string"));
            }
        }
        if (jsonx.children) {
            if (typeof jsonx.children !== "string" && !Array.isArray(jsonx.children)) {
                errors.push(TypeError("[0005] " +
                    jsonx.component +
                    ": children must be an array of JSONX JSON objects or a string"));
            }
            if (Array.isArray(jsonx.children)) {
                const childrenErrors = jsonx.children
                    .filter(c => typeof c === "object")
                    .map(c => validateJSONX(c, returnAllErrors));
                errors = errors.concat(...childrenErrors);
            }
        }
        dynamicPropsNames.forEach(dynamicprop => {
            const jsonxDynamicProps = jsonx[dynamicprop];
            if (jsonxDynamicProps) {
                // if (dynamicprop === 'thisprops') {
                //   console.log({ dynamicprop, jsonxDynamicProps });
                // }
                if (typeof jsonxDynamicProps !== "object") {
                    errors.push(TypeError(`[0006] ${dynamicprop} must be an object`));
                }
                Object.keys(jsonxDynamicProps).forEach(resolvedDynamicProp => {
                    if (!Array.isArray(jsonxDynamicProps[resolvedDynamicProp])) {
                        errors.push(TypeError(`[0007] jsonx.${dynamicprop}.${resolvedDynamicProp} must be an array of strings`));
                    }
                    if (Array.isArray(jsonxDynamicProps[resolvedDynamicProp])) {
                        const allStringArray = jsonxDynamicProps[resolvedDynamicProp].filter((propArrayItem) => typeof propArrayItem === "string");
                        if (allStringArray.length !==
                            jsonxDynamicProps[resolvedDynamicProp].length) {
                            errors.push(TypeError(`[0008] jsonx.${dynamicprop}.${resolvedDynamicProp} must be an array of strings`));
                        }
                    }
                });
            }
        });
        const evalProps = jsonx.__dangerouslyEvalProps;
        const boundEvalProps = jsonx.__dangerouslyBindEvalProps;
        if (evalProps || boundEvalProps) {
            if ((evalProps && typeof evalProps !== "object") ||
                (boundEvalProps && typeof boundEvalProps !== "object")) {
                errors.push(TypeError("[0009] __dangerouslyEvalProps must be an object of strings to convert to valid javascript"));
            }
            evalPropNames
                .filter(evalProp => jsonx[evalProp])
                .forEach(eProps => {
                const evProp = jsonx[eProps];
                const scopedEval = eval;
                Object.keys(evProp).forEach(propToEval => {
                    if (typeof evProp[propToEval] !== "string") {
                        errors.push(TypeError(`[0010] jsonx.${eProps}.${evProp} must be a string`));
                    }
                    try {
                        // console.log({ eProps });
                        if (eProps === "__dangerouslyBindEvalProps") {
                            const funcToBind = scopedEval(`(${evProp[propToEval]})`);
                            funcToBind.call({ bounded: true });
                        }
                        else {
                            scopedEval(evProp[propToEval]);
                        }
                    }
                    catch (e) {
                        errors.push(e);
                    }
                });
            });
        }
        if (jsonx.__dangerouslyInsertComponents) {
            Object.keys(jsonx.__dangerouslyInsertComponents).forEach(insertedComponents => {
                try {
                    if (jsonx.__dangerouslyInsertComponents)
                        validateJSONX(jsonx.__dangerouslyInsertComponents[insertedComponents]);
                }
                catch (e) {
                    errors.push(TypeError(`[0011] jsonx.__dangerouslyInsertComponents.${insertedComponents} must be a valid JSONX JSON Object: ${e.toString()}`));
                }
            });
        }
        if (jsonx.__functionProps) {
            if (typeof jsonx.__functionProps !== "object") {
                errors.push(TypeError("[0012] jsonx.__functionProps  must be an object"));
            }
            else {
                Object.keys(jsonx.__functionProps).forEach(fProp => {
                    if (jsonx.__functionProps &&
                        jsonx.__functionProps[fProp] &&
                        (typeof jsonx.__functionProps[fProp] !== "string" ||
                            jsonx.__functionProps[fProp].indexOf("func:") === -1)) {
                        errors.push(ReferenceError(`[0013] jsonx.__functionProps.${fProp} must reference a function (i.e. func:this.props.logoutUser())`));
                    }
                });
            }
        }
        if (jsonx.__windowComponentProps &&
            (typeof jsonx.__windowComponentProps !== "object" ||
                Array.isArray(jsonx.__windowComponentProps))) {
            errors.push(TypeError("[0013] jsonx.__windowComponentProps  must be an object"));
        }
        if (jsonx.__windowComponents) {
            if (typeof jsonx.__windowComponents !== "object") {
                errors.push(TypeError("[0014] jsonx.__windowComponents must be an object"));
            }
            Object.keys(jsonx.__windowComponents).forEach(cProp => {
                if (typeof jsonx.__windowComponents[cProp] !== "string" ||
                    jsonx.__windowComponents[cProp].indexOf("func:") === -1) {
                    errors.push(ReferenceError(`[0015] jsonx.__windowComponents.${cProp} must reference a window element on window.__jsonx_custom_elements (i.e. func:window.__jsonx_custom_elements.bootstrapModal)`));
                }
            });
        }
        if (typeof jsonx.comparisonorprops !== "undefined" &&
            typeof jsonx.comparisonorprops !== "boolean") {
            errors.push(TypeError("[0016] jsonx.comparisonorprops  must be boolean"));
        }
        if (jsonx.comparisonprops) {
            if (!Array.isArray(jsonx.comparisonprops)) {
                errors.push(TypeError("[0017] jsonx.comparisonprops  must be an array or comparisons"));
            }
            else {
                jsonx.comparisonprops.forEach(c => {
                    if (typeof c !== "object") {
                        errors.push(TypeError("[0018] jsonx.comparisonprops  must be an array or comparisons objects"));
                    }
                    else if (typeof c.left === "undefined") {
                        errors.push(TypeError("[0019] jsonx.comparisonprops  must be have a left comparison value"));
                    }
                });
            }
        }
        if (typeof jsonx.passprops !== "undefined" &&
            typeof jsonx.passprops !== "boolean") {
            errors.push(TypeError("[0020] jsonx.passprops  must be boolean"));
        }
        const invalidKeys = Object.keys(jsonx).filter(key => validKeys.indexOf(key) === -1);
        if (errors.length) {
            if (returnAllErrors)
                return errors;
            throw errors[0];
        }
        return invalidKeys.length
            ? `Warning: Invalid Keys [${invalidKeys.join()}]`
            : true;
    }
    /**
     * validates simple JSONX Syntax {[component]:{props,children}}
     * @param {Object} simpleJSONX - Any valid simple JSONX Syntax
     * @return {Boolean} returns true if simpleJSONX is valid
     */
    function validSimpleJSONXSyntax(simpleJSONX = {}) {
        if (Object.keys(simpleJSONX).length !== 1 && !simpleJSONX.component) {
            return false;
        }
        else {
            const componentName = Object.keys(simpleJSONX)[0];
            return Object.keys(simpleJSONX).length === 1 &&
                !simpleJSONX[componentName].component &&
                typeof simpleJSONX[componentName] === "object"
                ? true
                : false;
        }
    }
    /**
     * Transforms SimpleJSONX to Valid JSONX JSON {[component]:{props,children}} => {component,props,children}
     * @param {Object} simpleJSONX JSON Object
     * @return {Object} - returns a valid JSONX JSON Object from a simple JSONX JSON Object
     */
    function simpleJSONXSyntax(simpleJSONX = {}) {
        const component = Object.keys(simpleJSONX)[0];
        try {
            return Object.assign({}, {
                component
            }, simpleJSONX[component], {
                children: simpleJSONX[component] &&
                    simpleJSONX[component].children &&
                    Array.isArray(simpleJSONX[component].children)
                    ? simpleJSONX[component].children.map(simpleJSONXSyntax)
                    : simpleJSONX[component].children
            });
        }
        catch (e) {
            throw SyntaxError("Invalid Simple JSONX Syntax");
        }
    }
    /**
     * Transforms Valid JSONX JSON to SimpleJSONX  {component,props,children} => {[component]:{props,children}}
     * @param {Object} jsonx Valid JSONX JSON object
     * @return {Object} - returns a simple JSONX JSON Object from a valid JSONX JSON Object
     */
    function getSimplifiedJSONX(jsonx = {}) {
        try {
            if (!jsonx.component)
                return jsonx; //already simple
            const componentName = jsonx.component;
            jsonx.children = Array.isArray(jsonx.children)
                ? jsonx.children
                    .filter(child => child) //remove empty children
                    .map(getSimplifiedJSONX)
                : jsonx.children;
            delete jsonx.component;
            return {
                [componentName]: jsonx
            };
        }
        catch (e) {
            throw e;
        }
    }
    /**
     * Fetches JSON from remote path
     * @param {String} path - fetch path url
     * @param {Object} options - fetch options
     * @return {Object} - returns fetched JSON data
     */
    async function fetchJSON(path = "", options = {}) {
        try {
            const response = await fetch(path, options);
            return await response.json();
        }
        catch (e) {
            throw e;
        }
    }

    var jsonxUtils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        displayComponent: displayComponent,
        getAdvancedBinding: getAdvancedBinding,
        traverse: traverse,
        validateJSONX: validateJSONX,
        validSimpleJSONXSyntax: validSimpleJSONXSyntax,
        simpleJSONXSyntax: simpleJSONXSyntax,
        getSimplifiedJSONX: getSimplifiedJSONX,
        fetchJSON: fetchJSON
    });

    const cache$2 = new Cache_1();
    // if (typeof window === 'undefined') {
    //   var window = window || (typeof global!=="undefined" ? global : window).window || {};
    // }
    /**
     
     */
    //@ts-ignore
    let advancedBinding = getAdvancedBinding();
    // require;
    /**
     * object of all react components available for JSONX
     
     */
    //@ts-ignore
    let componentMap = Object.assign({ Fragment: react_5, Suspense: react_6 }, reactDomFactories, window && typeof window === "object" ? window.__jsonx_custom_elements : {});
    /**
     * getBoundedComponents returns reactComponents with certain elements that have this bounded to select components in the boundedComponents list
     
     * @param {Object} options - options for getBoundedComponents
     * @param {Object} options.reactComponents - all react components available for JSONX
     * @param {string[]} boundedComponents - list of components to bind JSONX this context (usually helpful for navigation and redux-router)
     * @returns {Object} reactComponents object of all react components available for JSONX
     */
    function getBoundedComponents(options = {}) {
        const { reactComponents, boundedComponents = [] } = options;
        if (advancedBinding || options.advancedBinding) {
            return Object.assign({}, reactComponents, boundedComponents.reduce((result, componentName) => {
                result[componentName] = reactComponents[componentName].bind(this);
                return result;
            }, {}));
            // reactComponents.ResponsiveLink = ResponsiveLink.bind(this);
        }
        else
            return reactComponents;
    }
    /**
     * returns a react component from a component library
     
     * @param {Object} options - options for getComponentFromLibrary
     * @param {Object} [options.componentLibraries={}] - react component library like bootstrap
     * @param {Object} [options.jsonx={}] - any valid JSONX JSON
     * @returns {function|undefined} react component from react library like bootstrap, material design or bulma
     */
    function getComponentFromLibrary(options = { jsonx: {} }) {
        const { componentLibraries = {}, jsonx = {} } = options;
        const libComponent = Object.keys(componentLibraries)
            .map(libraryName => {
            //@ts-ignore
            const cleanLibraryName = jsonx.component.replace(`${libraryName}.`, "");
            const libraryNameArray = cleanLibraryName.split(".");
            if (libraryNameArray.length === 2 &&
                componentLibraries[libraryName] &&
                componentLibraries[libraryName][libraryNameArray[0]] &&
                typeof componentLibraries[libraryName][libraryNameArray[0]][libraryNameArray[1]] !== "undefined") {
                return componentLibraries[libraryName][libraryNameArray[0]][libraryNameArray[1]];
            }
            else if (typeof componentLibraries[libraryName][cleanLibraryName] !== "undefined") {
                return componentLibraries[libraryName][cleanLibraryName];
            }
        })
            .filter(val => val)[0];
        return libComponent;
    }
    /**
     * returns a react element from jsonx.component
     
     * @example
     * // returns react elements
     * getComponentFromMap({jsonx:{component:'div'}})=>div
     * getComponentFromMap({jsonx:{component:'MyModal'},reactComponents:{MyModal:MyModal extends React.Component}})=>MyModal
     * getComponentFromMap({jsonx:{component:'reactBootstap.nav'},componentLibraries:{reactBootstrap,}})=>reactBootstap.nav
     * @param {Object} options - options for getComponentFromMap
     * @param {object} [options.jsonx={}] - any valid JSONX JSON object
     * @param {Object} [options.reactComponents={}] - react components to render
     * @param {Object} [options.componentLibraries={}] - react components to render from another component library like bootstrap or bulma
     * @param {function} [options.logError=console.error] - error logging function
     * @param {boolean} [options.debug=false] - use debug messages
     * @returns {string|function|class} valid react element
     */
    function getComponentFromMap(options = {}) {
        //ReactElementLike | ReactComponentLike | ReactElement | ReactComponentLike
        // eslint-disable-next-line
        const { jsonx = {}, reactComponents = {}, componentLibraries = {}, logError = console.error, debug } = options;
        try {
            if (typeof jsonx.component !== "string" &&
                typeof jsonx.component === "function") {
                return jsonx.component;
                //@ts-ignore
            }
            else if (jsonx.component && reactDomFactories[jsonx.component]) {
                return jsonx.component;
                //@ts-ignore
            }
            else if (reactComponents[jsonx.component]) {
                //@ts-ignore
                return reactComponents[jsonx.component];
            }
            else if (typeof jsonx.component === "string" &&
                jsonx.component.indexOf(".") > 0 &&
                getComponentFromLibrary({ jsonx, componentLibraries })) {
                return getComponentFromLibrary({ jsonx, componentLibraries });
            }
            else {
                throw new ReferenceError(`Invalid React Component (${jsonx.component})`);
            }
        }
        catch (e) {
            if (debug)
                logError(e, e.stack ? e.stack : "no stack");
            throw e;
        }
    }
    /**
     * Returns a new function from an options object
     
     * @param {Object} options
     * @param {String} [options.body=''] - Function string body
     * @param {String[]} [options.args=[]] - Function arguments
     * @returns {Function}
     */
    function getFunctionFromEval(options = {}) {
        if (typeof options === "function")
            return options;
        const { body = "", args = [], name } = options;
        const argus = [].concat(args);
        argus.push(body);
        const evalFunction = Function.prototype.constructor.apply({ name }, argus);
        if (name) {
            Object.defineProperty(evalFunction, "name", { value: name });
        }
        return evalFunction;
    }
    /**
     * Returns a new React Component
     
     * @param {Boolean} [options.returnFactory=true] - returns a React component if true otherwise returns Component Class
     * @param {Object} [options.resources={}] - asyncprops for component
     * @param {String} [options.name ] - Component name
     * @param {Function} [options.lazy ] - function that resolves {reactComponent,options} to lazy load component for code splitting
     * @param {Boolean} [options.use_getState=true] - define getState prop
     * @param {Boolean} [options.bindContext=true] - bind class this reference to render function components
     * @param {Boolean} [options.passprops ] - pass props to rendered component
     * @param {Boolean} [options.passstate] - pass state as props to rendered component
     * @param {Object} [reactComponent={}] - an object of functions used for create-react-class
     * @param {Object} reactComponent.render.body - Valid JSONX JSON
     * @param {String} reactComponent.getDefaultProps.body - return an object for the default props
     * @param {String} reactComponent.getInitialState.body - return an object for the default state
     * @returns {Function}
     * @see {@link https://reactjs.org/docs/react-without-es6.html}
     */
    function getReactClassComponent(reactComponent = {}, options = {}) {
        // const util = require('util');
        // console.log(util.inspect({ reactComponent },{depth:20}));
        if (options.lazy) {
            //@ts-ignore
            return react_7(() => options
                .lazy(reactComponent, Object.assign({}, options, { lazy: false }))
                .then((lazyComponent) => {
                return {
                    //@ts-ignore
                    default: getReactClassComponent(...lazyComponent)
                };
            }));
        }
        const context = this || {};
        const { returnFactory = true, resources = {}, use_getState = true, bindContext = true, disableRenderIndexKey = true } = options;
        const rjc = {
            //mounting
            getDefaultProps: {
                body: "return {};"
            },
            // (unsupported) getDerivedStateFromProps: undefined, // {body:'return null;', args:['props','state',]}
            getInitialState: {
                body: "return {};"
            },
            componentDidMount: undefined,
            UNSAFE_componentWillMount: undefined,
            //updating
            // (unsupported) getDerivedStateFromProps 
            shouldComponentUpdate: undefined,
            getSnapshotBeforeUpdate: undefined,
            componentDidUpdate: undefined,
            UNSAFE_componentWillUpdate: undefined,
            UNSAFE_componentWillReceiveProps: undefined,
            //unmounting
            componentWillUnmount: undefined,
            //error handling
            // (unsupported) componentDidCatch:undefined, // { body:'return ;', args:['error','info'] }
            // (unsupported) getDerivedStateFromError: undefined, // {body:' return { hasError:true}', args:['error')',]}
            //body
            ...reactComponent
        };
        const rjcKeys = Object.keys(rjc);
        if (rjcKeys.includes("render") === false) {
            throw new ReferenceError("React components require a render method");
        }
        const classOptions = rjcKeys.reduce((result, val) => {
            if (!rjc[val])
                return result;
            if (typeof rjc[val] === "function")
                rjc[val] = { body: rjc[val] };
            const args = rjc[val].arguments;
            const body = rjc[val].body;
            if (!body) {
                console.warn({ rjc });
                throw new SyntaxError(`Function(${val}) requires a function body`);
            }
            if (args &&
                !Array.isArray(args) &&
                args.length &&
                args.length &&
                args.filter((arg) => typeof arg === "string").length) {
                throw new TypeError(`Function(${val}) arguments must be an array or variable names`);
            }
            if (val === "render") {
                result[val] = function () {
                    //@ts-ignore
                    if (options.passprops && this && this.props)
                        body.props = Object.assign({}, body.props, this.props);
                    //@ts-ignore
                    if (options.passstate && this.state)
                        body.props = Object.assign({}, body.props, this.state);
                    return getReactElementFromJSONX.call(Object.assign({}, context, bindContext ? this : { props: {} }, { disableRenderIndexKey }, {
                        props: use_getState && this && this.props
                            ? //@ts-ignore
                                Object.assign({}, this.props, {
                                    getState: () => this.state
                                })
                            : //@ts-ignore
                                this.props
                    }), body, resources);
                };
            }
            else {
                //@ts-ignore
                result[val] =
                    typeof body === "function"
                        ? body
                        : getFunctionFromEval({
                            body,
                            args
                        });
            }
            return result;
        }, {});
        const reactComponentClass = createReactClass(classOptions);
        if (options.name) {
            Object.defineProperty(reactComponentClass, "name", {
                value: options.name
            });
        }
        const reactClass = returnFactory
            ? react.createFactory(reactComponentClass)
            : reactComponentClass;
        return reactClass;
    }
    /**
     * A helper component that allows you to create forms with [react-hook-form](https://react-hook-form.com/) without needed to add external form libraries
     * @param this
     * @param props
     */
    function FormComponent(props = {}) {
        const { hookFormOptions = {}, formComponent = { component: "div", children: "empty form" }, onSubmit, formWrapperComponent, formKey, formWrapperProps, } = props;
        // const { register, unregister, errors, watch, handleSubmit, reset, setError, clearError, setValue, getValues, triggerValidation, control, formState, } = useForm(hookFormOptions);
        const reactHookForm = useForm(hookFormOptions);
        const context = {
            ...this || {},
            ...{ reactHookForm, },
        };
        if (!context.componentLibraries || !context.componentLibraries.ReactHookForm) {
            context.componentLibraries = {
                ...context.componentLibraries,
                ...{
                    ReactHookForm: {
                        Controller, ErrorMessage,
                    }
                }
            };
        }
        const formWrapperJXM = formWrapperComponent || {
            component: 'form',
            props: {
                onSubmit: onSubmit ? reactHookForm.handleSubmit(onSubmit) : undefined,
                key: formKey ? `formWrapperJXM-${formKey}` : undefined,
                ...formWrapperProps,
            }
        };
        formWrapperJXM.children = Array.isArray(formComponent) ? formComponent : [formComponent];
        const renderJSONX = react_16(() => getReactElementFromJSONX.bind(context), [
            context
        ]);
        return renderJSONX(formWrapperJXM);
    }
    /**
     * A helper component that allows you to create components that load data and render asynchronously.
     * @param this
     * @param props
     */
    function DynamicComponent(props = {}) {
        //@ts-ignore
        const { useCache = true, cacheTimeout = 60 * 60 * 5, loadingJSONX = { component: "div", children: "...Loading" }, 
        //@ts-ignore
        loadingErrorJSONX = {
            component: "div",
            children: [
                { component: "span", children: "Error: " },
                {
                    component: "span",
                    resourceprops: { _children: ["error", "message"] }
                }
            ]
        }, cacheTimeoutFunction = () => { }, jsonx, transformFunction = (data) => data, fetchURL, fetchOptions, fetchFunction } = props;
        const context = this || {};
        const [state, setState] = react_11({
            hasLoaded: false,
            hasError: false,
            resources: {},
            error: undefined
        });
        const transformer = react_16(() => getFunctionFromEval(transformFunction), [
            transformFunction
        ]);
        const timeoutFunction = react_16(() => getFunctionFromEval(cacheTimeoutFunction), [cacheTimeoutFunction]);
        const renderJSONX = react_16(() => getReactElementFromJSONX.bind(context), [
            context
        ]);
        const loadingComponent = react_16(() => renderJSONX(loadingJSONX), [
            loadingJSONX
        ]);
        const loadingError = react_16(() => renderJSONX(loadingErrorJSONX, { error: state.error }), [loadingErrorJSONX, state.error]);
        react_12(() => {
            async function getData() {
                try {
                    //@ts-ignore
                    let transformedData;
                    if (useCache && cache$2.get(fetchURL)) {
                        transformedData = cache$2.get(fetchURL);
                    }
                    else {
                        let fetchedData;
                        if (fetchFunction) {
                            fetchedData = await fetchFunction(fetchURL, fetchOptions);
                        }
                        else
                            fetchedData = await fetchJSON(fetchURL, fetchOptions);
                        transformedData = await transformer(fetchedData);
                        if (useCache)
                            cache$2.put(fetchURL, transformedData, cacheTimeout, timeoutFunction);
                    }
                    //@ts-ignore
                    setState(prevState => Object.assign({}, prevState, {
                        hasLoaded: true,
                        hasError: false,
                        resources: { DynamicComponentData: transformedData }
                    }));
                }
                catch (e) {
                    if (context.debug)
                        console.warn(e);
                    //@ts-ignore
                    setState({ hasError: true, error: e });
                }
            }
            if (fetchURL)
                getData();
        }, [fetchURL, fetchOptions]);
        if (!fetchURL)
            return null;
        else if (state.hasError) {
            return loadingError;
        }
        else if (state.hasLoaded === false) {
            return loadingComponent;
        }
        else
            return renderJSONX(jsonx, state.resources);
    }
    /**
     * Returns new React Function Component
     
     * @todo set 'functionprops' to set arguments for function
     * @param {*} reactComponent - Valid JSONX to render
     * @param {String} functionBody - String of function component body
     * @param {String} options.name - Function Component name
     * @returns {Function}
     * @see {@link https://reactjs.org/docs/hooks-intro.html}
     * @example
      const jsonxRender = {
       component:'div',
       passprops:'true',
       children:[
         {
          component:'input',
          thisprops:{
              value:['count'],
            },
         },
          {
            component:'button',
           __dangerouslyBindEvalProps:{
            onClick:function(count,setCount){
              setCount(count+1);
              console.log('this is inline',{count,setCount});
            },
            // onClick:`(function(count,setCount){
            //   setCount(count+1)
            //   console.log('this is inline',{count,setCount});
            // })`,
            children:'Click me'
          }
       ]
      };
      const functionBody = 'const [count, setCount] = useState(0); const functionprops = {count,setCount};'
      const options = { name: IntroHook}
      const MyCustomFunctionComponent = jsonx._jsonxComponents.getReactFunctionComponent({jsonxRender, functionBody, options});
       */
    function getReactFunctionComponent(reactComponent = {}, functionBody = "", options = {}) {
        if (options.lazy) {
            //@ts-ignore
            return react_7(() => options
                .lazy(reactComponent, functionBody, Object.assign({}, options, { lazy: false }))
                .then((lazyComponent) => {
                return {
                    //@ts-ignore
                    default: getReactFunctionComponent(...lazyComponent)
                };
            }));
        }
        if (typeof options === "undefined" || typeof options.bind === "undefined")
            options.bind = true;
        const { resources = {}, args = [] } = options;
        //@ts-ignore
        const props = Object.assign({}, reactComponent.props);
        const functionArgs = [
            react,
            react_11,
            react_12,
            react_13,
            react_14,
            react_15,
            react_16,
            react_17,
            react_18,
            react_19,
            react_20,
            getReactElementFromJSONX,
            reactComponent,
            resources,
            props
        ];
        //@ts-ignore
        if (typeof functionBody === "function")
            functionBody = functionBody.toString();
        const functionComponent = Function("React", "useState", "useEffect", "useContext", "useReducer", "useCallback", "useMemo", "useRef", "useImperativeHandle", "useLayoutEffect", "useDebugValue", "getReactElementFromJSONX", "reactComponent", "resources", "props", `
    'use strict';
    const self = this || {};

    return function ${options.name || "Anonymous"}(props){
      ${functionBody}
      if(typeof exposeprops==='undefined' || exposeprops){
        reactComponent.props = Object.assign({},props,typeof exposeprops==='undefined'?{}:exposeprops);
        if(typeof exposeprops!=='undefined') reactComponent.__functionargs = Object.keys(exposeprops);
      } else{
        reactComponent.props =  props;
      }
      if(!props.children) {
      //  delete props.children;
      }
      const context = ${options.bind ? "Object.assign(self,this||{})" : "this"};
      return getReactElementFromJSONX.call(context, reactComponent);
    }
  `);
        if (options.name) {
            Object.defineProperty(functionComponent, "name", {
                value: options.name
            });
        }
        return options.bind
            ? functionComponent.call(this, ...functionArgs)
            : functionComponent(...functionArgs);
    }
    /**
     *
     */
    function getReactContext(options = {}) {
        return react_4(options.value);
    }

    var jsonxComponents = /*#__PURE__*/Object.freeze({
        __proto__: null,
        advancedBinding: advancedBinding,
        componentMap: componentMap,
        getBoundedComponents: getBoundedComponents,
        getComponentFromLibrary: getComponentFromLibrary,
        getComponentFromMap: getComponentFromMap,
        getFunctionFromEval: getFunctionFromEval,
        getReactClassComponent: getReactClassComponent,
        FormComponent: FormComponent,
        DynamicComponent: DynamicComponent,
        getReactFunctionComponent: getReactFunctionComponent,
        getReactContext: getReactContext
    });

    //https://stackoverflow.com/questions/1007981/how-to-get-function-parameter-names-values-dynamically
    const STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
    const ARGUMENT_NAMES = /([^\s,]+)/g;
    /**
     * returns the names of parameters from a function declaration
     * @example
     * const arrowFunctionAdd = (a,b)=>a+b;
     * function regularFunctionAdd(c,d){return c+d;}
     * getParamNames(arrowFunctionAdd) // => ['a','b']
     * getParamNames(regularFunctionAdd) // => ['c','d']
     * @param {Function} func
     * @todo write tests
     */
    function getParamNames(func) {
        var fnStr = func.toString().replace(STRIP_COMMENTS, "");
        var result = fnStr
            .slice(fnStr.indexOf("(") + 1, fnStr.indexOf(")"))
            .match(ARGUMENT_NAMES);
        if (result === null) {
            result = [];
        }
        return result;
    }
    /**
     * It uses traverse on a traverseObject to returns a resolved object on propName. So if you're making an ajax call and want to pass properties into a component, you can assign them using asyncprops and reference object properties by an array of property paths
     * @param {Object} [traverseObject={}] - the object that contains values of propName
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} [options.propName='asyncprops'] - Property on JSONX to resolve values onto, i.e (asyncprops,thisprops,windowprops)
     * @returns {Object} resolved object
     * @example
     const traverseObject = {
      user: {
        name: 'jsonx',
        description: 'react withouth javascript',
      },
      stats: {
        logins: 102,
        comments: 3,
      },
      authentication: 'OAuth2',
    };
    const testJSONX = {
      component: 'div',
      props: {
        id: 'generatedJSONX',
        className:'jsonx',
      },
      asyncprops:{
        auth: [ 'authentication', ],
        username: [ 'user', 'name', ],
      },
      children: [
        {
          component: 'p',
          props: {
            style: {
              color: 'red',
              fontWeight:'bold',
            },
          },
          children:'hello world',
        },
      ],
    };
    const JSONXP = getJSONXProps({ jsonx: testJSONX, traverseObject, });
    // => {
    //   auth: 'OAuth2',
    //   username: 'jsonx'
    // }

    //finally resolves:
    const testJSONX = {
      component: 'div',
      props: {
        id: 'generatedJSONX',
        className:'jsonx',
        auth: 'OAuth2',
        username: 'jsonx',
      },
      children: [
        {
          component: 'p',
          props: {
            style: {
              color: 'red',
              fontWeight:'bold',
            },
          },
          children:'hello world',
        },
      ],
    };
     */
    function getJSONXProps(options = {}) {
        // eslint-disable-next-line
        let { jsonx = {}, propName = "asyncprops", traverseObject = {} } = options;
        // return (jsonx.asyncprops && typeof jsonx.asyncprops === 'object')
        // ? utilities.traverse(jsonx.asyncprops, resources)
        // : {};
        return jsonx[propName] && typeof jsonx[propName] === "object"
            ? traverse(jsonx[propName], traverseObject)
            : {};
    }
    /**
     * returns children jsonx components defined on __spreadComponent spread over an array on props.__spread
     * @param {*} options
     */
    function getChildrenComponents(options = {}) {
        const { allProps = {}, jsonx = {} } = options;
        // const asyncprops = getJSONXProps({ jsonx, propName: 'spreadprops', traverseObject: allProps, });
        if (Array.isArray(allProps.__spread) === false) {
            if ((this && this.debug) || jsonx.debug) {
                return {
                    children: new Error("Using __spreadComponent requires an array prop '__spread'").toString()
                };
            }
            else {
                return { children: undefined };
            }
        }
        else {
            return {
                _children: allProps.__spread.map((__item) => {
                    const clonedChild = Object.assign({}, jsonx.__spreadComponent);
                    const clonedChildProps = Object.assign({}, clonedChild.props);
                    clonedChildProps.__item = __item;
                    clonedChild.props = clonedChildProps;
                    return clonedChild;
                })
            };
        }
    }
    function boundArgsReducer(jsonx = {}) {
        return (args, arg) => {
            let val;
            if (this && this.state && typeof this.state[arg] !== "undefined")
                val = this.state[arg];
            else if (this && this.props && typeof this.props[arg] !== "undefined")
                val = this.props[arg];
            else if (jsonx.props && typeof jsonx.props[arg] !== "undefined")
                val = jsonx.props[arg];
            if (typeof val !== "undefined")
                args.push(val);
            return args.filter((a) => typeof a !== "undefined");
        };
    }
    /**
     * Used to evalute javascript and set those variables as props. getEvalProps evaluates __dangerouslyEvalProps and __dangerouslyBindEvalProps properties with eval, this is used when component properties are functions, __dangerouslyBindEvalProps is used when those functions require that this is bound to the function. For __dangerouslyBindEvalProps it must resolve an expression, so functions should be wrapped in (). I.e. (function f(x){ return this.minimum+x;})
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @returns {Object} returns resolved object with evaluated javascript
     * @example
     const testVals = {
        auth: 'true',
        username: '(user={})=>user.name',
      };
      const testJSONX = Object.assign({}, sampleJSONX, {
        __dangerouslyEvalProps: testVals, __dangerouslyBindEvalProps: {
          email: '(function getUser(user={}){ return this.testBound(); })',
        },
      });
      const JSONXP = getEvalProps.call({ testBound: () => 'bounded', }, { jsonx: testJSONX, });
      const evalutedComputedFunc = JSONXP.username({ name: 'bob', });
      const evalutedComputedBoundFunc = JSONXP.email({ email:'test@email.domain', });
      // expect(JSONXP.auth).to.be.true;
      // expect(evalutedComputedFunc).to.eql('bob');
      // expect(evalutedComputedBoundFunc).to.eql('bounded');
     */
    function getEvalProps(options = { jsonx: {} }) {
        const { jsonx } = options;
        const scopedEval = eval; //https://github.com/rollup/rollup/wiki/Troubleshooting#avoiding-eval
        let evAllProps = {};
        if (jsonx.__dangerouslyEvalAllProps) {
            let evVal;
            try {
                // eslint-disable-next-line
                evVal =
                    typeof evVal === "function"
                        ? jsonx.__dangerouslyEvalAllProps
                        : scopedEval(jsonx.__dangerouslyEvalAllProps);
            }
            catch (e) {
                if (this.debug || jsonx.debug)
                    evVal = e;
            }
            evAllProps = evVal.call(this, { jsonx });
        }
        const evProps = Object.keys(jsonx.__dangerouslyEvalProps || {}).reduce((eprops, epropName) => {
            let evVal;
            let evValString;
            try {
                // eslint-disable-next-line
                //@ts-ignore
                evVal = scopedEval(jsonx.__dangerouslyEvalProps[epropName]);
                evValString = evVal.toString();
            }
            catch (e) {
                if (this.debug || jsonx.debug)
                    evVal = e;
            }
            //@ts-ignore
            eprops[epropName] =
                typeof evVal === "function" ? evVal.call(this, { jsonx }) : evVal;
            //@ts-ignore
            if (this.exposeEval)
                eprops[`__eval_${epropName}`] = evValString;
            return eprops;
        }, {});
        const evBindProps = Object.keys(jsonx.__dangerouslyBindEvalProps || {}).reduce((eprops, epropName) => {
            let evVal;
            let evValString;
            try {
                let args;
                //@ts-ignore
                const functionBody = jsonx.__dangerouslyBindEvalProps[epropName];
                // InlineFunction = Function.prototype.constructor.apply({}, args);
                let functionDefinition;
                if (typeof functionBody === "function") {
                    functionDefinition = functionBody;
                }
                else if (jsonx.__dangerouslyBindEvalProps) {
                    functionDefinition = scopedEval(jsonx.__dangerouslyBindEvalProps[epropName]);
                    evValString = functionDefinition.toString();
                } // eslint-disable-next-line
                if (jsonx.__functionargs && jsonx.__functionargs[epropName]) {
                    args = [this].concat(jsonx.__functionargs[epropName].reduce(boundArgsReducer.call(this, jsonx), []));
                }
                else if (jsonx.__functionparams === false) {
                    args = [this];
                }
                else {
                    const functionDefArgs = getParamNames(functionDefinition);
                    args = [this].concat(functionDefArgs.reduce(boundArgsReducer.call(this, jsonx), []));
                }
                // eslint-disable-next-line
                evVal = functionDefinition.bind(...args);
            }
            catch (e) {
                if (this.debug || jsonx.debug)
                    evVal = e;
            }
            // eslint-disable-next-line
            //@ts-ignore
            eprops[epropName] = evVal;
            //@ts-ignore
            if (this.exposeEval)
                eprops[`__eval_${epropName}`] = evValString;
            return eprops;
        }, {});
        return Object.assign({}, evProps, evBindProps, evAllProps);
    }
    /**
     * Resolves jsonx.__dangerouslyInsertComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} [options.resources={}] - object to use for resourceprops(asyncprops), usually a result of an asynchronous call
     * @returns {Object} resolved object of React Components
     */
    function getComponentProps(options = { jsonx: {} }) {
        const { jsonx, resources } = options;
        //@ts-ignore
        return Object.keys(jsonx.__dangerouslyInsertComponents).reduce((cprops, cpropName) => {
            let componentVal;
            try {
                // eslint-disable-next-line
                if (jsonx.__dangerouslyInsertComponents) {
                    componentVal = getRenderedJSON.call(this, jsonx.__dangerouslyInsertComponents[cpropName], resources);
                }
            }
            catch (e) {
                if (this.debug || jsonx.debug)
                    componentVal = e;
            }
            cprops[cpropName] = componentVal;
            return cprops;
        }, {});
    }
    /**
     * Used to create components from jsonx as props
     * @param this
     * @param options
     */
    function getReactComponents(options) {
        const { jsonx, resources } = options;
        const functionComponents = !jsonx.__dangerouslyInsertFunctionComponents
            ? {}
            : Object.keys(jsonx.__dangerouslyInsertFunctionComponents).reduce((cprops, cpropName) => {
                let componentVal;
                try {
                    const args = jsonx.__dangerouslyInsertFunctionComponents && jsonx.__dangerouslyInsertFunctionComponents[cpropName];
                    if (args) {
                        args.options = Object.assign({}, args.options, { resources });
                        // eslint-disable-next-line
                        componentVal = getReactFunctionComponent.call(this, args.reactComponent, args.functionBody, args.options);
                    }
                }
                catch (e) {
                    if (this.debug || jsonx.debug)
                        componentVal = e;
                }
                cprops[cpropName] =
                    cpropName === "_children" ? [componentVal] : componentVal;
                return cprops;
            }, {});
        const classComponents = !jsonx.__dangerouslyInsertClassComponents
            ? {}
            : Object.keys(jsonx.__dangerouslyInsertClassComponents).reduce((cprops, cpropName) => {
                let componentVal;
                try {
                    const args = jsonx.__dangerouslyInsertClassComponents && jsonx.__dangerouslyInsertClassComponents[cpropName];
                    if (args) {
                        args.options = Object.assign({}, args.options, { resources });
                        // eslint-disable-next-line
                        componentVal = getReactClassComponent.call(this, args.reactComponent, args.options);
                    }
                }
                catch (e) {
                    if (this.debug || jsonx.debug)
                        componentVal = e;
                }
                cprops[cpropName] =
                    cpropName === "_children" ? [componentVal] : componentVal;
                return cprops;
            }, {});
        return Object.assign({}, functionComponents, classComponents);
    }
    /**
     * Resolves jsonx.__dangerouslyInsertReactComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
    //  * @param {Object} [options.resources={}] - object to use for asyncprops, usually a result of an asynchronous call
     * @returns {Object} resolved object of React Components
     */
    function getReactComponentProps(options = { jsonx: {} }) {
        const { jsonx } = options;
        const customComponents = this && this.reactComponents ? this.reactComponents : {};
        const customLibraries = this && this.componentLibraries ? this.componentLibraries : {};
        if (jsonx.__dangerouslyInsertJSONXComponents &&
            Object.keys(jsonx.__dangerouslyInsertJSONXComponents).length) {
            return Object.keys(jsonx.__dangerouslyInsertJSONXComponents).reduce((cprops, cpropName) => {
                let componentVal;
                try {
                    componentVal = getComponentFromMap({
                        jsonx: jsonx.__dangerouslyInsertJSONXComponents && jsonx.__dangerouslyInsertJSONXComponents[cpropName],
                        reactComponents: customComponents,
                        componentLibraries: customLibraries
                    });
                }
                catch (e) {
                    if (this.debug || jsonx.debug)
                        componentVal = e;
                }
                // eslint-disable-next-line
                cprops[cpropName] = componentVal;
                return cprops;
            }, {});
        }
        else if (jsonx.__dangerouslyInsertReactComponents && Object.keys(jsonx.__dangerouslyInsertReactComponents).length) {
            return Object.keys(jsonx.__dangerouslyInsertReactComponents).reduce((cprops, cpropName) => {
                let componentVal;
                try {
                    componentVal = getComponentFromMap({
                        jsonx: {
                            component: jsonx.__dangerouslyInsertReactComponents && jsonx.__dangerouslyInsertReactComponents[cpropName],
                            props: jsonx.__dangerouslyInsertComponentProps
                                ? jsonx.__dangerouslyInsertComponentProps[cpropName]
                                : {}
                        },
                        reactComponents: customComponents,
                        componentLibraries: customLibraries
                    });
                }
                catch (e) {
                    if (this.debug || jsonx.debug)
                        componentVal = e;
                }
                // eslint-disable-next-line
                cprops[cpropName] = componentVal;
                return cprops;
            }, {});
        }
    }
    /**
     * Takes a function string and returns a function on either this.props or window. The function can only be 2 levels deep
     * @param {Object} options
     * @param {String} [options.propFunc='func:'] - function string, like func:window.LocalStorage.getItem or func:this.props.onClick  or func:inline.myInlineFunction
     * @param {Object} [options.allProps={}] - merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, resourceprops, asyncprops, windowprops, evalProps, insertedComponents);
     * @returns {Function} returns a function from this.props or window functions
     * @example
     * getFunctionFromProps({ propFunc='func:this.props.onClick', }) // => this.props.onClick
     */
    function getFunctionFromProps(options = { jsonx: {}, propBody: "" }) {
        const { propFunc = "func:", propBody, jsonx, functionProperty = "" } = options;
        // eslint-disable-next-line
        const { logError = console.error, debug } = this;
        let windowObject = {};
        if (this.window)
            windowObject = this.window;
        //@ts-ignore
        else if (typeof global$2 !== "undefined" && (typeof global$2 !== "undefined" ? global$2 : window).window)
            windowObject = (typeof global$2 !== "undefined" ? global$2 : window).window;
        try {
            const functionNameString = propFunc.split(":")[1] || "";
            const functionNameArray = functionNameString.split(".");
            const functionName = functionNameArray.length
                ? functionNameArray[functionNameArray.length - 1]
                : "";
            if (propFunc.includes("func:inline")) {
                // eslint-disable-next-line
                let InlineFunction;
                if (jsonx.__functionargs) {
                    const args = [].concat(jsonx.__functionargs[functionProperty]);
                    args.push(propBody);
                    InlineFunction = Function.prototype.constructor.apply({}, args);
                }
                else {
                    InlineFunction = Function("param1", "param2", '"use strict";' + propBody);
                }
                const [propFuncName, funcName] = propFunc.split(".");
                Object.defineProperty(InlineFunction, "name", {
                    value: funcName
                });
                if (jsonx.__functionargs) {
                    const boundArgs = [this].concat(jsonx.__functionargs[functionProperty].map((arg) => jsonx.props[arg]));
                    return InlineFunction.bind(...boundArgs);
                }
                else {
                    return InlineFunction.bind(this);
                }
            }
            else if (propFunc.indexOf("func:window") !== -1) {
                if (functionNameArray.length === 3) {
                    try {
                        return windowObject[functionNameArray[1]][functionName].bind(this);
                    }
                    catch (e) {
                        if (debug) {
                            logError(e);
                        }
                        return windowObject[functionNameArray[1]][functionName];
                    }
                }
                else {
                    try {
                        return windowObject[functionName].bind(this);
                    }
                    catch (e) {
                        if (debug) {
                            logError(e);
                        }
                        return windowObject[functionName];
                    }
                }
            }
            else if (functionNameArray.length === 4) {
                return this.props
                    ? this.props[functionNameArray[2]][functionName]
                    : jsonx.props[functionNameArray[2]][functionName];
            }
            else if (functionNameArray.length === 3) {
                return this.props
                    ? this.props[functionName].bind(this)
                    : jsonx.props[functionName].bind(this);
            }
            else {
                return function () { };
            }
        }
        catch (e) {
            if (this.debug) {
                logError(e);
                if (jsonx && jsonx.debug)
                    return e;
            }
            return function () { };
        }
    }
    /**
     * Returns a resolved object from function strings that has functions pulled from jsonx.__functionProps
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} [options.allProps={}] - merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, asyncprops, windowprops, evalProps, insertedComponents);
     * @returns {Object} resolved object of functions from function strings
     */
    function getFunctionProps(options = { jsonx: {} }) {
        const { allProps = {}, jsonx = {} } = options;
        const getFunction = getFunctionFromProps.bind(this);
        const funcProps = jsonx.__functionProps;
        //Allowing for window functions
        if (funcProps) {
            Object.keys(funcProps).forEach(key => {
                if (typeof funcProps[key] === "string" &&
                    funcProps[key].indexOf("func:") !== -1) {
                    allProps[key] = getFunction({
                        propFunc: funcProps[key],
                        propBody: jsonx.__inline ? jsonx.__inline[key] : "",
                        jsonx,
                        functionProperty: key
                    });
                }
            });
        }
        return allProps;
    }
    /**
     * Returns a resolved object that has React Components pulled from window.__jsonx_custom_elements
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} [options.allProps={}] - merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, asyncprops, windowprops, evalProps, insertedComponents);
     * @returns {Object} resolved object of with React Components from a window property window.__jsonx_custom_elements
     */
    function getWindowComponents(options = { jsonx: {} }) {
        const { allProps, jsonx } = options;
        const windowComponents = jsonx.__windowComponents;
        //@ts-ignore
        const window = this.window || (typeof global$2 !== "undefined" ? global$2 : window).window || {};
        const windowFuncPrefix = "func:window.__jsonx_custom_elements";
        // if (jsonx.hasWindowComponent && window.__jsonx_custom_elements) {
        Object.keys(windowComponents).forEach(key => {
            const windowKEY = typeof windowComponents[key] === "string"
                ? windowComponents[key].replace(`${windowFuncPrefix}.`, "")
                : "";
            if (typeof windowComponents[key] === "string" &&
                windowComponents[key].indexOf(windowFuncPrefix) !== -1 &&
                typeof window.__jsonx_custom_elements[windowKEY] === "function") {
                const windowComponentElement = window.__jsonx_custom_elements[windowKEY];
                const windowComponentProps = allProps["__windowComponentProps"]
                    ? allProps["__windowComponentProps"]
                    : this.props;
                allProps[key] = react.createElement(windowComponentElement, windowComponentProps, null);
            }
        });
        return allProps;
    }
    /**
     * Returns computed properties for React Components and any property that's prefixed with __ is a computedProperty
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} [options.resources={}] - object to use for asyncprops, usually a result of an asynchronous call
     * @param {Number} options.renderIndex - number used for React key prop
     * @param {function} [options.logError=console.error] - error logging function
     * @param {Object} [options.componentLibraries] - react components to render with JSONX
     * @param {Boolean} [options.useReduxState=true] - use redux props in this.props
     * @param {Boolean} [options.ignoreReduxPropsInComponentLibraries=true] - ignore redux props in this.props for component libraries, this is helpful incase these properties collide with component library element properties
     * @param {boolean} [options.debug=false] - use debug messages
     * @example
    const testJSONX = { component: 'div',
      props: { id: 'generatedJSONX', className: 'jsonx' },
      children: [ [Object] ],
      asyncprops: { auth: [Array], username: [Array] },
      __dangerouslyEvalProps: { getUsername: '(user={})=>user.name' },
      __dangerouslyInsertComponents: { myComponent: [Object] }
    const resources = {
      user: {
        name: 'jsonx',
        description: 'react withouth javascript',
      },
      stats: {
        logins: 102,
        comments: 3,
      },
      authentication: 'OAuth2',
    };
    const renderIndex = 1;
    getComputedProps.call({}, {
            jsonx: testJSONX,
            resources,
            renderIndex,
          });
    computedProps = { key: 1,
         id: 'generatedJSONX',
         className: 'jsonx',
         auth: 'OAuth2',
         username: 'jsonx',
         getUsername: [Function],
         myComponent:
          { '$$typeof': Symbol(react.element),
            type: 'p',
            key: '8',
            ref: null,
            props: [Object],
            _owner: null,
            _store: {} } } }
     *
     */
    function getComputedProps(options = {}) {
        // eslint-disable-next-line
        const { jsonx = {}, resources = {}, renderIndex, logError = console.error, useReduxState = true, ignoreReduxPropsInComponentLibraries = true, disableRenderIndexKey = true, debug, componentLibraries = {} } = options;
        try {
            const componentThisProp = jsonx.thisprops
                ? Object.assign({
                    __jsonx: {
                        _component: jsonx,
                        _resources: resources
                    }
                }, this.props, jsonx.props, 
                //@ts-ignore
                useReduxState &&
                    !jsonx.ignoreReduxProps &&
                    ignoreReduxPropsInComponentLibraries &&
                    jsonx.component &&
                    !componentLibraries[jsonx.component]
                    ? this.props && this.props.getState
                        ? this.props.getState()
                        : {}
                    : {})
                : undefined;
            const windowTraverse = typeof window !== "undefined" ? window : {};
            const asyncprops = jsonx.asyncprops
                ? getJSONXProps({
                    jsonx,
                    propName: "asyncprops",
                    traverseObject: resources
                })
                : {};
            const resourceprops = jsonx.resourceprops
                ? getJSONXProps({
                    jsonx,
                    propName: "resourceprops",
                    traverseObject: resources
                })
                : {};
            const windowprops = jsonx.windowprops
                ? getJSONXProps({
                    jsonx,
                    propName: "windowprops",
                    traverseObject: windowTraverse
                })
                : {};
            const thisprops = jsonx.thisprops
                ? getJSONXProps({
                    jsonx,
                    propName: "thisprops",
                    traverseObject: componentThisProp
                })
                : {};
            const thisstate = jsonx.thisstate
                ? getJSONXProps({
                    jsonx,
                    propName: "thisstate",
                    traverseObject: this.state
                })
                : {};
            const thiscontext = jsonx.thiscontext
                ? getJSONXProps({
                    jsonx,
                    propName: "thiscontext",
                    traverseObject: this || {}
                })
                : {};
            //allowing javascript injections
            const evalProps = jsonx.__dangerouslyEvalProps || jsonx.__dangerouslyBindEvalProps
                ? getEvalProps.call(this, { jsonx })
                : {};
            const insertedComponents = jsonx.__dangerouslyInsertComponents
                ? getComponentProps.call(this, { jsonx, resources, debug })
                : {};
            const insertedReactComponents = jsonx.__dangerouslyInsertReactComponents ||
                jsonx.__dangerouslyInsertJSONXComponents
                ? getReactComponentProps.call(this, { jsonx, debug })
                : {};
            const insertedComputedComponents = jsonx.__dangerouslyInsertFunctionComponents ||
                jsonx.__dangerouslyInsertClassComponents
                ? getReactComponents.call(this, { jsonx, debug })
                : {};
            const evalAllProps = jsonx.__dangerouslyEvalAllProps
                ? getEvalProps.call(this, { jsonx })
                : {};
            const allProps = Object.assign({}, this.disableRenderIndexKey || disableRenderIndexKey
                ? {}
                : { key: renderIndex }, jsonx.props, thisprops, thisstate, thiscontext, resourceprops, asyncprops, windowprops, evalProps, insertedComponents, insertedReactComponents, insertedComputedComponents);
            const computedProps = Object.assign({}, allProps, jsonx.__functionProps
                ? getFunctionProps.call(this, { allProps, jsonx })
                : {}, jsonx.__windowComponents
                ? getWindowComponents.call(this, { allProps, jsonx })
                : {}, jsonx.__spreadComponent
                ? getChildrenComponents.call(this, { allProps, jsonx })
                : {}, evalAllProps);
            if (jsonx.debug)
                console.debug({ jsonx, computedProps });
            return computedProps;
        }
        catch (e) {
            debug && logError(e, e.stack ? e.stack : "no stack");
            return null;
        }
    }

    var jsonxProps = /*#__PURE__*/Object.freeze({
        __proto__: null,
        STRIP_COMMENTS: STRIP_COMMENTS,
        ARGUMENT_NAMES: ARGUMENT_NAMES,
        getParamNames: getParamNames,
        getJSONXProps: getJSONXProps,
        getChildrenComponents: getChildrenComponents,
        boundArgsReducer: boundArgsReducer,
        getEvalProps: getEvalProps,
        getComponentProps: getComponentProps,
        getReactComponents: getReactComponents,
        getReactComponentProps: getReactComponentProps,
        getFunctionFromProps: getFunctionFromProps,
        getFunctionProps: getFunctionProps,
        getWindowComponents: getWindowComponents,
        getComputedProps: getComputedProps
    });

    var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global$2 !== 'undefined' ? global$2 : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule$1(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var numeral = createCommonjsModule$1(function (module) {
    /*! @preserve
     * numeral.js
     * version : 2.0.6
     * author : Adam Draper
     * license : MIT
     * http://adamwdraper.github.com/Numeral-js/
     */

    (function (global, factory) {
        if ( module.exports) {
            module.exports = factory();
        } else {
            (typeof global!=="undefined" ? global : window).numeral = factory();
        }
    }(commonjsGlobal$1, function () {
        /************************************
            Variables
        ************************************/

        var numeral,
            _,
            VERSION = '2.0.6',
            formats = {},
            locales = {},
            defaults = {
                currentLocale: 'en',
                zeroFormat: null,
                nullFormat: null,
                defaultFormat: '0,0',
                scalePercentBy100: true
            },
            options = {
                currentLocale: defaults.currentLocale,
                zeroFormat: defaults.zeroFormat,
                nullFormat: defaults.nullFormat,
                defaultFormat: defaults.defaultFormat,
                scalePercentBy100: defaults.scalePercentBy100
            };


        /************************************
            Constructors
        ************************************/

        // Numeral prototype object
        function Numeral(input, number) {
            this._input = input;

            this._value = number;
        }

        numeral = function(input) {
            var value,
                kind,
                unformatFunction,
                regexp;

            if (numeral.isNumeral(input)) {
                value = input.value();
            } else if (input === 0 || typeof input === 'undefined') {
                value = 0;
            } else if (input === null || _.isNaN(input)) {
                value = null;
            } else if (typeof input === 'string') {
                if (options.zeroFormat && input === options.zeroFormat) {
                    value = 0;
                } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {
                    value = null;
                } else {
                    for (kind in formats) {
                        regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;

                        if (regexp && input.match(regexp)) {
                            unformatFunction = formats[kind].unformat;

                            break;
                        }
                    }

                    unformatFunction = unformatFunction || numeral._.stringToNumber;

                    value = unformatFunction(input);
                }
            } else {
                value = Number(input)|| null;
            }

            return new Numeral(input, value);
        };

        // version number
        numeral.version = VERSION;

        // compare numeral object
        numeral.isNumeral = function(obj) {
            return obj instanceof Numeral;
        };

        // helper functions
        numeral._ = _ = {
            // formats numbers separators, decimals places, signs, abbreviations
            numberToFormat: function(value, format, roundingFunction) {
                var locale = locales[numeral.options.currentLocale],
                    negP = false,
                    optDec = false,
                    leadingCount = 0,
                    abbr = '',
                    trillion = 1000000000000,
                    billion = 1000000000,
                    million = 1000000,
                    thousand = 1000,
                    decimal = '',
                    neg = false,
                    abbrForce, // force abbreviation
                    abs,
                    int,
                    precision,
                    signed,
                    thousands,
                    output;

                // make sure we never format a null value
                value = value || 0;

                abs = Math.abs(value);

                // see if we should use parentheses for negative number or if we should prefix with a sign
                // if both are present we default to parentheses
                if (numeral._.includes(format, '(')) {
                    negP = true;
                    format = format.replace(/[\(|\)]/g, '');
                } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {
                    signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;
                    format = format.replace(/[\+|\-]/g, '');
                }

                // see if abbreviation is wanted
                if (numeral._.includes(format, 'a')) {
                    abbrForce = format.match(/a(k|m|b|t)?/);

                    abbrForce = abbrForce ? abbrForce[1] : false;

                    // check for space before abbreviation
                    if (numeral._.includes(format, ' a')) {
                        abbr = ' ';
                    }

                    format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');

                    if (abs >= trillion && !abbrForce || abbrForce === 't') {
                        // trillion
                        abbr += locale.abbreviations.trillion;
                        value = value / trillion;
                    } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {
                        // billion
                        abbr += locale.abbreviations.billion;
                        value = value / billion;
                    } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {
                        // million
                        abbr += locale.abbreviations.million;
                        value = value / million;
                    } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {
                        // thousand
                        abbr += locale.abbreviations.thousand;
                        value = value / thousand;
                    }
                }

                // check for optional decimals
                if (numeral._.includes(format, '[.]')) {
                    optDec = true;
                    format = format.replace('[.]', '.');
                }

                // break number and format
                int = value.toString().split('.')[0];
                precision = format.split('.')[1];
                thousands = format.indexOf(',');
                leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;

                if (precision) {
                    if (numeral._.includes(precision, '[')) {
                        precision = precision.replace(']', '');
                        precision = precision.split('[');
                        decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                    } else {
                        decimal = numeral._.toFixed(value, precision.length, roundingFunction);
                    }

                    int = decimal.split('.')[0];

                    if (numeral._.includes(decimal, '.')) {
                        decimal = locale.delimiters.decimal + decimal.split('.')[1];
                    } else {
                        decimal = '';
                    }

                    if (optDec && Number(decimal.slice(1)) === 0) {
                        decimal = '';
                    }
                } else {
                    int = numeral._.toFixed(value, 0, roundingFunction);
                }

                // check abbreviation again after rounding
                if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {
                    int = String(Number(int) / 1000);

                    switch (abbr) {
                        case locale.abbreviations.thousand:
                            abbr = locale.abbreviations.million;
                            break;
                        case locale.abbreviations.million:
                            abbr = locale.abbreviations.billion;
                            break;
                        case locale.abbreviations.billion:
                            abbr = locale.abbreviations.trillion;
                            break;
                    }
                }


                // format number
                if (numeral._.includes(int, '-')) {
                    int = int.slice(1);
                    neg = true;
                }

                if (int.length < leadingCount) {
                    for (var i = leadingCount - int.length; i > 0; i--) {
                        int = '0' + int;
                    }
                }

                if (thousands > -1) {
                    int = int.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + locale.delimiters.thousands);
                }

                if (format.indexOf('.') === 0) {
                    int = '';
                }

                output = int + decimal + (abbr ? abbr : '');

                if (negP) {
                    output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');
                } else {
                    if (signed >= 0) {
                        output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');
                    } else if (neg) {
                        output = '-' + output;
                    }
                }

                return output;
            },
            // unformats numbers separators, decimals places, signs, abbreviations
            stringToNumber: function(string) {
                var locale = locales[options.currentLocale],
                    stringOriginal = string,
                    abbreviations = {
                        thousand: 3,
                        million: 6,
                        billion: 9,
                        trillion: 12
                    },
                    abbreviation,
                    value,
                    regexp;

                if (options.zeroFormat && string === options.zeroFormat) {
                    value = 0;
                } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {
                    value = null;
                } else {
                    value = 1;

                    if (locale.delimiters.decimal !== '.') {
                        string = string.replace(/\./g, '').replace(locale.delimiters.decimal, '.');
                    }

                    for (abbreviation in abbreviations) {
                        regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\)|(\\' + locale.currency.symbol + ')?(?:\\))?)?$');

                        if (stringOriginal.match(regexp)) {
                            value *= Math.pow(10, abbreviations[abbreviation]);
                            break;
                        }
                    }

                    // check for negative number
                    value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;

                    // remove non numbers
                    string = string.replace(/[^0-9\.]+/g, '');

                    value *= Number(string);
                }

                return value;
            },
            isNaN: function(value) {
                return typeof value === 'number' && isNaN(value);
            },
            includes: function(string, search) {
                return string.indexOf(search) !== -1;
            },
            insert: function(string, subString, start) {
                return string.slice(0, start) + subString + string.slice(start);
            },
            reduce: function(array, callback /*, initialValue*/) {
                if (this === null) {
                    throw new TypeError('Array.prototype.reduce called on null or undefined');
                }

                if (typeof callback !== 'function') {
                    throw new TypeError(callback + ' is not a function');
                }

                var t = Object(array),
                    len = t.length >>> 0,
                    k = 0,
                    value;

                if (arguments.length === 3) {
                    value = arguments[2];
                } else {
                    while (k < len && !(k in t)) {
                        k++;
                    }

                    if (k >= len) {
                        throw new TypeError('Reduce of empty array with no initial value');
                    }

                    value = t[k++];
                }
                for (; k < len; k++) {
                    if (k in t) {
                        value = callback(value, t[k], k, t);
                    }
                }
                return value;
            },
            /**
             * Computes the multiplier necessary to make x >= 1,
             * effectively eliminating miscalculations caused by
             * finite precision.
             */
            multiplier: function (x) {
                var parts = x.toString().split('.');

                return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);
            },
            /**
             * Given a variable number of arguments, returns the maximum
             * multiplier that must be used to normalize an operation involving
             * all of them.
             */
            correctionFactor: function () {
                var args = Array.prototype.slice.call(arguments);

                return args.reduce(function(accum, next) {
                    var mn = _.multiplier(next);
                    return accum > mn ? accum : mn;
                }, 1);
            },
            /**
             * Implementation of toFixed() that treats floats more like decimals
             *
             * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
             * problems for accounting- and finance-related software.
             */
            toFixed: function(value, maxDecimals, roundingFunction, optionals) {
                var splitValue = value.toString().split('.'),
                    minDecimals = maxDecimals - (optionals || 0),
                    boundedPrecision,
                    optionalsRegExp,
                    power,
                    output;

                // Use the smallest precision value possible to avoid errors from floating point representation
                if (splitValue.length === 2) {
                  boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);
                } else {
                  boundedPrecision = minDecimals;
                }

                power = Math.pow(10, boundedPrecision);

                // Multiply up by precision, round accurately, then divide and use native toFixed():
                output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);

                if (optionals > maxDecimals - boundedPrecision) {
                    optionalsRegExp = new RegExp('\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');
                    output = output.replace(optionalsRegExp, '');
                }

                return output;
            }
        };

        // avaliable options
        numeral.options = options;

        // avaliable formats
        numeral.formats = formats;

        // avaliable formats
        numeral.locales = locales;

        // This function sets the current locale.  If
        // no arguments are passed in, it will simply return the current global
        // locale key.
        numeral.locale = function(key) {
            if (key) {
                options.currentLocale = key.toLowerCase();
            }

            return options.currentLocale;
        };

        // This function provides access to the loaded locale data.  If
        // no arguments are passed in, it will simply return the current
        // global locale object.
        numeral.localeData = function(key) {
            if (!key) {
                return locales[options.currentLocale];
            }

            key = key.toLowerCase();

            if (!locales[key]) {
                throw new Error('Unknown locale : ' + key);
            }

            return locales[key];
        };

        numeral.reset = function() {
            for (var property in defaults) {
                options[property] = defaults[property];
            }
        };

        numeral.zeroFormat = function(format) {
            options.zeroFormat = typeof(format) === 'string' ? format : null;
        };

        numeral.nullFormat = function (format) {
            options.nullFormat = typeof(format) === 'string' ? format : null;
        };

        numeral.defaultFormat = function(format) {
            options.defaultFormat = typeof(format) === 'string' ? format : '0.0';
        };

        numeral.register = function(type, name, format) {
            name = name.toLowerCase();

            if (this[type + 's'][name]) {
                throw new TypeError(name + ' ' + type + ' already registered.');
            }

            this[type + 's'][name] = format;

            return format;
        };


        numeral.validate = function(val, culture) {
            var _decimalSep,
                _thousandSep,
                _currSymbol,
                _valArray,
                _abbrObj,
                _thousandRegEx,
                localeData,
                temp;

            //coerce val to string
            if (typeof val !== 'string') {
                val += '';

                if (console.warn) {
                    console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);
                }
            }

            //trim whitespaces from either sides
            val = val.trim();

            //if val is just digits return true
            if (!!val.match(/^\d+$/)) {
                return true;
            }

            //if val is empty return false
            if (val === '') {
                return false;
            }

            //get the decimal and thousands separator from numeral.localeData
            try {
                //check if the culture is understood by numeral. if not, default it to current locale
                localeData = numeral.localeData(culture);
            } catch (e) {
                localeData = numeral.localeData(numeral.locale());
            }

            //setup the delimiters and currency symbol based on culture/locale
            _currSymbol = localeData.currency.symbol;
            _abbrObj = localeData.abbreviations;
            _decimalSep = localeData.delimiters.decimal;
            if (localeData.delimiters.thousands === '.') {
                _thousandSep = '\\.';
            } else {
                _thousandSep = localeData.delimiters.thousands;
            }

            // validating currency symbol
            temp = val.match(/^[^\d]+/);
            if (temp !== null) {
                val = val.substr(1);
                if (temp[0] !== _currSymbol) {
                    return false;
                }
            }

            //validating abbreviation symbol
            temp = val.match(/[^\d]+$/);
            if (temp !== null) {
                val = val.slice(0, -1);
                if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
                    return false;
                }
            }

            _thousandRegEx = new RegExp(_thousandSep + '{2}');

            if (!val.match(/[^\d.,]/g)) {
                _valArray = val.split(_decimalSep);
                if (_valArray.length > 2) {
                    return false;
                } else {
                    if (_valArray.length < 2) {
                        return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));
                    } else {
                        if (_valArray[0].length === 1) {
                            return ( !! _valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                        } else {
                            return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                        }
                    }
                }
            }

            return false;
        };


        /************************************
            Numeral Prototype
        ************************************/

        numeral.fn = Numeral.prototype = {
            clone: function() {
                return numeral(this);
            },
            format: function(inputString, roundingFunction) {
                var value = this._value,
                    format = inputString || options.defaultFormat,
                    kind,
                    output,
                    formatFunction;

                // make sure we have a roundingFunction
                roundingFunction = roundingFunction || Math.round;

                // format based on value
                if (value === 0 && options.zeroFormat !== null) {
                    output = options.zeroFormat;
                } else if (value === null && options.nullFormat !== null) {
                    output = options.nullFormat;
                } else {
                    for (kind in formats) {
                        if (format.match(formats[kind].regexps.format)) {
                            formatFunction = formats[kind].format;

                            break;
                        }
                    }

                    formatFunction = formatFunction || numeral._.numberToFormat;

                    output = formatFunction(value, format, roundingFunction);
                }

                return output;
            },
            value: function() {
                return this._value;
            },
            input: function() {
                return this._input;
            },
            set: function(value) {
                this._value = Number(value);

                return this;
            },
            add: function(value) {
                var corrFactor = _.correctionFactor.call(null, this._value, value);

                function cback(accum, curr, currI, O) {
                    return accum + Math.round(corrFactor * curr);
                }

                this._value = _.reduce([this._value, value], cback, 0) / corrFactor;

                return this;
            },
            subtract: function(value) {
                var corrFactor = _.correctionFactor.call(null, this._value, value);

                function cback(accum, curr, currI, O) {
                    return accum - Math.round(corrFactor * curr);
                }

                this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;

                return this;
            },
            multiply: function(value) {
                function cback(accum, curr, currI, O) {
                    var corrFactor = _.correctionFactor(accum, curr);
                    return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);
                }

                this._value = _.reduce([this._value, value], cback, 1);

                return this;
            },
            divide: function(value) {
                function cback(accum, curr, currI, O) {
                    var corrFactor = _.correctionFactor(accum, curr);
                    return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);
                }

                this._value = _.reduce([this._value, value], cback);

                return this;
            },
            difference: function(value) {
                return Math.abs(numeral(this._value).subtract(value).value());
            }
        };

        /************************************
            Default Locale && Format
        ************************************/

        numeral.register('locale', 'en', {
            delimiters: {
                thousands: ',',
                decimal: '.'
            },
            abbreviations: {
                thousand: 'k',
                million: 'm',
                billion: 'b',
                trillion: 't'
            },
            ordinal: function(number) {
                var b = number % 10;
                return (~~(number % 100 / 10) === 1) ? 'th' :
                    (b === 1) ? 'st' :
                    (b === 2) ? 'nd' :
                    (b === 3) ? 'rd' : 'th';
            },
            currency: {
                symbol: '$'
            }
        });

        

    (function() {
            numeral.register('format', 'bps', {
                regexps: {
                    format: /(BPS)/,
                    unformat: /(BPS)/
                },
                format: function(value, format, roundingFunction) {
                    var space = numeral._.includes(format, ' BPS') ? ' ' : '',
                        output;

                    value = value * 10000;

                    // check for space before BPS
                    format = format.replace(/\s?BPS/, '');

                    output = numeral._.numberToFormat(value, format, roundingFunction);

                    if (numeral._.includes(output, ')')) {
                        output = output.split('');

                        output.splice(-1, 0, space + 'BPS');

                        output = output.join('');
                    } else {
                        output = output + space + 'BPS';
                    }

                    return output;
                },
                unformat: function(string) {
                    return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);
                }
            });
    })();


    (function() {
            var decimal = {
                base: 1000,
                suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
            },
            binary = {
                base: 1024,
                suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
            };

        var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {
                return decimal.suffixes.indexOf(item) < 0;
            }));
            var unformatRegex = allSuffixes.join('|');
            // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)
            unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';

        numeral.register('format', 'bytes', {
            regexps: {
                format: /([0\s]i?b)/,
                unformat: new RegExp(unformatRegex)
            },
            format: function(value, format, roundingFunction) {
                var output,
                    bytes = numeral._.includes(format, 'ib') ? binary : decimal,
                    suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',
                    power,
                    min,
                    max;

                // check for space before
                format = format.replace(/\s?i?b/, '');

                for (power = 0; power <= bytes.suffixes.length; power++) {
                    min = Math.pow(bytes.base, power);
                    max = Math.pow(bytes.base, power + 1);

                    if (value === null || value === 0 || value >= min && value < max) {
                        suffix += bytes.suffixes[power];

                        if (min > 0) {
                            value = value / min;
                        }

                        break;
                    }
                }

                output = numeral._.numberToFormat(value, format, roundingFunction);

                return output + suffix;
            },
            unformat: function(string) {
                var value = numeral._.stringToNumber(string),
                    power,
                    bytesMultiplier;

                if (value) {
                    for (power = decimal.suffixes.length - 1; power >= 0; power--) {
                        if (numeral._.includes(string, decimal.suffixes[power])) {
                            bytesMultiplier = Math.pow(decimal.base, power);

                            break;
                        }

                        if (numeral._.includes(string, binary.suffixes[power])) {
                            bytesMultiplier = Math.pow(binary.base, power);

                            break;
                        }
                    }

                    value *= (bytesMultiplier || 1);
                }

                return value;
            }
        });
    })();


    (function() {
            numeral.register('format', 'currency', {
            regexps: {
                format: /(\$)/
            },
            format: function(value, format, roundingFunction) {
                var locale = numeral.locales[numeral.options.currentLocale],
                    symbols = {
                        before: format.match(/^([\+|\-|\(|\s|\$]*)/)[0],
                        after: format.match(/([\+|\-|\)|\s|\$]*)$/)[0]
                    },
                    output,
                    symbol,
                    i;

                // strip format of spaces and $
                format = format.replace(/\s?\$\s?/, '');

                // format the number
                output = numeral._.numberToFormat(value, format, roundingFunction);

                // update the before and after based on value
                if (value >= 0) {
                    symbols.before = symbols.before.replace(/[\-\(]/, '');
                    symbols.after = symbols.after.replace(/[\-\)]/, '');
                } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {
                    symbols.before = '-' + symbols.before;
                }

                // loop through each before symbol
                for (i = 0; i < symbols.before.length; i++) {
                    symbol = symbols.before[i];

                    switch (symbol) {
                        case '$':
                            output = numeral._.insert(output, locale.currency.symbol, i);
                            break;
                        case ' ':
                            output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);
                            break;
                    }
                }

                // loop through each after symbol
                for (i = symbols.after.length - 1; i >= 0; i--) {
                    symbol = symbols.after[i];

                    switch (symbol) {
                        case '$':
                            output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));
                            break;
                        case ' ':
                            output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));
                            break;
                    }
                }


                return output;
            }
        });
    })();


    (function() {
            numeral.register('format', 'exponential', {
            regexps: {
                format: /(e\+|e-)/,
                unformat: /(e\+|e-)/
            },
            format: function(value, format, roundingFunction) {
                var output,
                    exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',
                    parts = exponential.split('e');

                format = format.replace(/e[\+|\-]{1}0/, '');

                output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);

                return output + 'e' + parts[1];
            },
            unformat: function(string) {
                var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),
                    value = Number(parts[0]),
                    power = Number(parts[1]);

                power = numeral._.includes(string, 'e-') ? power *= -1 : power;

                function cback(accum, curr, currI, O) {
                    var corrFactor = numeral._.correctionFactor(accum, curr),
                        num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);
                    return num;
                }

                return numeral._.reduce([value, Math.pow(10, power)], cback, 1);
            }
        });
    })();


    (function() {
            numeral.register('format', 'ordinal', {
            regexps: {
                format: /(o)/
            },
            format: function(value, format, roundingFunction) {
                var locale = numeral.locales[numeral.options.currentLocale],
                    output,
                    ordinal = numeral._.includes(format, ' o') ? ' ' : '';

                // check for space before
                format = format.replace(/\s?o/, '');

                ordinal += locale.ordinal(value);

                output = numeral._.numberToFormat(value, format, roundingFunction);

                return output + ordinal;
            }
        });
    })();


    (function() {
            numeral.register('format', 'percentage', {
            regexps: {
                format: /(%)/,
                unformat: /(%)/
            },
            format: function(value, format, roundingFunction) {
                var space = numeral._.includes(format, ' %') ? ' ' : '',
                    output;

                if (numeral.options.scalePercentBy100) {
                    value = value * 100;
                }

                // check for space before %
                format = format.replace(/\s?\%/, '');

                output = numeral._.numberToFormat(value, format, roundingFunction);

                if (numeral._.includes(output, ')')) {
                    output = output.split('');

                    output.splice(-1, 0, space + '%');

                    output = output.join('');
                } else {
                    output = output + space + '%';
                }

                return output;
            },
            unformat: function(string) {
                var number = numeral._.stringToNumber(string);
                if (numeral.options.scalePercentBy100) {
                    return number * 0.01;
                }
                return number;
            }
        });
    })();


    (function() {
            numeral.register('format', 'time', {
            regexps: {
                format: /(:)/,
                unformat: /(:)/
            },
            format: function(value, format, roundingFunction) {
                var hours = Math.floor(value / 60 / 60),
                    minutes = Math.floor((value - (hours * 60 * 60)) / 60),
                    seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));

                return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
            },
            unformat: function(string) {
                var timeArray = string.split(':'),
                    seconds = 0;

                // turn hours and minutes into seconds and add them all up
                if (timeArray.length === 3) {
                    // hours
                    seconds = seconds + (Number(timeArray[0]) * 60 * 60);
                    // minutes
                    seconds = seconds + (Number(timeArray[1]) * 60);
                    // seconds
                    seconds = seconds + Number(timeArray[2]);
                } else if (timeArray.length === 2) {
                    // minutes
                    seconds = seconds + (Number(timeArray[0]) * 60);
                    // seconds
                    seconds = seconds + Number(timeArray[1]);
                }
                return Number(seconds);
            }
        });
    })();

    return numeral;
    }));
    });

    // these aren't really private, but nor are they really useful to document

    /**
     * @private
     */
    class LuxonError extends Error {}

    /**
     * @private
     */
    class InvalidDateTimeError extends LuxonError {
      constructor(reason) {
        super(`Invalid DateTime: ${reason.toMessage()}`);
      }
    }

    /**
     * @private
     */
    class InvalidIntervalError extends LuxonError {
      constructor(reason) {
        super(`Invalid Interval: ${reason.toMessage()}`);
      }
    }

    /**
     * @private
     */
    class InvalidDurationError extends LuxonError {
      constructor(reason) {
        super(`Invalid Duration: ${reason.toMessage()}`);
      }
    }

    /**
     * @private
     */
    class ConflictingSpecificationError extends LuxonError {}

    /**
     * @private
     */
    class InvalidUnitError extends LuxonError {
      constructor(unit) {
        super(`Invalid unit ${unit}`);
      }
    }

    /**
     * @private
     */
    class InvalidArgumentError extends LuxonError {}

    /**
     * @private
     */
    class ZoneIsAbstractError extends LuxonError {
      constructor() {
        super("Zone is an abstract class");
      }
    }

    /**
     * @private
     */

    const n = "numeric",
      s = "short",
      l = "long";

    const DATE_SHORT = {
      year: n,
      month: n,
      day: n
    };

    const DATE_MED = {
      year: n,
      month: s,
      day: n
    };

    const DATE_FULL = {
      year: n,
      month: l,
      day: n
    };

    const DATE_HUGE = {
      year: n,
      month: l,
      day: n,
      weekday: l
    };

    const TIME_SIMPLE = {
      hour: n,
      minute: n
    };

    const TIME_WITH_SECONDS = {
      hour: n,
      minute: n,
      second: n
    };

    const TIME_WITH_SHORT_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      timeZoneName: s
    };

    const TIME_WITH_LONG_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      timeZoneName: l
    };

    const TIME_24_SIMPLE = {
      hour: n,
      minute: n,
      hour12: false
    };

    /**
     * {@link toLocaleString}; format like '09:30:23', always 24-hour.
     */
    const TIME_24_WITH_SECONDS = {
      hour: n,
      minute: n,
      second: n,
      hour12: false
    };

    /**
     * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.
     */
    const TIME_24_WITH_SHORT_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      hour12: false,
      timeZoneName: s
    };

    /**
     * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.
     */
    const TIME_24_WITH_LONG_OFFSET = {
      hour: n,
      minute: n,
      second: n,
      hour12: false,
      timeZoneName: l
    };

    /**
     * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     */
    const DATETIME_SHORT = {
      year: n,
      month: n,
      day: n,
      hour: n,
      minute: n
    };

    /**
     * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     */
    const DATETIME_SHORT_WITH_SECONDS = {
      year: n,
      month: n,
      day: n,
      hour: n,
      minute: n,
      second: n
    };

    const DATETIME_MED = {
      year: n,
      month: s,
      day: n,
      hour: n,
      minute: n
    };

    const DATETIME_MED_WITH_SECONDS = {
      year: n,
      month: s,
      day: n,
      hour: n,
      minute: n,
      second: n
    };

    const DATETIME_MED_WITH_WEEKDAY = {
      year: n,
      month: s,
      day: n,
      weekday: s,
      hour: n,
      minute: n
    };

    const DATETIME_FULL = {
      year: n,
      month: l,
      day: n,
      hour: n,
      minute: n,
      timeZoneName: s
    };

    const DATETIME_FULL_WITH_SECONDS = {
      year: n,
      month: l,
      day: n,
      hour: n,
      minute: n,
      second: n,
      timeZoneName: s
    };

    const DATETIME_HUGE = {
      year: n,
      month: l,
      day: n,
      weekday: l,
      hour: n,
      minute: n,
      timeZoneName: l
    };

    const DATETIME_HUGE_WITH_SECONDS = {
      year: n,
      month: l,
      day: n,
      weekday: l,
      hour: n,
      minute: n,
      second: n,
      timeZoneName: l
    };

    /*
      This is just a junk drawer, containing anything used across multiple classes.
      Because Luxon is small(ish), this should stay small and we won't worry about splitting
      it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
    */

    /**
     * @private
     */

    // TYPES

    function isUndefined$1(o) {
      return typeof o === "undefined";
    }

    function isNumber(o) {
      return typeof o === "number";
    }

    function isInteger(o) {
      return typeof o === "number" && o % 1 === 0;
    }

    function isString$1(o) {
      return typeof o === "string";
    }

    function isDate(o) {
      return Object.prototype.toString.call(o) === "[object Date]";
    }

    // CAPABILITIES

    function hasIntl() {
      try {
        return typeof Intl !== "undefined" && Intl.DateTimeFormat;
      } catch (e) {
        return false;
      }
    }

    function hasFormatToParts() {
      return !isUndefined$1(Intl.DateTimeFormat.prototype.formatToParts);
    }

    function hasRelative() {
      try {
        return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
      } catch (e) {
        return false;
      }
    }

    // OBJECTS AND ARRAYS

    function maybeArray(thing) {
      return Array.isArray(thing) ? thing : [thing];
    }

    function bestBy(arr, by, compare) {
      if (arr.length === 0) {
        return undefined;
      }
      return arr.reduce((best, next) => {
        const pair = [by(next), next];
        if (!best) {
          return pair;
        } else if (compare(best[0], pair[0]) === best[0]) {
          return best;
        } else {
          return pair;
        }
      }, null)[1];
    }

    function pick(obj, keys) {
      return keys.reduce((a, k) => {
        a[k] = obj[k];
        return a;
      }, {});
    }

    function hasOwnProperty$1(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    // NUMBERS AND STRINGS

    function integerBetween(thing, bottom, top) {
      return isInteger(thing) && thing >= bottom && thing <= top;
    }

    // x % n but takes the sign of n instead of x
    function floorMod(x, n) {
      return x - n * Math.floor(x / n);
    }

    function padStart(input, n = 2) {
      if (input.toString().length < n) {
        return ("0".repeat(n) + input).slice(-n);
      } else {
        return input.toString();
      }
    }

    function parseInteger(string) {
      if (isUndefined$1(string) || string === null || string === "") {
        return undefined;
      } else {
        return parseInt(string, 10);
      }
    }

    function parseMillis(fraction) {
      // Return undefined (instead of 0) in these cases, where fraction is not set
      if (isUndefined$1(fraction) || fraction === null || fraction === "") {
        return undefined;
      } else {
        const f = parseFloat("0." + fraction) * 1000;
        return Math.floor(f);
      }
    }

    function roundTo(number, digits, towardZero = false) {
      const factor = 10 ** digits,
        rounder = towardZero ? Math.trunc : Math.round;
      return rounder(number * factor) / factor;
    }

    // DATE BASICS

    function isLeapYear(year) {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }

    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }

    function daysInMonth(year, month) {
      const modMonth = floorMod(month - 1, 12) + 1,
        modYear = year + (month - modMonth) / 12;

      if (modMonth === 2) {
        return isLeapYear(modYear) ? 29 : 28;
      } else {
        return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
      }
    }

    // covert a calendar object to a local timestamp (epoch, but with the offset baked in)
    function objToLocalTS(obj) {
      let d = Date.UTC(
        obj.year,
        obj.month - 1,
        obj.day,
        obj.hour,
        obj.minute,
        obj.second,
        obj.millisecond
      );

      // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
      if (obj.year < 100 && obj.year >= 0) {
        d = new Date(d);
        d.setUTCFullYear(d.getUTCFullYear() - 1900);
      }
      return +d;
    }

    function weeksInWeekYear(weekYear) {
      const p1 =
          (weekYear +
            Math.floor(weekYear / 4) -
            Math.floor(weekYear / 100) +
            Math.floor(weekYear / 400)) %
          7,
        last = weekYear - 1,
        p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
      return p1 === 4 || p2 === 3 ? 53 : 52;
    }

    function untruncateYear(year) {
      if (year > 99) {
        return year;
      } else return year > 60 ? 1900 + year : 2000 + year;
    }

    // PARSING

    function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
      const date = new Date(ts),
        intlOpts = {
          hour12: false,
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit"
        };

      if (timeZone) {
        intlOpts.timeZone = timeZone;
      }

      const modified = Object.assign({ timeZoneName: offsetFormat }, intlOpts),
        intl = hasIntl();

      if (intl && hasFormatToParts()) {
        const parsed = new Intl.DateTimeFormat(locale, modified)
          .formatToParts(date)
          .find(m => m.type.toLowerCase() === "timezonename");
        return parsed ? parsed.value : null;
      } else if (intl) {
        // this probably doesn't work for all locales
        const without = new Intl.DateTimeFormat(locale, intlOpts).format(date),
          included = new Intl.DateTimeFormat(locale, modified).format(date),
          diffed = included.substring(without.length),
          trimmed = diffed.replace(/^[, \u200e]+/, "");
        return trimmed;
      } else {
        return null;
      }
    }

    // signedOffset('-5', '30') -> -330
    function signedOffset(offHourStr, offMinuteStr) {
      let offHour = parseInt(offHourStr, 10);

      // don't || this because we want to preserve -0
      if (Number.isNaN(offHour)) {
        offHour = 0;
      }

      const offMin = parseInt(offMinuteStr, 10) || 0,
        offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
      return offHour * 60 + offMinSigned;
    }

    // COERCION

    function asNumber(value) {
      const numericValue = Number(value);
      if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
        throw new InvalidArgumentError(`Invalid unit value ${value}`);
      return numericValue;
    }

    function normalizeObject(obj, normalizer, nonUnitKeys) {
      const normalized = {};
      for (const u in obj) {
        if (hasOwnProperty$1(obj, u)) {
          if (nonUnitKeys.indexOf(u) >= 0) continue;
          const v = obj[u];
          if (v === undefined || v === null) continue;
          normalized[normalizer(u)] = asNumber(v);
        }
      }
      return normalized;
    }

    function formatOffset(offset, format) {
      const hours = Math.trunc(offset / 60),
        minutes = Math.abs(offset % 60),
        sign = hours >= 0 && !Object.is(hours, -0) ? "+" : "-",
        base = `${sign}${Math.abs(hours)}`;

      switch (format) {
        case "short":
          return `${sign}${padStart(Math.abs(hours), 2)}:${padStart(minutes, 2)}`;
        case "narrow":
          return minutes > 0 ? `${base}:${minutes}` : base;
        case "techie":
          return `${sign}${padStart(Math.abs(hours), 2)}${padStart(minutes, 2)}`;
        default:
          throw new RangeError(`Value format ${format} is out of range for property format`);
      }
    }

    function timeObject(obj) {
      return pick(obj, ["hour", "minute", "second", "millisecond"]);
    }

    const ianaRegex = /[A-Za-z_+-]{1,256}(:?\/[A-Za-z_+-]{1,256}(\/[A-Za-z_+-]{1,256})?)?/;

    function stringify(obj) {
      return JSON.stringify(obj, Object.keys(obj).sort());
    }

    /**
     * @private
     */

    const monthsLong = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ];

    const monthsShort = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];

    const monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];

    function months(length) {
      switch (length) {
        case "narrow":
          return monthsNarrow;
        case "short":
          return monthsShort;
        case "long":
          return monthsLong;
        case "numeric":
          return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
        case "2-digit":
          return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
        default:
          return null;
      }
    }

    const weekdaysLong = [
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
      "Sunday"
    ];

    const weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];

    const weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];

    function weekdays(length) {
      switch (length) {
        case "narrow":
          return weekdaysNarrow;
        case "short":
          return weekdaysShort;
        case "long":
          return weekdaysLong;
        case "numeric":
          return ["1", "2", "3", "4", "5", "6", "7"];
        default:
          return null;
      }
    }

    const meridiems = ["AM", "PM"];

    const erasLong = ["Before Christ", "Anno Domini"];

    const erasShort = ["BC", "AD"];

    const erasNarrow = ["B", "A"];

    function eras(length) {
      switch (length) {
        case "narrow":
          return erasNarrow;
        case "short":
          return erasShort;
        case "long":
          return erasLong;
        default:
          return null;
      }
    }

    function meridiemForDateTime(dt) {
      return meridiems[dt.hour < 12 ? 0 : 1];
    }

    function weekdayForDateTime(dt, length) {
      return weekdays(length)[dt.weekday - 1];
    }

    function monthForDateTime(dt, length) {
      return months(length)[dt.month - 1];
    }

    function eraForDateTime(dt, length) {
      return eras(length)[dt.year < 0 ? 0 : 1];
    }

    function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
      const units = {
        years: ["year", "yr."],
        quarters: ["quarter", "qtr."],
        months: ["month", "mo."],
        weeks: ["week", "wk."],
        days: ["day", "day", "days"],
        hours: ["hour", "hr."],
        minutes: ["minute", "min."],
        seconds: ["second", "sec."]
      };

      const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;

      if (numeric === "auto" && lastable) {
        const isDay = unit === "days";
        switch (count) {
          case 1:
            return isDay ? "tomorrow" : `next ${units[unit][0]}`;
          case -1:
            return isDay ? "yesterday" : `last ${units[unit][0]}`;
          case 0:
            return isDay ? "today" : `this ${units[unit][0]}`;
        }
      }

      const isInPast = Object.is(count, -0) || count < 0,
        fmtValue = Math.abs(count),
        singular = fmtValue === 1,
        lilUnits = units[unit],
        fmtUnit = narrow
          ? singular
            ? lilUnits[1]
            : lilUnits[2] || lilUnits[1]
          : singular
            ? units[unit][0]
            : unit;
      return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
    }

    function formatString(knownFormat) {
      // these all have the offsets removed because we don't have access to them
      // without all the intl stuff this is backfilling
      const filtered = pick(knownFormat, [
          "weekday",
          "era",
          "year",
          "month",
          "day",
          "hour",
          "minute",
          "second",
          "timeZoneName",
          "hour12"
        ]),
        key = stringify(filtered),
        dateTimeHuge = "EEEE, LLLL d, yyyy, h:mm a";
      switch (key) {
        case stringify(DATE_SHORT):
          return "M/d/yyyy";
        case stringify(DATE_MED):
          return "LLL d, yyyy";
        case stringify(DATE_FULL):
          return "LLLL d, yyyy";
        case stringify(DATE_HUGE):
          return "EEEE, LLLL d, yyyy";
        case stringify(TIME_SIMPLE):
          return "h:mm a";
        case stringify(TIME_WITH_SECONDS):
          return "h:mm:ss a";
        case stringify(TIME_WITH_SHORT_OFFSET):
          return "h:mm a";
        case stringify(TIME_WITH_LONG_OFFSET):
          return "h:mm a";
        case stringify(TIME_24_SIMPLE):
          return "HH:mm";
        case stringify(TIME_24_WITH_SECONDS):
          return "HH:mm:ss";
        case stringify(TIME_24_WITH_SHORT_OFFSET):
          return "HH:mm";
        case stringify(TIME_24_WITH_LONG_OFFSET):
          return "HH:mm";
        case stringify(DATETIME_SHORT):
          return "M/d/yyyy, h:mm a";
        case stringify(DATETIME_MED):
          return "LLL d, yyyy, h:mm a";
        case stringify(DATETIME_FULL):
          return "LLLL d, yyyy, h:mm a";
        case stringify(DATETIME_HUGE):
          return dateTimeHuge;
        case stringify(DATETIME_SHORT_WITH_SECONDS):
          return "M/d/yyyy, h:mm:ss a";
        case stringify(DATETIME_MED_WITH_SECONDS):
          return "LLL d, yyyy, h:mm:ss a";
        case stringify(DATETIME_MED_WITH_WEEKDAY):
          return "EEE, d LLL yyyy, h:mm a";
        case stringify(DATETIME_FULL_WITH_SECONDS):
          return "LLLL d, yyyy, h:mm:ss a";
        case stringify(DATETIME_HUGE_WITH_SECONDS):
          return "EEEE, LLLL d, yyyy, h:mm:ss a";
        default:
          return dateTimeHuge;
      }
    }

    function stringifyTokens(splits, tokenToString) {
      let s = "";
      for (const token of splits) {
        if (token.literal) {
          s += token.val;
        } else {
          s += tokenToString(token.val);
        }
      }
      return s;
    }

    const macroTokenToFormatOpts = {
      D: DATE_SHORT,
      DD: DATE_MED,
      DDD: DATE_FULL,
      DDDD: DATE_HUGE,
      t: TIME_SIMPLE,
      tt: TIME_WITH_SECONDS,
      ttt: TIME_WITH_SHORT_OFFSET,
      tttt: TIME_WITH_LONG_OFFSET,
      T: TIME_24_SIMPLE,
      TT: TIME_24_WITH_SECONDS,
      TTT: TIME_24_WITH_SHORT_OFFSET,
      TTTT: TIME_24_WITH_LONG_OFFSET,
      f: DATETIME_SHORT,
      ff: DATETIME_MED,
      fff: DATETIME_FULL,
      ffff: DATETIME_HUGE,
      F: DATETIME_SHORT_WITH_SECONDS,
      FF: DATETIME_MED_WITH_SECONDS,
      FFF: DATETIME_FULL_WITH_SECONDS,
      FFFF: DATETIME_HUGE_WITH_SECONDS
    };

    /**
     * @private
     */

    class Formatter {
      static create(locale, opts = {}) {
        return new Formatter(locale, opts);
      }

      static parseFormat(fmt) {
        let current = null,
          currentFull = "",
          bracketed = false;
        const splits = [];
        for (let i = 0; i < fmt.length; i++) {
          const c = fmt.charAt(i);
          if (c === "'") {
            if (currentFull.length > 0) {
              splits.push({ literal: bracketed, val: currentFull });
            }
            current = null;
            currentFull = "";
            bracketed = !bracketed;
          } else if (bracketed) {
            currentFull += c;
          } else if (c === current) {
            currentFull += c;
          } else {
            if (currentFull.length > 0) {
              splits.push({ literal: false, val: currentFull });
            }
            currentFull = c;
            current = c;
          }
        }

        if (currentFull.length > 0) {
          splits.push({ literal: bracketed, val: currentFull });
        }

        return splits;
      }

      static macroTokenToFormatOpts(token) {
        return macroTokenToFormatOpts[token];
      }

      constructor(locale, formatOpts) {
        this.opts = formatOpts;
        this.loc = locale;
        this.systemLoc = null;
      }

      formatWithSystemDefault(dt, opts) {
        if (this.systemLoc === null) {
          this.systemLoc = this.loc.redefaultToSystem();
        }
        const df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));
        return df.format();
      }

      formatDateTime(dt, opts = {}) {
        const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
        return df.format();
      }

      formatDateTimeParts(dt, opts = {}) {
        const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
        return df.formatToParts();
      }

      resolvedOptions(dt, opts = {}) {
        const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));
        return df.resolvedOptions();
      }

      num(n, p = 0) {
        // we get some perf out of doing this here, annoyingly
        if (this.opts.forceSimple) {
          return padStart(n, p);
        }

        const opts = Object.assign({}, this.opts);

        if (p > 0) {
          opts.padTo = p;
        }

        return this.loc.numberFormatter(opts).format(n);
      }

      formatDateTimeFromString(dt, fmt) {
        const knownEnglish = this.loc.listingMode() === "en",
          useDateTimeFormatter =
            this.loc.outputCalendar && this.loc.outputCalendar !== "gregory" && hasFormatToParts(),
          string = (opts, extract) => this.loc.extract(dt, opts, extract),
          formatOffset = opts => {
            if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
              return "Z";
            }

            return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
          },
          meridiem = () =>
            knownEnglish
              ? meridiemForDateTime(dt)
              : string({ hour: "numeric", hour12: true }, "dayperiod"),
          month = (length, standalone) =>
            knownEnglish
              ? monthForDateTime(dt, length)
              : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"),
          weekday = (length, standalone) =>
            knownEnglish
              ? weekdayForDateTime(dt, length)
              : string(
                  standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
                  "weekday"
                ),
          maybeMacro = token => {
            const formatOpts = Formatter.macroTokenToFormatOpts(token);
            if (formatOpts) {
              return this.formatWithSystemDefault(dt, formatOpts);
            } else {
              return token;
            }
          },
          era = length =>
            knownEnglish ? eraForDateTime(dt, length) : string({ era: length }, "era"),
          tokenToString = token => {
            // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles
            switch (token) {
              // ms
              case "S":
                return this.num(dt.millisecond);
              case "u":
              // falls through
              case "SSS":
                return this.num(dt.millisecond, 3);
              // seconds
              case "s":
                return this.num(dt.second);
              case "ss":
                return this.num(dt.second, 2);
              // minutes
              case "m":
                return this.num(dt.minute);
              case "mm":
                return this.num(dt.minute, 2);
              // hours
              case "h":
                return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
              case "hh":
                return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
              case "H":
                return this.num(dt.hour);
              case "HH":
                return this.num(dt.hour, 2);
              // offset
              case "Z":
                // like +6
                return formatOffset({ format: "narrow", allowZ: this.opts.allowZ });
              case "ZZ":
                // like +06:00
                return formatOffset({ format: "short", allowZ: this.opts.allowZ });
              case "ZZZ":
                // like +0600
                return formatOffset({ format: "techie", allowZ: this.opts.allowZ });
              case "ZZZZ":
                // like EST
                return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
              case "ZZZZZ":
                // like Eastern Standard Time
                return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
              // zone
              case "z":
                // like America/New_York
                return dt.zoneName;
              // meridiems
              case "a":
                return meridiem();
              // dates
              case "d":
                return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt.day);
              case "dd":
                return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt.day, 2);
              // weekdays - standalone
              case "c":
                // like 1
                return this.num(dt.weekday);
              case "ccc":
                // like 'Tues'
                return weekday("short", true);
              case "cccc":
                // like 'Tuesday'
                return weekday("long", true);
              case "ccccc":
                // like 'T'
                return weekday("narrow", true);
              // weekdays - format
              case "E":
                // like 1
                return this.num(dt.weekday);
              case "EEE":
                // like 'Tues'
                return weekday("short", false);
              case "EEEE":
                // like 'Tuesday'
                return weekday("long", false);
              case "EEEEE":
                // like 'T'
                return weekday("narrow", false);
              // months - standalone
              case "L":
                // like 1
                return useDateTimeFormatter
                  ? string({ month: "numeric", day: "numeric" }, "month")
                  : this.num(dt.month);
              case "LL":
                // like 01, doesn't seem to work
                return useDateTimeFormatter
                  ? string({ month: "2-digit", day: "numeric" }, "month")
                  : this.num(dt.month, 2);
              case "LLL":
                // like Jan
                return month("short", true);
              case "LLLL":
                // like January
                return month("long", true);
              case "LLLLL":
                // like J
                return month("narrow", true);
              // months - format
              case "M":
                // like 1
                return useDateTimeFormatter
                  ? string({ month: "numeric" }, "month")
                  : this.num(dt.month);
              case "MM":
                // like 01
                return useDateTimeFormatter
                  ? string({ month: "2-digit" }, "month")
                  : this.num(dt.month, 2);
              case "MMM":
                // like Jan
                return month("short", false);
              case "MMMM":
                // like January
                return month("long", false);
              case "MMMMM":
                // like J
                return month("narrow", false);
              // years
              case "y":
                // like 2014
                return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt.year);
              case "yy":
                // like 14
                return useDateTimeFormatter
                  ? string({ year: "2-digit" }, "year")
                  : this.num(dt.year.toString().slice(-2), 2);
              case "yyyy":
                // like 0012
                return useDateTimeFormatter
                  ? string({ year: "numeric" }, "year")
                  : this.num(dt.year, 4);
              case "yyyyyy":
                // like 000012
                return useDateTimeFormatter
                  ? string({ year: "numeric" }, "year")
                  : this.num(dt.year, 6);
              // eras
              case "G":
                // like AD
                return era("short");
              case "GG":
                // like Anno Domini
                return era("long");
              case "GGGGG":
                return era("narrow");
              case "kk":
                return this.num(dt.weekYear.toString().slice(-2), 2);
              case "kkkk":
                return this.num(dt.weekYear, 4);
              case "W":
                return this.num(dt.weekNumber);
              case "WW":
                return this.num(dt.weekNumber, 2);
              case "o":
                return this.num(dt.ordinal);
              case "ooo":
                return this.num(dt.ordinal, 3);
              case "q":
                // like 1
                return this.num(dt.quarter);
              case "qq":
                // like 01
                return this.num(dt.quarter, 2);
              case "X":
                return this.num(Math.floor(dt.ts / 1000));
              case "x":
                return this.num(dt.ts);
              default:
                return maybeMacro(token);
            }
          };

        return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
      }

      formatDurationFromString(dur, fmt) {
        const tokenToField = token => {
            switch (token[0]) {
              case "S":
                return "millisecond";
              case "s":
                return "second";
              case "m":
                return "minute";
              case "h":
                return "hour";
              case "d":
                return "day";
              case "M":
                return "month";
              case "y":
                return "year";
              default:
                return null;
            }
          },
          tokenToString = lildur => token => {
            const mapped = tokenToField(token);
            if (mapped) {
              return this.num(lildur.get(mapped), token.length);
            } else {
              return token;
            }
          },
          tokens = Formatter.parseFormat(fmt),
          realTokens = tokens.reduce(
            (found, { literal, val }) => (literal ? found : found.concat(val)),
            []
          ),
          collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));
        return stringifyTokens(tokens, tokenToString(collapsed));
      }
    }

    class Invalid {
      constructor(reason, explanation) {
        this.reason = reason;
        this.explanation = explanation;
      }

      toMessage() {
        if (this.explanation) {
          return `${this.reason}: ${this.explanation}`;
        } else {
          return this.reason;
        }
      }
    }

    /* eslint no-unused-vars: "off" */

    /**
     * @interface
     */
    class Zone {
      /**
       * The type of zone
       * @abstract
       * @type {string}
       */
      get type() {
        throw new ZoneIsAbstractError();
      }

      /**
       * The name of this zone.
       * @abstract
       * @type {string}
       */
      get name() {
        throw new ZoneIsAbstractError();
      }

      /**
       * Returns whether the offset is known to be fixed for the whole year.
       * @abstract
       * @type {boolean}
       */
      get universal() {
        throw new ZoneIsAbstractError();
      }

      /**
       * Returns the offset's common name (such as EST) at the specified timestamp
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to get the name
       * @param {Object} opts - Options to affect the format
       * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
       * @param {string} opts.locale - What locale to return the offset name in.
       * @return {string}
       */
      offsetName(ts, opts) {
        throw new ZoneIsAbstractError();
      }

      /**
       * Returns the offset's value as a string
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to get the offset
       * @param {string} format - What style of offset to return.
       *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
       * @return {string}
       */
      formatOffset(ts, format) {
        throw new ZoneIsAbstractError();
      }

      /**
       * Return the offset in minutes for this zone at the specified timestamp.
       * @abstract
       * @param {number} ts - Epoch milliseconds for which to compute the offset
       * @return {number}
       */
      offset(ts) {
        throw new ZoneIsAbstractError();
      }

      /**
       * Return whether this Zone is equal to another zone
       * @abstract
       * @param {Zone} otherZone - the zone to compare
       * @return {boolean}
       */
      equals(otherZone) {
        throw new ZoneIsAbstractError();
      }

      /**
       * Return whether this Zone is valid.
       * @abstract
       * @type {boolean}
       */
      get isValid() {
        throw new ZoneIsAbstractError();
      }
    }

    let singleton = null;

    /**
     * Represents the local zone for this Javascript environment.
     * @implements {Zone}
     */
    class LocalZone extends Zone {
      /**
       * Get a singleton instance of the local zone
       * @return {LocalZone}
       */
      static get instance() {
        if (singleton === null) {
          singleton = new LocalZone();
        }
        return singleton;
      }

      /** @override **/
      get type() {
        return "local";
      }

      /** @override **/
      get name() {
        if (hasIntl()) {
          return new Intl.DateTimeFormat().resolvedOptions().timeZone;
        } else return "local";
      }

      /** @override **/
      get universal() {
        return false;
      }

      /** @override **/
      offsetName(ts, { format, locale }) {
        return parseZoneInfo(ts, format, locale);
      }

      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.offset(ts), format);
      }

      /** @override **/
      offset(ts) {
        return -new Date(ts).getTimezoneOffset();
      }

      /** @override **/
      equals(otherZone) {
        return otherZone.type === "local";
      }

      /** @override **/
      get isValid() {
        return true;
      }
    }

    const matchingRegex = RegExp(`^${ianaRegex.source}$`);

    let dtfCache = {};
    function makeDTF(zone) {
      if (!dtfCache[zone]) {
        dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
          hour12: false,
          timeZone: zone,
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit"
        });
      }
      return dtfCache[zone];
    }

    const typeToPos = {
      year: 0,
      month: 1,
      day: 2,
      hour: 3,
      minute: 4,
      second: 5
    };

    function hackyOffset(dtf, date) {
      const formatted = dtf.format(date).replace(/\u200E/g, ""),
        parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted),
        [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;
      return [fYear, fMonth, fDay, fHour, fMinute, fSecond];
    }

    function partsOffset(dtf, date) {
      const formatted = dtf.formatToParts(date),
        filled = [];
      for (let i = 0; i < formatted.length; i++) {
        const { type, value } = formatted[i],
          pos = typeToPos[type];

        if (!isUndefined$1(pos)) {
          filled[pos] = parseInt(value, 10);
        }
      }
      return filled;
    }

    let ianaZoneCache = {};
    /**
     * A zone identified by an IANA identifier, like America/New_York
     * @implements {Zone}
     */
    class IANAZone extends Zone {
      /**
       * @param {string} name - Zone name
       * @return {IANAZone}
       */
      static create(name) {
        if (!ianaZoneCache[name]) {
          ianaZoneCache[name] = new IANAZone(name);
        }
        return ianaZoneCache[name];
      }

      /**
       * Reset local caches. Should only be necessary in testing scenarios.
       * @return {void}
       */
      static resetCache() {
        ianaZoneCache = {};
        dtfCache = {};
      }

      /**
       * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
       * @param {string} s - The string to check validity on
       * @example IANAZone.isValidSpecifier("America/New_York") //=> true
       * @example IANAZone.isValidSpecifier("Fantasia/Castle") //=> true
       * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
       * @return {boolean}
       */
      static isValidSpecifier(s) {
        return !!(s && s.match(matchingRegex));
      }

      /**
       * Returns whether the provided string identifies a real zone
       * @param {string} zone - The string to check
       * @example IANAZone.isValidZone("America/New_York") //=> true
       * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
       * @example IANAZone.isValidZone("Sport~~blorp") //=> false
       * @return {boolean}
       */
      static isValidZone(zone) {
        try {
          new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
          return true;
        } catch (e) {
          return false;
        }
      }

      // Etc/GMT+8 -> -480
      /** @ignore */
      static parseGMTOffset(specifier) {
        if (specifier) {
          const match = specifier.match(/^Etc\/GMT([+-]\d{1,2})$/i);
          if (match) {
            return -60 * parseInt(match[1]);
          }
        }
        return null;
      }

      constructor(name) {
        super();
        /** @private **/
        this.zoneName = name;
        /** @private **/
        this.valid = IANAZone.isValidZone(name);
      }

      /** @override **/
      get type() {
        return "iana";
      }

      /** @override **/
      get name() {
        return this.zoneName;
      }

      /** @override **/
      get universal() {
        return false;
      }

      /** @override **/
      offsetName(ts, { format, locale }) {
        return parseZoneInfo(ts, format, locale, this.name);
      }

      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.offset(ts), format);
      }

      /** @override **/
      offset(ts) {
        const date = new Date(ts),
          dtf = makeDTF(this.name),
          [year, month, day, hour, minute, second] = dtf.formatToParts
            ? partsOffset(dtf, date)
            : hackyOffset(dtf, date),
          // work around https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
          adjustedHour = hour === 24 ? 0 : hour;

        const asUTC = objToLocalTS({
          year,
          month,
          day,
          hour: adjustedHour,
          minute,
          second,
          millisecond: 0
        });

        let asTS = +date;
        const over = asTS % 1000;
        asTS -= over >= 0 ? over : 1000 + over;
        return (asUTC - asTS) / (60 * 1000);
      }

      /** @override **/
      equals(otherZone) {
        return otherZone.type === "iana" && otherZone.name === this.name;
      }

      /** @override **/
      get isValid() {
        return this.valid;
      }
    }

    let singleton$1 = null;

    /**
     * A zone with a fixed offset (meaning no DST)
     * @implements {Zone}
     */
    class FixedOffsetZone extends Zone {
      /**
       * Get a singleton instance of UTC
       * @return {FixedOffsetZone}
       */
      static get utcInstance() {
        if (singleton$1 === null) {
          singleton$1 = new FixedOffsetZone(0);
        }
        return singleton$1;
      }

      /**
       * Get an instance with a specified offset
       * @param {number} offset - The offset in minutes
       * @return {FixedOffsetZone}
       */
      static instance(offset) {
        return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
      }

      /**
       * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
       * @param {string} s - The offset string to parse
       * @example FixedOffsetZone.parseSpecifier("UTC+6")
       * @example FixedOffsetZone.parseSpecifier("UTC+06")
       * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
       * @return {FixedOffsetZone}
       */
      static parseSpecifier(s) {
        if (s) {
          const r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
          if (r) {
            return new FixedOffsetZone(signedOffset(r[1], r[2]));
          }
        }
        return null;
      }

      constructor(offset) {
        super();
        /** @private **/
        this.fixed = offset;
      }

      /** @override **/
      get type() {
        return "fixed";
      }

      /** @override **/
      get name() {
        return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
      }

      /** @override **/
      offsetName() {
        return this.name;
      }

      /** @override **/
      formatOffset(ts, format) {
        return formatOffset(this.fixed, format);
      }

      /** @override **/
      get universal() {
        return true;
      }

      /** @override **/
      offset() {
        return this.fixed;
      }

      /** @override **/
      equals(otherZone) {
        return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
      }

      /** @override **/
      get isValid() {
        return true;
      }
    }

    /**
     * A zone that failed to parse. You should never need to instantiate this.
     * @implements {Zone}
     */
    class InvalidZone extends Zone {
      constructor(zoneName) {
        super();
        /**  @private */
        this.zoneName = zoneName;
      }

      /** @override **/
      get type() {
        return "invalid";
      }

      /** @override **/
      get name() {
        return this.zoneName;
      }

      /** @override **/
      get universal() {
        return false;
      }

      /** @override **/
      offsetName() {
        return null;
      }

      /** @override **/
      formatOffset() {
        return "";
      }

      /** @override **/
      offset() {
        return NaN;
      }

      /** @override **/
      equals() {
        return false;
      }

      /** @override **/
      get isValid() {
        return false;
      }
    }

    /**
     * @private
     */

    function normalizeZone(input, defaultZone) {
      let offset;
      if (isUndefined$1(input) || input === null) {
        return defaultZone;
      } else if (input instanceof Zone) {
        return input;
      } else if (isString$1(input)) {
        const lowered = input.toLowerCase();
        if (lowered === "local") return defaultZone;
        else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
        else if ((offset = IANAZone.parseGMTOffset(input)) != null) {
          // handle Etc/GMT-4, which V8 chokes on
          return FixedOffsetZone.instance(offset);
        } else if (IANAZone.isValidSpecifier(lowered)) return IANAZone.create(input);
        else return FixedOffsetZone.parseSpecifier(lowered) || new InvalidZone(input);
      } else if (isNumber(input)) {
        return FixedOffsetZone.instance(input);
      } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
        // This is dumb, but the instanceof check above doesn't seem to really work
        // so we're duck checking it
        return input;
      } else {
        return new InvalidZone(input);
      }
    }

    let now = () => Date.now(),
      defaultZone = null, // not setting this directly to LocalZone.instance bc loading order issues
      defaultLocale = null,
      defaultNumberingSystem = null,
      defaultOutputCalendar = null,
      throwOnInvalid = false;

    /**
     * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
     */
    class Settings {
      /**
       * Get the callback for returning the current timestamp.
       * @type {function}
       */
      static get now() {
        return now;
      }

      /**
       * Set the callback for returning the current timestamp.
       * The function should return a number, which will be interpreted as an Epoch millisecond count
       * @type {function}
       * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
       * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
       */
      static set now(n) {
        now = n;
      }

      /**
       * Get the default time zone to create DateTimes in.
       * @type {string}
       */
      static get defaultZoneName() {
        return Settings.defaultZone.name;
      }

      /**
       * Set the default time zone to create DateTimes in. Does not affect existing instances.
       * @type {string}
       */
      static set defaultZoneName(z) {
        if (!z) {
          defaultZone = null;
        } else {
          defaultZone = normalizeZone(z);
        }
      }

      /**
       * Get the default time zone object to create DateTimes in. Does not affect existing instances.
       * @type {Zone}
       */
      static get defaultZone() {
        return defaultZone || LocalZone.instance;
      }

      /**
       * Get the default locale to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultLocale() {
        return defaultLocale;
      }

      /**
       * Set the default locale to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultLocale(locale) {
        defaultLocale = locale;
      }

      /**
       * Get the default numbering system to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultNumberingSystem() {
        return defaultNumberingSystem;
      }

      /**
       * Set the default numbering system to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultNumberingSystem(numberingSystem) {
        defaultNumberingSystem = numberingSystem;
      }

      /**
       * Get the default output calendar to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static get defaultOutputCalendar() {
        return defaultOutputCalendar;
      }

      /**
       * Set the default output calendar to create DateTimes with. Does not affect existing instances.
       * @type {string}
       */
      static set defaultOutputCalendar(outputCalendar) {
        defaultOutputCalendar = outputCalendar;
      }

      /**
       * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
       * @type {boolean}
       */
      static get throwOnInvalid() {
        return throwOnInvalid;
      }

      /**
       * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
       * @type {boolean}
       */
      static set throwOnInvalid(t) {
        throwOnInvalid = t;
      }

      /**
       * Reset Luxon's global caches. Should only be necessary in testing scenarios.
       * @return {void}
       */
      static resetCaches() {
        Locale.resetCache();
        IANAZone.resetCache();
      }
    }

    let intlDTCache = {};
    function getCachedDTF(locString, opts = {}) {
      const key = JSON.stringify([locString, opts]);
      let dtf = intlDTCache[key];
      if (!dtf) {
        dtf = new Intl.DateTimeFormat(locString, opts);
        intlDTCache[key] = dtf;
      }
      return dtf;
    }

    let intlNumCache = {};
    function getCachedINF(locString, opts = {}) {
      const key = JSON.stringify([locString, opts]);
      let inf = intlNumCache[key];
      if (!inf) {
        inf = new Intl.NumberFormat(locString, opts);
        intlNumCache[key] = inf;
      }
      return inf;
    }

    let intlRelCache = {};
    function getCachedRTF(locString, opts = {}) {
      const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options
      const key = JSON.stringify([locString, cacheKeyOpts]);
      let inf = intlRelCache[key];
      if (!inf) {
        inf = new Intl.RelativeTimeFormat(locString, opts);
        intlRelCache[key] = inf;
      }
      return inf;
    }

    let sysLocaleCache = null;
    function systemLocale() {
      if (sysLocaleCache) {
        return sysLocaleCache;
      } else if (hasIntl()) {
        const computedSys = new Intl.DateTimeFormat().resolvedOptions().locale;
        // node sometimes defaults to "und". Override that because that is dumb
        sysLocaleCache = !computedSys || computedSys === "und" ? "en-US" : computedSys;
        return sysLocaleCache;
      } else {
        sysLocaleCache = "en-US";
        return sysLocaleCache;
      }
    }

    function parseLocaleString(localeStr) {
      // I really want to avoid writing a BCP 47 parser
      // see, e.g. https://github.com/wooorm/bcp-47
      // Instead, we'll do this:

      // a) if the string has no -u extensions, just leave it alone
      // b) if it does, use Intl to resolve everything
      // c) if Intl fails, try again without the -u

      const uIndex = localeStr.indexOf("-u-");
      if (uIndex === -1) {
        return [localeStr];
      } else {
        let options;
        const smaller = localeStr.substring(0, uIndex);
        try {
          options = getCachedDTF(localeStr).resolvedOptions();
        } catch (e) {
          options = getCachedDTF(smaller).resolvedOptions();
        }

        const { numberingSystem, calendar } = options;
        // return the smaller one so that we can append the calendar and numbering overrides to it
        return [smaller, numberingSystem, calendar];
      }
    }

    function intlConfigString(localeStr, numberingSystem, outputCalendar) {
      if (hasIntl()) {
        if (outputCalendar || numberingSystem) {
          localeStr += "-u";

          if (outputCalendar) {
            localeStr += `-ca-${outputCalendar}`;
          }

          if (numberingSystem) {
            localeStr += `-nu-${numberingSystem}`;
          }
          return localeStr;
        } else {
          return localeStr;
        }
      } else {
        return [];
      }
    }

    function mapMonths(f) {
      const ms = [];
      for (let i = 1; i <= 12; i++) {
        const dt = DateTime.utc(2016, i, 1);
        ms.push(f(dt));
      }
      return ms;
    }

    function mapWeekdays(f) {
      const ms = [];
      for (let i = 1; i <= 7; i++) {
        const dt = DateTime.utc(2016, 11, 13 + i);
        ms.push(f(dt));
      }
      return ms;
    }

    function listStuff(loc, length, defaultOK, englishFn, intlFn) {
      const mode = loc.listingMode(defaultOK);

      if (mode === "error") {
        return null;
      } else if (mode === "en") {
        return englishFn(length);
      } else {
        return intlFn(length);
      }
    }

    function supportsFastNumbers(loc) {
      if (loc.numberingSystem && loc.numberingSystem !== "latn") {
        return false;
      } else {
        return (
          loc.numberingSystem === "latn" ||
          !loc.locale ||
          loc.locale.startsWith("en") ||
          (hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn")
        );
      }
    }

    /**
     * @private
     */

    class PolyNumberFormatter {
      constructor(intl, forceSimple, opts) {
        this.padTo = opts.padTo || 0;
        this.floor = opts.floor || false;

        if (!forceSimple && hasIntl()) {
          const intlOpts = { useGrouping: false };
          if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
          this.inf = getCachedINF(intl, intlOpts);
        }
      }

      format(i) {
        if (this.inf) {
          const fixed = this.floor ? Math.floor(i) : i;
          return this.inf.format(fixed);
        } else {
          // to match the browser's numberformatter defaults
          const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
          return padStart(fixed, this.padTo);
        }
      }
    }

    /**
     * @private
     */

    class PolyDateFormatter {
      constructor(dt, intl, opts) {
        this.opts = opts;
        this.hasIntl = hasIntl();

        let z;
        if (dt.zone.universal && this.hasIntl) {
          // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,
          // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.
          // So we have to make do. Two cases:
          // 1. The format options tell us to show the zone. We can't do that, so the best
          // we can do is format the date in UTC.
          // 2. The format options don't tell us to show the zone. Then we can adjust them
          // the time and tell the formatter to show it to us in UTC, so that the time is right
          // and the bad zone doesn't show up.
          // We can clean all this up when Chrome fixes this.
          z = "UTC";
          if (opts.timeZoneName) {
            this.dt = dt;
          } else {
            this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);
          }
        } else if (dt.zone.type === "local") {
          this.dt = dt;
        } else {
          this.dt = dt;
          z = dt.zone.name;
        }

        if (this.hasIntl) {
          const intlOpts = Object.assign({}, this.opts);
          if (z) {
            intlOpts.timeZone = z;
          }
          this.dtf = getCachedDTF(intl, intlOpts);
        }
      }

      format() {
        if (this.hasIntl) {
          return this.dtf.format(this.dt.toJSDate());
        } else {
          const tokenFormat = formatString(this.opts),
            loc = Locale.create("en-US");
          return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);
        }
      }

      formatToParts() {
        if (this.hasIntl && hasFormatToParts()) {
          return this.dtf.formatToParts(this.dt.toJSDate());
        } else {
          // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings
          // and IMO it's too weird to have an uncanny valley like that
          return [];
        }
      }

      resolvedOptions() {
        if (this.hasIntl) {
          return this.dtf.resolvedOptions();
        } else {
          return {
            locale: "en-US",
            numberingSystem: "latn",
            outputCalendar: "gregory"
          };
        }
      }
    }

    /**
     * @private
     */
    class PolyRelFormatter {
      constructor(intl, isEnglish, opts) {
        this.opts = Object.assign({ style: "long" }, opts);
        if (!isEnglish && hasRelative()) {
          this.rtf = getCachedRTF(intl, opts);
        }
      }

      format(count, unit) {
        if (this.rtf) {
          return this.rtf.format(count, unit);
        } else {
          return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
        }
      }

      formatToParts(count, unit) {
        if (this.rtf) {
          return this.rtf.formatToParts(count, unit);
        } else {
          return [];
        }
      }
    }

    /**
     * @private
     */

    class Locale {
      static fromOpts(opts) {
        return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
      }

      static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {
        const specifiedLocale = locale || Settings.defaultLocale,
          // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
          localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale()),
          numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,
          outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
        return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
      }

      static resetCache() {
        sysLocaleCache = null;
        intlDTCache = {};
        intlNumCache = {};
        intlRelCache = {};
      }

      static fromObject({ locale, numberingSystem, outputCalendar } = {}) {
        return Locale.create(locale, numberingSystem, outputCalendar);
      }

      constructor(locale, numbering, outputCalendar, specifiedLocale) {
        const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);

        this.locale = parsedLocale;
        this.numberingSystem = numbering || parsedNumberingSystem || null;
        this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
        this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);

        this.weekdaysCache = { format: {}, standalone: {} };
        this.monthsCache = { format: {}, standalone: {} };
        this.meridiemCache = null;
        this.eraCache = {};

        this.specifiedLocale = specifiedLocale;
        this.fastNumbersCached = null;
      }

      get fastNumbers() {
        if (this.fastNumbersCached == null) {
          this.fastNumbersCached = supportsFastNumbers(this);
        }

        return this.fastNumbersCached;
      }

      listingMode(defaultOK = true) {
        const intl = hasIntl(),
          hasFTP = intl && hasFormatToParts(),
          isActuallyEn = this.isEnglish(),
          hasNoWeirdness =
            (this.numberingSystem === null || this.numberingSystem === "latn") &&
            (this.outputCalendar === null || this.outputCalendar === "gregory");

        if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {
          return "error";
        } else if (!hasFTP || (isActuallyEn && hasNoWeirdness)) {
          return "en";
        } else {
          return "intl";
        }
      }

      clone(alts) {
        if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
          return this;
        } else {
          return Locale.create(
            alts.locale || this.specifiedLocale,
            alts.numberingSystem || this.numberingSystem,
            alts.outputCalendar || this.outputCalendar,
            alts.defaultToEN || false
          );
        }
      }

      redefaultToEN(alts = {}) {
        return this.clone(Object.assign({}, alts, { defaultToEN: true }));
      }

      redefaultToSystem(alts = {}) {
        return this.clone(Object.assign({}, alts, { defaultToEN: false }));
      }

      months(length, format = false, defaultOK = true) {
        return listStuff(this, length, defaultOK, months, () => {
          const intl = format ? { month: length, day: "numeric" } : { month: length },
            formatStr = format ? "format" : "standalone";
          if (!this.monthsCache[formatStr][length]) {
            this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, "month"));
          }
          return this.monthsCache[formatStr][length];
        });
      }

      weekdays(length, format = false, defaultOK = true) {
        return listStuff(this, length, defaultOK, weekdays, () => {
          const intl = format
              ? { weekday: length, year: "numeric", month: "long", day: "numeric" }
              : { weekday: length },
            formatStr = format ? "format" : "standalone";
          if (!this.weekdaysCache[formatStr][length]) {
            this.weekdaysCache[formatStr][length] = mapWeekdays(dt =>
              this.extract(dt, intl, "weekday")
            );
          }
          return this.weekdaysCache[formatStr][length];
        });
      }

      meridiems(defaultOK = true) {
        return listStuff(
          this,
          undefined,
          defaultOK,
          () => meridiems,
          () => {
            // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
            // for AM and PM. This is probably wrong, but it's makes parsing way easier.
            if (!this.meridiemCache) {
              const intl = { hour: "numeric", hour12: true };
              this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
                dt => this.extract(dt, intl, "dayperiod")
              );
            }

            return this.meridiemCache;
          }
        );
      }

      eras(length, defaultOK = true) {
        return listStuff(this, length, defaultOK, eras, () => {
          const intl = { era: length };

          // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
          // to definitely enumerate them.
          if (!this.eraCache[length]) {
            this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>
              this.extract(dt, intl, "era")
            );
          }

          return this.eraCache[length];
        });
      }

      extract(dt, intlOpts, field) {
        const df = this.dtFormatter(dt, intlOpts),
          results = df.formatToParts(),
          matching = results.find(m => m.type.toLowerCase() === field);
        return matching ? matching.value : null;
      }

      numberFormatter(opts = {}) {
        // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
        // (in contrast, the rest of the condition is used heavily)
        return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
      }

      dtFormatter(dt, intlOpts = {}) {
        return new PolyDateFormatter(dt, this.intl, intlOpts);
      }

      relFormatter(opts = {}) {
        return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
      }

      isEnglish() {
        return (
          this.locale === "en" ||
          this.locale.toLowerCase() === "en-us" ||
          (hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us"))
        );
      }

      equals(other) {
        return (
          this.locale === other.locale &&
          this.numberingSystem === other.numberingSystem &&
          this.outputCalendar === other.outputCalendar
        );
      }
    }

    /*
     * This file handles parsing for well-specified formats. Here's how it works:
     * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
     * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
     * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
     * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
     * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
     * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
     */

    function combineRegexes(...regexes) {
      const full = regexes.reduce((f, r) => f + r.source, "");
      return RegExp(`^${full}$`);
    }

    function combineExtractors(...extractors) {
      return m =>
        extractors
          .reduce(
            ([mergedVals, mergedZone, cursor], ex) => {
              const [val, zone, next] = ex(m, cursor);
              return [Object.assign(mergedVals, val), mergedZone || zone, next];
            },
            [{}, null, 1]
          )
          .slice(0, 2);
    }

    function parse$1(s, ...patterns) {
      if (s == null) {
        return [null, null];
      }

      for (const [regex, extractor] of patterns) {
        const m = regex.exec(s);
        if (m) {
          return extractor(m);
        }
      }
      return [null, null];
    }

    function simpleParse(...keys) {
      return (match, cursor) => {
        const ret = {};
        let i;

        for (i = 0; i < keys.length; i++) {
          ret[keys[i]] = parseInteger(match[cursor + i]);
        }
        return [ret, null, cursor + i];
      };
    }

    // ISO and SQL parsing
    const offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/,
      isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,9}))?)?)?/,
      isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),
      isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),
      isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/,
      isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/,
      isoOrdinalRegex = /(\d{4})-?(\d{3})/,
      extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay"),
      extractISOOrdinalData = simpleParse("year", "ordinal"),
      sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/, // dumbed-down version of the ISO one
      sqlTimeRegex = RegExp(
        `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
      ),
      sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);

    function int(match, pos, fallback) {
      const m = match[pos];
      return isUndefined$1(m) ? fallback : parseInteger(m);
    }

    function extractISOYmd(match, cursor) {
      const item = {
        year: int(match, cursor),
        month: int(match, cursor + 1, 1),
        day: int(match, cursor + 2, 1)
      };

      return [item, null, cursor + 3];
    }

    function extractISOTime(match, cursor) {
      const item = {
        hour: int(match, cursor, 0),
        minute: int(match, cursor + 1, 0),
        second: int(match, cursor + 2, 0),
        millisecond: parseMillis(match[cursor + 3])
      };

      return [item, null, cursor + 4];
    }

    function extractISOOffset(match, cursor) {
      const local = !match[cursor] && !match[cursor + 1],
        fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),
        zone = local ? null : FixedOffsetZone.instance(fullOffset);
      return [{}, zone, cursor + 3];
    }

    function extractIANAZone(match, cursor) {
      const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;
      return [{}, zone, cursor + 1];
    }

    // ISO duration parsing

    const isoDuration = /^P(?:(?:(-?\d{1,9})Y)?(?:(-?\d{1,9})M)?(?:(-?\d{1,9})W)?(?:(-?\d{1,9})D)?(?:T(?:(-?\d{1,9})H)?(?:(-?\d{1,9})M)?(?:(-?\d{1,9})(?:[.,](-?\d{1,9}))?S)?)?)$/;

    function extractISODuration(match) {
      const [
        ,
        yearStr,
        monthStr,
        weekStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr,
        millisecondsStr
      ] = match;

      return [
        {
          years: parseInteger(yearStr),
          months: parseInteger(monthStr),
          weeks: parseInteger(weekStr),
          days: parseInteger(dayStr),
          hours: parseInteger(hourStr),
          minutes: parseInteger(minuteStr),
          seconds: parseInteger(secondStr),
          milliseconds: parseMillis(millisecondsStr)
        }
      ];
    }

    // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
    // and not just that we're in -240 *right now*. But since I don't think these are used that often
    // I'm just going to ignore that
    const obsOffsets = {
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };

    function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      const result = {
        year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
        month: monthsShort.indexOf(monthStr) + 1,
        day: parseInteger(dayStr),
        hour: parseInteger(hourStr),
        minute: parseInteger(minuteStr)
      };

      if (secondStr) result.second = parseInteger(secondStr);
      if (weekdayStr) {
        result.weekday =
          weekdayStr.length > 3
            ? weekdaysLong.indexOf(weekdayStr) + 1
            : weekdaysShort.indexOf(weekdayStr) + 1;
      }

      return result;
    }

    // RFC 2822/5322
    const rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;

    function extractRFC2822(match) {
      const [
          ,
          weekdayStr,
          dayStr,
          monthStr,
          yearStr,
          hourStr,
          minuteStr,
          secondStr,
          obsOffset,
          milOffset,
          offHourStr,
          offMinuteStr
        ] = match,
        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);

      let offset;
      if (obsOffset) {
        offset = obsOffsets[obsOffset];
      } else if (milOffset) {
        offset = 0;
      } else {
        offset = signedOffset(offHourStr, offMinuteStr);
      }

      return [result, new FixedOffsetZone(offset)];
    }

    function preprocessRFC2822(s) {
      // Remove comments and folding whitespace and replace multiple-spaces with a single space
      return s
        .replace(/\([^)]*\)|[\n\t]/g, " ")
        .replace(/(\s\s+)/g, " ")
        .trim();
    }

    // http date

    const rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/,
      rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/,
      ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;

    function extractRFC1123Or850(match) {
      const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,
        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
      return [result, FixedOffsetZone.utcInstance];
    }

    function extractASCII(match) {
      const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,
        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
      return [result, FixedOffsetZone.utcInstance];
    }

    const isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
    const isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
    const isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
    const isoTimeCombinedRegex = combineRegexes(isoTimeRegex);

    const extractISOYmdTimeAndOffset = combineExtractors(
      extractISOYmd,
      extractISOTime,
      extractISOOffset
    );
    const extractISOWeekTimeAndOffset = combineExtractors(
      extractISOWeekData,
      extractISOTime,
      extractISOOffset
    );
    const extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);
    const extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);

    /**
     * @private
     */

    function parseISODate(s) {
      return parse$1(
        s,
        [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
        [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
        [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime],
        [isoTimeCombinedRegex, extractISOTimeAndOffset]
      );
    }

    function parseRFC2822Date(s) {
      return parse$1(preprocessRFC2822(s), [rfc2822, extractRFC2822]);
    }

    function parseHTTPDate(s) {
      return parse$1(
        s,
        [rfc1123, extractRFC1123Or850],
        [rfc850, extractRFC1123Or850],
        [ascii, extractASCII]
      );
    }

    function parseISODuration(s) {
      return parse$1(s, [isoDuration, extractISODuration]);
    }

    const sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
    const sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);

    const extractISOYmdTimeOffsetAndIANAZone = combineExtractors(
      extractISOYmd,
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );
    const extractISOTimeOffsetAndIANAZone = combineExtractors(
      extractISOTime,
      extractISOOffset,
      extractIANAZone
    );

    function parseSQL(s) {
      return parse$1(
        s,
        [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone],
        [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
      );
    }

    const INVALID = "Invalid Duration";

    // unit conversion constants
    const lowOrderMatrix = {
        weeks: {
          days: 7,
          hours: 7 * 24,
          minutes: 7 * 24 * 60,
          seconds: 7 * 24 * 60 * 60,
          milliseconds: 7 * 24 * 60 * 60 * 1000
        },
        days: {
          hours: 24,
          minutes: 24 * 60,
          seconds: 24 * 60 * 60,
          milliseconds: 24 * 60 * 60 * 1000
        },
        hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },
        minutes: { seconds: 60, milliseconds: 60 * 1000 },
        seconds: { milliseconds: 1000 }
      },
      casualMatrix = Object.assign(
        {
          years: {
            months: 12,
            weeks: 52,
            days: 365,
            hours: 365 * 24,
            minutes: 365 * 24 * 60,
            seconds: 365 * 24 * 60 * 60,
            milliseconds: 365 * 24 * 60 * 60 * 1000
          },
          quarters: {
            months: 3,
            weeks: 13,
            days: 91,
            hours: 91 * 24,
            minutes: 91 * 24 * 60,
            milliseconds: 91 * 24 * 60 * 60 * 1000
          },
          months: {
            weeks: 4,
            days: 30,
            hours: 30 * 24,
            minutes: 30 * 24 * 60,
            seconds: 30 * 24 * 60 * 60,
            milliseconds: 30 * 24 * 60 * 60 * 1000
          }
        },
        lowOrderMatrix
      ),
      daysInYearAccurate = 146097.0 / 400,
      daysInMonthAccurate = 146097.0 / 4800,
      accurateMatrix = Object.assign(
        {
          years: {
            months: 12,
            weeks: daysInYearAccurate / 7,
            days: daysInYearAccurate,
            hours: daysInYearAccurate * 24,
            minutes: daysInYearAccurate * 24 * 60,
            seconds: daysInYearAccurate * 24 * 60 * 60,
            milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
          },
          quarters: {
            months: 3,
            weeks: daysInYearAccurate / 28,
            days: daysInYearAccurate / 4,
            hours: (daysInYearAccurate * 24) / 4,
            minutes: (daysInYearAccurate * 24 * 60) / 4,
            seconds: (daysInYearAccurate * 24 * 60 * 60) / 4,
            milliseconds: (daysInYearAccurate * 24 * 60 * 60 * 1000) / 4
          },
          months: {
            weeks: daysInMonthAccurate / 7,
            days: daysInMonthAccurate,
            hours: daysInMonthAccurate * 24,
            minutes: daysInMonthAccurate * 24 * 60,
            seconds: daysInMonthAccurate * 24 * 60 * 60,
            milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
          }
        },
        lowOrderMatrix
      );

    // units ordered by size
    const orderedUnits = [
      "years",
      "quarters",
      "months",
      "weeks",
      "days",
      "hours",
      "minutes",
      "seconds",
      "milliseconds"
    ];

    const reverseUnits = orderedUnits.slice(0).reverse();

    // clone really means "create another instance just like this one, but with these changes"
    function clone(dur, alts, clear = false) {
      // deep merge for vals
      const conf = {
        values: clear ? alts.values : Object.assign({}, dur.values, alts.values || {}),
        loc: dur.loc.clone(alts.loc),
        conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy
      };
      return new Duration(conf);
    }

    function antiTrunc(n) {
      return n < 0 ? Math.floor(n) : Math.ceil(n);
    }

    // NB: mutates parameters
    function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
      const conv = matrix[toUnit][fromUnit],
        raw = fromMap[fromUnit] / conv,
        sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),
        // ok, so this is wild, but see the matrix in the tests
        added =
          !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
      toMap[toUnit] += added;
      fromMap[fromUnit] -= added * conv;
    }

    // NB: mutates parameters
    function normalizeValues(matrix, vals) {
      reverseUnits.reduce((previous, current) => {
        if (!isUndefined$1(vals[current])) {
          if (previous) {
            convert(matrix, vals, previous, vals, current);
          }
          return current;
        } else {
          return previous;
        }
      }, null);
    }

    /**
     * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.
     *
     * Here is a brief overview of commonly used methods and getters in Duration:
     *
     * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
     * * **Unit values** See the {@link Duration.years}, {@link Duration.months}, {@link Duration.weeks}, {@link Duration.days}, {@link Duration.hours}, {@link Duration.minutes}, {@link Duration.seconds}, {@link Duration.milliseconds} accessors.
     * * **Configuration** See  {@link Duration.locale} and {@link Duration.numberingSystem} accessors.
     * * **Transformation** To create new Durations out of old ones use {@link Duration.plus}, {@link Duration.minus}, {@link Duration.normalize}, {@link Duration.set}, {@link Duration.reconfigure}, {@link Duration.shiftTo}, and {@link Duration.negate}.
     * * **Output** To convert the Duration into other representations, see {@link Duration.as}, {@link Duration.toISO}, {@link Duration.toFormat}, and {@link Duration.toJSON}
     *
     * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
     */
    class Duration {
      /**
       * @private
       */
      constructor(config) {
        const accurate = config.conversionAccuracy === "longterm" || false;
        /**
         * @access private
         */
        this.values = config.values;
        /**
         * @access private
         */
        this.loc = config.loc || Locale.create();
        /**
         * @access private
         */
        this.conversionAccuracy = accurate ? "longterm" : "casual";
        /**
         * @access private
         */
        this.invalid = config.invalid || null;
        /**
         * @access private
         */
        this.matrix = accurate ? accurateMatrix : casualMatrix;
        /**
         * @access private
         */
        this.isLuxonDuration = true;
      }

      /**
       * Create Duration from a number of milliseconds.
       * @param {number} count of milliseconds
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */
      static fromMillis(count, opts) {
        return Duration.fromObject(Object.assign({ milliseconds: count }, opts));
      }

      /**
       * Create a Duration from a Javascript object with keys like 'years' and 'hours.
       * If this object is empty then a zero milliseconds duration is returned.
       * @param {Object} obj - the object to create the DateTime from
       * @param {number} obj.years
       * @param {number} obj.quarters
       * @param {number} obj.months
       * @param {number} obj.weeks
       * @param {number} obj.days
       * @param {number} obj.hours
       * @param {number} obj.minutes
       * @param {number} obj.seconds
       * @param {number} obj.milliseconds
       * @param {string} [obj.locale='en-US'] - the locale to use
       * @param {string} obj.numberingSystem - the numbering system to use
       * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */
      static fromObject(obj) {
        if (obj == null || typeof obj !== "object") {
          throw new InvalidArgumentError(
            `Duration.fromObject: argument expected to be an object, got ${
          obj === null ? "null" : typeof obj
        }`
          );
        }
        return new Duration({
          values: normalizeObject(obj, Duration.normalizeUnit, [
            "locale",
            "numberingSystem",
            "conversionAccuracy",
            "zone" // a bit of debt; it's super inconvenient internally not to be able to blindly pass this
          ]),
          loc: Locale.fromObject(obj),
          conversionAccuracy: obj.conversionAccuracy
        });
      }

      /**
       * Create a Duration from an ISO 8601 duration string.
       * @param {string} text - text to parse
       * @param {Object} opts - options for parsing
       * @param {string} [opts.locale='en-US'] - the locale to use
       * @param {string} opts.numberingSystem - the numbering system to use
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
       * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
       * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
       * @return {Duration}
       */
      static fromISO(text, opts) {
        const [parsed] = parseISODuration(text);
        if (parsed) {
          const obj = Object.assign(parsed, opts);
          return Duration.fromObject(obj);
        } else {
          return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
        }
      }

      /**
       * Create an invalid Duration.
       * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {Duration}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
        }

        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

        if (Settings.throwOnInvalid) {
          throw new InvalidDurationError(invalid);
        } else {
          return new Duration({ invalid });
        }
      }

      /**
       * @private
       */
      static normalizeUnit(unit) {
        const normalized = {
          year: "years",
          years: "years",
          quarter: "quarters",
          quarters: "quarters",
          month: "months",
          months: "months",
          week: "weeks",
          weeks: "weeks",
          day: "days",
          days: "days",
          hour: "hours",
          hours: "hours",
          minute: "minutes",
          minutes: "minutes",
          second: "seconds",
          seconds: "seconds",
          millisecond: "milliseconds",
          milliseconds: "milliseconds"
        }[unit ? unit.toLowerCase() : unit];

        if (!normalized) throw new InvalidUnitError(unit);

        return normalized;
      }

      /**
       * Check if an object is a Duration. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isDuration(o) {
        return (o && o.isLuxonDuration) || false;
      }

      /**
       * Get  the locale of a Duration, such 'en-GB'
       * @type {string}
       */
      get locale() {
        return this.isValid ? this.loc.locale : null;
      }

      /**
       * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
       *
       * @type {string}
       */
      get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
      }

      /**
       * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
       * * `S` for milliseconds
       * * `s` for seconds
       * * `m` for minutes
       * * `h` for hours
       * * `d` for days
       * * `M` for months
       * * `y` for years
       * Notes:
       * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
       * * The duration will be converted to the set of units in the format string using {@link Duration.shiftTo} and the Durations's conversion accuracy setting.
       * @param {string} fmt - the format string
       * @param {Object} opts - options
       * @param {boolean} [opts.floor=true] - floor numerical values
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
       * @return {string}
       */
      toFormat(fmt, opts = {}) {
        // reverse-compat since 1.2; we always round down now, never up, and we do it by default
        const fmtOpts = Object.assign({}, opts, {
          floor: opts.round !== false && opts.floor !== false
        });
        return this.isValid
          ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt)
          : INVALID;
      }

      /**
       * Returns a Javascript object with this Duration's values.
       * @param opts - options for generating the object
       * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
       * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
       * @return {Object}
       */
      toObject(opts = {}) {
        if (!this.isValid) return {};

        const base = Object.assign({}, this.values);

        if (opts.includeConfig) {
          base.conversionAccuracy = this.conversionAccuracy;
          base.numberingSystem = this.loc.numberingSystem;
          base.locale = this.loc.locale;
        }
        return base;
      }

      /**
       * Returns an ISO 8601-compliant string representation of this Duration.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
       * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
       * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
       * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
       * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
       * @return {string}
       */
      toISO() {
        // we could use the formatter, but this is an easier way to get the minimum string
        if (!this.isValid) return null;

        let s = "P";
        if (this.years !== 0) s += this.years + "Y";
        if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
        if (this.weeks !== 0) s += this.weeks + "W";
        if (this.days !== 0) s += this.days + "D";
        if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
          s += "T";
        if (this.hours !== 0) s += this.hours + "H";
        if (this.minutes !== 0) s += this.minutes + "M";
        if (this.seconds !== 0 || this.milliseconds !== 0)
          // this will handle "floating point madness" by removing extra decimal places
          // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
          s += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
        if (s === "P") s += "T0S";
        return s;
      }

      /**
       * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
       * @return {string}
       */
      toJSON() {
        return this.toISO();
      }

      /**
       * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
       * @return {string}
       */
      toString() {
        return this.toISO();
      }

      /**
       * Returns an milliseconds value of this Duration.
       * @return {number}
       */
      valueOf() {
        return this.as("milliseconds");
      }

      /**
       * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
       * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @return {Duration}
       */
      plus(duration) {
        if (!this.isValid) return this;

        const dur = friendlyDuration(duration),
          result = {};

        for (const k of orderedUnits) {
          if (hasOwnProperty$1(dur.values, k) || hasOwnProperty$1(this.values, k)) {
            result[k] = dur.get(k) + this.get(k);
          }
        }

        return clone(this, { values: result }, true);
      }

      /**
       * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
       * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @return {Duration}
       */
      minus(duration) {
        if (!this.isValid) return this;

        const dur = friendlyDuration(duration);
        return this.plus(dur.negate());
      }

      /**
       * Scale this Duration by the specified amount. Return a newly-constructed Duration.
       * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
       * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit(x => x * 2) //=> { hours: 2, minutes: 60 }
       * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnit((x, u) => u === "hour" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
       * @return {Duration}
       */
      mapUnits(fn) {
        if (!this.isValid) return this;
        const result = {};
        for (const k of Object.keys(this.values)) {
          result[k] = asNumber(fn(this.values[k], k));
        }
        return clone(this, { values: result }, true);
      }

      /**
       * Get the value of unit.
       * @param {string} unit - a unit such as 'minute' or 'day'
       * @example Duration.fromObject({years: 2, days: 3}).years //=> 2
       * @example Duration.fromObject({years: 2, days: 3}).months //=> 0
       * @example Duration.fromObject({years: 2, days: 3}).days //=> 3
       * @return {number}
       */
      get(unit) {
        return this[Duration.normalizeUnit(unit)];
      }

      /**
       * "Set" the values of specified units. Return a newly-constructed Duration.
       * @param {Object} values - a mapping of units to numbers
       * @example dur.set({ years: 2017 })
       * @example dur.set({ hours: 8, minutes: 30 })
       * @return {Duration}
       */
      set(values) {
        if (!this.isValid) return this;

        const mixed = Object.assign(this.values, normalizeObject(values, Duration.normalizeUnit, []));
        return clone(this, { values: mixed });
      }

      /**
       * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
       * @example dur.reconfigure({ locale: 'en-GB' })
       * @return {Duration}
       */
      reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {
        const loc = this.loc.clone({ locale, numberingSystem }),
          opts = { loc };

        if (conversionAccuracy) {
          opts.conversionAccuracy = conversionAccuracy;
        }

        return clone(this, opts);
      }

      /**
       * Return the length of the duration in the specified unit.
       * @param {string} unit - a unit such as 'minutes' or 'days'
       * @example Duration.fromObject({years: 1}).as('days') //=> 365
       * @example Duration.fromObject({years: 1}).as('months') //=> 12
       * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
       * @return {number}
       */
      as(unit) {
        return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
      }

      /**
       * Reduce this Duration to its canonical representation in its current units.
       * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
       * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
       * @return {Duration}
       */
      normalize() {
        if (!this.isValid) return this;
        const vals = this.toObject();
        normalizeValues(this.matrix, vals);
        return clone(this, { values: vals }, true);
      }

      /**
       * Convert this Duration into its representation in a different set of units.
       * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
       * @return {Duration}
       */
      shiftTo(...units) {
        if (!this.isValid) return this;

        if (units.length === 0) {
          return this;
        }

        units = units.map(u => Duration.normalizeUnit(u));

        const built = {},
          accumulated = {},
          vals = this.toObject();
        let lastUnit;

        normalizeValues(this.matrix, vals);

        for (const k of orderedUnits) {
          if (units.indexOf(k) >= 0) {
            lastUnit = k;

            let own = 0;

            // anything we haven't boiled down yet should get boiled to this unit
            for (const ak in accumulated) {
              own += this.matrix[ak][k] * accumulated[ak];
              accumulated[ak] = 0;
            }

            // plus anything that's already in this unit
            if (isNumber(vals[k])) {
              own += vals[k];
            }

            const i = Math.trunc(own);
            built[k] = i;
            accumulated[k] = own - i; // we'd like to absorb these fractions in another unit

            // plus anything further down the chain that should be rolled up in to this
            for (const down in vals) {
              if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {
                convert(this.matrix, vals, down, built, k);
              }
            }
            // otherwise, keep it in the wings to boil it later
          } else if (isNumber(vals[k])) {
            accumulated[k] = vals[k];
          }
        }

        // anything leftover becomes the decimal for the last unit
        // lastUnit must be defined since units is not empty
        for (const key in accumulated) {
          if (accumulated[key] !== 0) {
            built[lastUnit] +=
              key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
          }
        }

        return clone(this, { values: built }, true).normalize();
      }

      /**
       * Return the negative of this Duration.
       * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
       * @return {Duration}
       */
      negate() {
        if (!this.isValid) return this;
        const negated = {};
        for (const k of Object.keys(this.values)) {
          negated[k] = -this.values[k];
        }
        return clone(this, { values: negated }, true);
      }

      /**
       * Get the years.
       * @type {number}
       */
      get years() {
        return this.isValid ? this.values.years || 0 : NaN;
      }

      /**
       * Get the quarters.
       * @type {number}
       */
      get quarters() {
        return this.isValid ? this.values.quarters || 0 : NaN;
      }

      /**
       * Get the months.
       * @type {number}
       */
      get months() {
        return this.isValid ? this.values.months || 0 : NaN;
      }

      /**
       * Get the weeks
       * @type {number}
       */
      get weeks() {
        return this.isValid ? this.values.weeks || 0 : NaN;
      }

      /**
       * Get the days.
       * @type {number}
       */
      get days() {
        return this.isValid ? this.values.days || 0 : NaN;
      }

      /**
       * Get the hours.
       * @type {number}
       */
      get hours() {
        return this.isValid ? this.values.hours || 0 : NaN;
      }

      /**
       * Get the minutes.
       * @type {number}
       */
      get minutes() {
        return this.isValid ? this.values.minutes || 0 : NaN;
      }

      /**
       * Get the seconds.
       * @return {number}
       */
      get seconds() {
        return this.isValid ? this.values.seconds || 0 : NaN;
      }

      /**
       * Get the milliseconds.
       * @return {number}
       */
      get milliseconds() {
        return this.isValid ? this.values.milliseconds || 0 : NaN;
      }

      /**
       * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
       * on invalid DateTimes or Intervals.
       * @return {boolean}
       */
      get isValid() {
        return this.invalid === null;
      }

      /**
       * Returns an error code if this Duration became invalid, or null if the Duration is valid
       * @return {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }

      /**
       * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }

      /**
       * Equality check
       * Two Durations are equal iff they have the same units and the same values for each unit.
       * @param {Duration} other
       * @return {boolean}
       */
      equals(other) {
        if (!this.isValid || !other.isValid) {
          return false;
        }

        if (!this.loc.equals(other.loc)) {
          return false;
        }

        for (const u of orderedUnits) {
          if (this.values[u] !== other.values[u]) {
            return false;
          }
        }
        return true;
      }
    }

    /**
     * @private
     */
    function friendlyDuration(durationish) {
      if (isNumber(durationish)) {
        return Duration.fromMillis(durationish);
      } else if (Duration.isDuration(durationish)) {
        return durationish;
      } else if (typeof durationish === "object") {
        return Duration.fromObject(durationish);
      } else {
        throw new InvalidArgumentError(
          `Unknown duration argument ${durationish} of type ${typeof durationish}`
        );
      }
    }

    const INVALID$1 = "Invalid Interval";

    // checks if the start is equal to or before the end
    function validateStartEnd(start, end) {
      if (!start || !start.isValid) {
        return Interval.invalid("missing or invalid start");
      } else if (!end || !end.isValid) {
        return Interval.invalid("missing or invalid end");
      } else if (end < start) {
        return Interval.invalid(
          "end before start",
          `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`
        );
      } else {
        return null;
      }
    }

    /**
     * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
     *
     * Here is a brief overview of the most commonly used methods and getters in Interval:
     *
     * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.
     * * **Accessors** Use {@link start} and {@link end} to get the start and end.
     * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.
     * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.
     * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}
     * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.
     */
    class Interval {
      /**
       * @private
       */
      constructor(config) {
        /**
         * @access private
         */
        this.s = config.start;
        /**
         * @access private
         */
        this.e = config.end;
        /**
         * @access private
         */
        this.invalid = config.invalid || null;
        /**
         * @access private
         */
        this.isLuxonInterval = true;
      }

      /**
       * Create an invalid Interval.
       * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {Interval}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
        }

        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

        if (Settings.throwOnInvalid) {
          throw new InvalidIntervalError(invalid);
        } else {
          return new Interval({ invalid });
        }
      }

      /**
       * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
       * @param {DateTime|Date|Object} start
       * @param {DateTime|Date|Object} end
       * @return {Interval}
       */
      static fromDateTimes(start, end) {
        const builtStart = friendlyDateTime(start),
          builtEnd = friendlyDateTime(end);

        const validateError = validateStartEnd(builtStart, builtEnd);

        if (validateError == null) {
          return new Interval({
            start: builtStart,
            end: builtEnd
          });
        } else {
          return validateError;
        }
      }

      /**
       * Create an Interval from a start DateTime and a Duration to extend to.
       * @param {DateTime|Date|Object} start
       * @param {Duration|Object|number} duration - the length of the Interval.
       * @return {Interval}
       */
      static after(start, duration) {
        const dur = friendlyDuration(duration),
          dt = friendlyDateTime(start);
        return Interval.fromDateTimes(dt, dt.plus(dur));
      }

      /**
       * Create an Interval from an end DateTime and a Duration to extend backwards to.
       * @param {DateTime|Date|Object} end
       * @param {Duration|Object|number} duration - the length of the Interval.
       * @return {Interval}
       */
      static before(end, duration) {
        const dur = friendlyDuration(duration),
          dt = friendlyDateTime(end);
        return Interval.fromDateTimes(dt.minus(dur), dt);
      }

      /**
       * Create an Interval from an ISO 8601 string.
       * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
       * @param {string} text - the ISO string to parse
       * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @return {Interval}
       */
      static fromISO(text, opts) {
        const [s, e] = (text || "").split("/", 2);
        if (s && e) {
          const start = DateTime.fromISO(s, opts),
            end = DateTime.fromISO(e, opts);

          if (start.isValid && end.isValid) {
            return Interval.fromDateTimes(start, end);
          }

          if (start.isValid) {
            const dur = Duration.fromISO(e, opts);
            if (dur.isValid) {
              return Interval.after(start, dur);
            }
          } else if (end.isValid) {
            const dur = Duration.fromISO(s, opts);
            if (dur.isValid) {
              return Interval.before(end, dur);
            }
          }
        }
        return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }

      /**
       * Check if an object is an Interval. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isInterval(o) {
        return (o && o.isLuxonInterval) || false;
      }

      /**
       * Returns the start of the Interval
       * @type {DateTime}
       */
      get start() {
        return this.isValid ? this.s : null;
      }

      /**
       * Returns the end of the Interval
       * @type {DateTime}
       */
      get end() {
        return this.isValid ? this.e : null;
      }

      /**
       * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
       * @type {boolean}
       */
      get isValid() {
        return this.invalidReason === null;
      }

      /**
       * Returns an error code if this Interval is invalid, or null if the Interval is valid
       * @type {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }

      /**
       * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }

      /**
       * Returns the length of the Interval in the specified unit.
       * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
       * @return {number}
       */
      length(unit = "milliseconds") {
        return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
      }

      /**
       * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
       * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
       * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
       * @param {string} [unit='milliseconds'] - the unit of time to count.
       * @return {number}
       */
      count(unit = "milliseconds") {
        if (!this.isValid) return NaN;
        const start = this.start.startOf(unit),
          end = this.end.startOf(unit);
        return Math.floor(end.diff(start, unit).get(unit)) + 1;
      }

      /**
       * Returns whether this Interval's start and end are both in the same unit of time
       * @param {string} unit - the unit of time to check sameness on
       * @return {boolean}
       */
      hasSame(unit) {
        return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;
      }

      /**
       * Return whether this Interval has the same start and end DateTimes.
       * @return {boolean}
       */
      isEmpty() {
        return this.s.valueOf() === this.e.valueOf();
      }

      /**
       * Return whether this Interval's start is after the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      isAfter(dateTime) {
        if (!this.isValid) return false;
        return this.s > dateTime;
      }

      /**
       * Return whether this Interval's end is before the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      isBefore(dateTime) {
        if (!this.isValid) return false;
        return this.e <= dateTime;
      }

      /**
       * Return whether this Interval contains the specified DateTime.
       * @param {DateTime} dateTime
       * @return {boolean}
       */
      contains(dateTime) {
        if (!this.isValid) return false;
        return this.s <= dateTime && this.e > dateTime;
      }

      /**
       * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
       * @param {Object} values - the values to set
       * @param {DateTime} values.start - the starting DateTime
       * @param {DateTime} values.end - the ending DateTime
       * @return {Interval}
       */
      set({ start, end } = {}) {
        if (!this.isValid) return this;
        return Interval.fromDateTimes(start || this.s, end || this.e);
      }

      /**
       * Split this Interval at each of the specified DateTimes
       * @param {...[DateTime]} dateTimes - the unit of time to count.
       * @return {[Interval]}
       */
      splitAt(...dateTimes) {
        if (!this.isValid) return [];
        const sorted = dateTimes
            .map(friendlyDateTime)
            .filter(d => this.contains(d))
            .sort(),
          results = [];
        let { s } = this,
          i = 0;

        while (s < this.e) {
          const added = sorted[i] || this.e,
            next = +added > +this.e ? this.e : added;
          results.push(Interval.fromDateTimes(s, next));
          s = next;
          i += 1;
        }

        return results;
      }

      /**
       * Split this Interval into smaller Intervals, each of the specified length.
       * Left over time is grouped into a smaller interval
       * @param {Duration|Object|number} duration - The length of each resulting interval.
       * @return {[Interval]}
       */
      splitBy(duration) {
        const dur = friendlyDuration(duration);

        if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
          return [];
        }

        let { s } = this,
          added,
          next;

        const results = [];
        while (s < this.e) {
          added = s.plus(dur);
          next = +added > +this.e ? this.e : added;
          results.push(Interval.fromDateTimes(s, next));
          s = next;
        }

        return results;
      }

      /**
       * Split this Interval into the specified number of smaller intervals.
       * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
       * @return {[Interval]}
       */
      divideEqually(numberOfParts) {
        if (!this.isValid) return [];
        return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
      }

      /**
       * Return whether this Interval overlaps with the specified Interval
       * @param {Interval} other
       * @return {boolean}
       */
      overlaps(other) {
        return this.e > other.s && this.s < other.e;
      }

      /**
       * Return whether this Interval's end is adjacent to the specified Interval's start.
       * @param {Interval} other
       * @return {boolean}
       */
      abutsStart(other) {
        if (!this.isValid) return false;
        return +this.e === +other.s;
      }

      /**
       * Return whether this Interval's start is adjacent to the specified Interval's end.
       * @param {Interval} other
       * @return {boolean}
       */
      abutsEnd(other) {
        if (!this.isValid) return false;
        return +other.e === +this.s;
      }

      /**
       * Return whether this Interval engulfs the start and end of the specified Interval.
       * @param {Interval} other
       * @return {boolean}
       */
      engulfs(other) {
        if (!this.isValid) return false;
        return this.s <= other.s && this.e >= other.e;
      }

      /**
       * Return whether this Interval has the same start and end as the specified Interval.
       * @param {Interval} other
       * @return {boolean}
       */
      equals(other) {
        if (!this.isValid || !other.isValid) {
          return false;
        }

        return this.s.equals(other.s) && this.e.equals(other.e);
      }

      /**
       * Return an Interval representing the intersection of this Interval and the specified Interval.
       * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
       * Returns null if the intersection is empty, meaning, the intervals don't intersect.
       * @param {Interval} other
       * @return {Interval}
       */
      intersection(other) {
        if (!this.isValid) return this;
        const s = this.s > other.s ? this.s : other.s,
          e = this.e < other.e ? this.e : other.e;

        if (s > e) {
          return null;
        } else {
          return Interval.fromDateTimes(s, e);
        }
      }

      /**
       * Return an Interval representing the union of this Interval and the specified Interval.
       * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
       * @param {Interval} other
       * @return {Interval}
       */
      union(other) {
        if (!this.isValid) return this;
        const s = this.s < other.s ? this.s : other.s,
          e = this.e > other.e ? this.e : other.e;
        return Interval.fromDateTimes(s, e);
      }

      /**
       * Merge an array of Intervals into a equivalent minimal set of Intervals.
       * Combines overlapping and adjacent Intervals.
       * @param {[Interval]} intervals
       * @return {[Interval]}
       */
      static merge(intervals) {
        const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(
          ([sofar, current], item) => {
            if (!current) {
              return [sofar, item];
            } else if (current.overlaps(item) || current.abutsStart(item)) {
              return [sofar, current.union(item)];
            } else {
              return [sofar.concat([current]), item];
            }
          },
          [[], null]
        );
        if (final) {
          found.push(final);
        }
        return found;
      }

      /**
       * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
       * @param {[Interval]} intervals
       * @return {[Interval]}
       */
      static xor(intervals) {
        let start = null,
          currentCount = 0;
        const results = [],
          ends = intervals.map(i => [{ time: i.s, type: "s" }, { time: i.e, type: "e" }]),
          flattened = Array.prototype.concat(...ends),
          arr = flattened.sort((a, b) => a.time - b.time);

        for (const i of arr) {
          currentCount += i.type === "s" ? 1 : -1;

          if (currentCount === 1) {
            start = i.time;
          } else {
            if (start && +start !== +i.time) {
              results.push(Interval.fromDateTimes(start, i.time));
            }

            start = null;
          }
        }

        return Interval.merge(results);
      }

      /**
       * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
       * @param {...Interval} intervals
       * @return {[Interval]}
       */
      difference(...intervals) {
        return Interval.xor([this].concat(intervals))
          .map(i => this.intersection(i))
          .filter(i => i && !i.isEmpty());
      }

      /**
       * Returns a string representation of this Interval appropriate for debugging.
       * @return {string}
       */
      toString() {
        if (!this.isValid) return INVALID$1;
        return `[${this.s.toISO()} – ${this.e.toISO()})`;
      }

      /**
       * Returns an ISO 8601-compliant string representation of this Interval.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @param {Object} opts - The same options as {@link DateTime.toISO}
       * @return {string}
       */
      toISO(opts) {
        if (!this.isValid) return INVALID$1;
        return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
      }

      /**
       * Returns an ISO 8601-compliant string representation of date of this Interval.
       * The time components are ignored.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @return {string}
       */
      toISODate() {
        if (!this.isValid) return INVALID$1;
        return `${this.s.toISODate()}/${this.e.toISODate()}`;
      }

      /**
       * Returns an ISO 8601-compliant string representation of time of this Interval.
       * The date components are ignored.
       * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
       * @param {Object} opts - The same options as {@link DateTime.toISO}
       * @return {string}
       */
      toISOTime(opts) {
        if (!this.isValid) return INVALID$1;
        return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
      }

      /**
       * Returns a string representation of this Interval formatted according to the specified format string.
       * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.
       * @param {Object} opts - options
       * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations
       * @return {string}
       */
      toFormat(dateFormat, { separator = " – " } = {}) {
        if (!this.isValid) return INVALID$1;
        return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
      }

      /**
       * Return a Duration representing the time spanned by this interval.
       * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
       * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
       * @return {Duration}
       */
      toDuration(unit, opts) {
        if (!this.isValid) {
          return Duration.invalid(this.invalidReason);
        }
        return this.e.diff(this.s, unit, opts);
      }

      /**
       * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
       * @param {function} mapFn
       * @return {Interval}
       * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
       * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
       */
      mapEndpoints(mapFn) {
        return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
      }
    }

    /**
     * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
     */
    class Info {
      /**
       * Return whether the specified zone contains a DST.
       * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
       * @return {boolean}
       */
      static hasDST(zone = Settings.defaultZone) {
        const proto = DateTime.local()
          .setZone(zone)
          .set({ month: 12 });

        return !zone.universal && proto.offset !== proto.set({ month: 6 }).offset;
      }

      /**
       * Return whether the specified zone is a valid IANA specifier.
       * @param {string} zone - Zone to check
       * @return {boolean}
       */
      static isValidIANAZone(zone) {
        return IANAZone.isValidSpecifier(zone) && IANAZone.isValidZone(zone);
      }

      /**
       * Converts the input into a {@link Zone} instance.
       *
       * * If `input` is already a Zone instance, it is returned unchanged.
       * * If `input` is a string containing a valid time zone name, a Zone instance
       *   with that name is returned.
       * * If `input` is a string that doesn't refer to a known time zone, a Zone
       *   instance with {@link Zone.isValid} == false is returned.
       * * If `input is a number, a Zone instance with the specified fixed offset
       *   in minutes is returned.
       * * If `input` is `null` or `undefined`, the default zone is returned.
       * @param {string|Zone|number} [input] - the value to be converted
       * @return {Zone}
       */
      static normalizeZone(input) {
        return normalizeZone(input, Settings.defaultZone);
      }

      /**
       * Return an array of standalone month names.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.outputCalendar='gregory'] - the calendar
       * @example Info.months()[0] //=> 'January'
       * @example Info.months('short')[0] //=> 'Jan'
       * @example Info.months('numeric')[0] //=> '1'
       * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
       * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
       * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
       * @return {[string]}
       */
      static months(
        length = "long",
        { locale = null, numberingSystem = null, outputCalendar = "gregory" } = {}
      ) {
        return Locale.create(locale, numberingSystem, outputCalendar).months(length);
      }

      /**
       * Return an array of format month names.
       * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
       * changes the string.
       * See {@link months}
       * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @param {string} [opts.outputCalendar='gregory'] - the calendar
       * @return {[string]}
       */
      static monthsFormat(
        length = "long",
        { locale = null, numberingSystem = null, outputCalendar = "gregory" } = {}
      ) {
        return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);
      }

      /**
       * Return an array of standalone week names.
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @example Info.weekdays()[0] //=> 'Monday'
       * @example Info.weekdays('short')[0] //=> 'Mon'
       * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
       * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
       * @return {[string]}
       */
      static weekdays(length = "long", { locale = null, numberingSystem = null } = {}) {
        return Locale.create(locale, numberingSystem, null).weekdays(length);
      }

      /**
       * Return an array of format week names.
       * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
       * changes the string.
       * See {@link weekdays}
       * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale=null] - the locale code
       * @param {string} [opts.numberingSystem=null] - the numbering system
       * @return {[string]}
       */
      static weekdaysFormat(length = "long", { locale = null, numberingSystem = null } = {}) {
        return Locale.create(locale, numberingSystem, null).weekdays(length, true);
      }

      /**
       * Return an array of meridiems.
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @example Info.meridiems() //=> [ 'AM', 'PM' ]
       * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
       * @return {[string]}
       */
      static meridiems({ locale = null } = {}) {
        return Locale.create(locale).meridiems();
      }

      /**
       * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
       * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
       * @param {Object} opts - options
       * @param {string} [opts.locale] - the locale code
       * @example Info.eras() //=> [ 'BC', 'AD' ]
       * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
       * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
       * @return {[string]}
       */
      static eras(length = "short", { locale = null } = {}) {
        return Locale.create(locale, null, "gregory").eras(length);
      }

      /**
       * Return the set of available features in this environment.
       * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.
       * Keys:
       * * `zones`: whether this environment supports IANA timezones
       * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing
       * * `intl`: whether this environment supports general internationalization
       * * `relative`: whether this environment supports relative time formatting
       * @example Info.features() //=> { intl: true, intlTokens: false, zones: true, relative: false }
       * @return {Object}
       */
      static features() {
        let intl = false,
          intlTokens = false,
          zones = false,
          relative = false;

        if (hasIntl()) {
          intl = true;
          intlTokens = hasFormatToParts();
          relative = hasRelative();

          try {
            zones =
              new Intl.DateTimeFormat("en", { timeZone: "America/New_York" }).resolvedOptions()
                .timeZone === "America/New_York";
          } catch (e) {
            zones = false;
          }
        }

        return { intl, intlTokens, zones, relative };
      }
    }

    function dayDiff(earlier, later) {
      const utcDayStart = dt =>
          dt
            .toUTC(0, { keepLocalTime: true })
            .startOf("day")
            .valueOf(),
        ms = utcDayStart(later) - utcDayStart(earlier);
      return Math.floor(Duration.fromMillis(ms).as("days"));
    }

    function highOrderDiffs(cursor, later, units) {
      const differs = [
        ["years", (a, b) => b.year - a.year],
        ["months", (a, b) => b.month - a.month + (b.year - a.year) * 12],
        [
          "weeks",
          (a, b) => {
            const days = dayDiff(a, b);
            return (days - (days % 7)) / 7;
          }
        ],
        ["days", dayDiff]
      ];

      const results = {};
      let lowestOrder, highWater;

      for (const [unit, differ] of differs) {
        if (units.indexOf(unit) >= 0) {
          lowestOrder = unit;

          let delta = differ(cursor, later);
          highWater = cursor.plus({ [unit]: delta });

          if (highWater > later) {
            cursor = cursor.plus({ [unit]: delta - 1 });
            delta -= 1;
          } else {
            cursor = highWater;
          }

          results[unit] = delta;
        }
      }

      return [cursor, results, highWater, lowestOrder];
    }

    function diff(earlier, later, units, opts) {
      let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);

      const remainingMillis = later - cursor;

      const lowerOrderUnits = units.filter(
        u => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u) >= 0
      );

      if (lowerOrderUnits.length === 0) {
        if (highWater < later) {
          highWater = cursor.plus({ [lowestOrder]: 1 });
        }

        if (highWater !== cursor) {
          results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
        }
      }

      const duration = Duration.fromObject(Object.assign(results, opts));

      if (lowerOrderUnits.length > 0) {
        return Duration.fromMillis(remainingMillis, opts)
          .shiftTo(...lowerOrderUnits)
          .plus(duration);
      } else {
        return duration;
      }
    }

    const numberingSystems = {
      arab: "[\u0660-\u0669]",
      arabext: "[\u06F0-\u06F9]",
      bali: "[\u1B50-\u1B59]",
      beng: "[\u09E6-\u09EF]",
      deva: "[\u0966-\u096F]",
      fullwide: "[\uFF10-\uFF19]",
      gujr: "[\u0AE6-\u0AEF]",
      hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
      khmr: "[\u17E0-\u17E9]",
      knda: "[\u0CE6-\u0CEF]",
      laoo: "[\u0ED0-\u0ED9]",
      limb: "[\u1946-\u194F]",
      mlym: "[\u0D66-\u0D6F]",
      mong: "[\u1810-\u1819]",
      mymr: "[\u1040-\u1049]",
      orya: "[\u0B66-\u0B6F]",
      tamldec: "[\u0BE6-\u0BEF]",
      telu: "[\u0C66-\u0C6F]",
      thai: "[\u0E50-\u0E59]",
      tibt: "[\u0F20-\u0F29]",
      latn: "\\d"
    };

    const numberingSystemsUTF16 = {
      arab: [1632, 1641],
      arabext: [1776, 1785],
      bali: [6992, 7001],
      beng: [2534, 2543],
      deva: [2406, 2415],
      fullwide: [65296, 65303],
      gujr: [2790, 2799],
      khmr: [6112, 6121],
      knda: [3302, 3311],
      laoo: [3792, 3801],
      limb: [6470, 6479],
      mlym: [3430, 3439],
      mong: [6160, 6169],
      mymr: [4160, 4169],
      orya: [2918, 2927],
      tamldec: [3046, 3055],
      telu: [3174, 3183],
      thai: [3664, 3673],
      tibt: [3872, 3881]
    };

    // eslint-disable-next-line
    const hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");

    function parseDigits(str) {
      let value = parseInt(str, 10);
      if (isNaN(value)) {
        value = "";
        for (let i = 0; i < str.length; i++) {
          const code = str.charCodeAt(i);

          if (str[i].search(numberingSystems.hanidec) !== -1) {
            value += hanidecChars.indexOf(str[i]);
          } else {
            for (const key in numberingSystemsUTF16) {
              const [min, max] = numberingSystemsUTF16[key];
              if (code >= min && code <= max) {
                value += code - min;
              }
            }
          }
        }
        return parseInt(value, 10);
      } else {
        return value;
      }
    }

    function digitRegex({ numberingSystem }, append = "") {
      return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
    }

    const MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";

    function intUnit(regex, post = i => i) {
      return { regex, deser: ([s]) => post(parseDigits(s)) };
    }

    function fixListRegex(s) {
      // make dots optional and also make them literal
      return s.replace(/\./, "\\.?");
    }

    function stripInsensitivities(s) {
      return s.replace(/\./, "").toLowerCase();
    }

    function oneOf(strings, startIndex) {
      if (strings === null) {
        return null;
      } else {
        return {
          regex: RegExp(strings.map(fixListRegex).join("|")),
          deser: ([s]) =>
            strings.findIndex(i => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex
        };
      }
    }

    function offset(regex, groups) {
      return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
    }

    function simple(regex) {
      return { regex, deser: ([s]) => s };
    }

    function escapeToken(value) {
      // eslint-disable-next-line no-useless-escape
      return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    }

    function unitForToken(token, loc) {
      const one = digitRegex(loc),
        two = digitRegex(loc, "{2}"),
        three = digitRegex(loc, "{3}"),
        four = digitRegex(loc, "{4}"),
        six = digitRegex(loc, "{6}"),
        oneOrTwo = digitRegex(loc, "{1,2}"),
        oneToThree = digitRegex(loc, "{1,3}"),
        oneToSix = digitRegex(loc, "{1,6}"),
        oneToNine = digitRegex(loc, "{1,9}"),
        twoToFour = digitRegex(loc, "{2,4}"),
        fourToSix = digitRegex(loc, "{4,6}"),
        literal = t => ({ regex: RegExp(escapeToken(t.val)), deser: ([s]) => s, literal: true }),
        unitate = t => {
          if (token.literal) {
            return literal(t);
          }
          switch (t.val) {
            // era
            case "G":
              return oneOf(loc.eras("short", false), 0);
            case "GG":
              return oneOf(loc.eras("long", false), 0);
            // years
            case "y":
              return intUnit(oneToSix);
            case "yy":
              return intUnit(twoToFour, untruncateYear);
            case "yyyy":
              return intUnit(four);
            case "yyyyy":
              return intUnit(fourToSix);
            case "yyyyyy":
              return intUnit(six);
            // months
            case "M":
              return intUnit(oneOrTwo);
            case "MM":
              return intUnit(two);
            case "MMM":
              return oneOf(loc.months("short", true, false), 1);
            case "MMMM":
              return oneOf(loc.months("long", true, false), 1);
            case "L":
              return intUnit(oneOrTwo);
            case "LL":
              return intUnit(two);
            case "LLL":
              return oneOf(loc.months("short", false, false), 1);
            case "LLLL":
              return oneOf(loc.months("long", false, false), 1);
            // dates
            case "d":
              return intUnit(oneOrTwo);
            case "dd":
              return intUnit(two);
            // ordinals
            case "o":
              return intUnit(oneToThree);
            case "ooo":
              return intUnit(three);
            // time
            case "HH":
              return intUnit(two);
            case "H":
              return intUnit(oneOrTwo);
            case "hh":
              return intUnit(two);
            case "h":
              return intUnit(oneOrTwo);
            case "mm":
              return intUnit(two);
            case "m":
              return intUnit(oneOrTwo);
            case "q":
              return intUnit(oneOrTwo);
            case "qq":
              return intUnit(two);
            case "s":
              return intUnit(oneOrTwo);
            case "ss":
              return intUnit(two);
            case "S":
              return intUnit(oneToThree);
            case "SSS":
              return intUnit(three);
            case "u":
              return simple(oneToNine);
            // meridiem
            case "a":
              return oneOf(loc.meridiems(), 0);
            // weekYear (k)
            case "kkkk":
              return intUnit(four);
            case "kk":
              return intUnit(twoToFour, untruncateYear);
            // weekNumber (W)
            case "W":
              return intUnit(oneOrTwo);
            case "WW":
              return intUnit(two);
            // weekdays
            case "E":
            case "c":
              return intUnit(one);
            case "EEE":
              return oneOf(loc.weekdays("short", false, false), 1);
            case "EEEE":
              return oneOf(loc.weekdays("long", false, false), 1);
            case "ccc":
              return oneOf(loc.weekdays("short", true, false), 1);
            case "cccc":
              return oneOf(loc.weekdays("long", true, false), 1);
            // offset/zone
            case "Z":
            case "ZZ":
              return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
            case "ZZZ":
              return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
            // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
            // because we don't have any way to figure out what they are
            case "z":
              return simple(/[a-z_+-/]{1,256}?/i);
            default:
              return literal(t);
          }
        };

      const unit = unitate(token) || {
        invalidReason: MISSING_FTP
      };

      unit.token = token;

      return unit;
    }

    const partTypeStyleToTokenVal = {
      year: {
        "2-digit": "yy",
        numeric: "yyyyy"
      },
      month: {
        numeric: "M",
        "2-digit": "MM",
        short: "MMM",
        long: "MMMM"
      },
      day: {
        numeric: "d",
        "2-digit": "dd"
      },
      weekday: {
        short: "EEE",
        long: "EEEE"
      },
      dayperiod: "a",
      dayPeriod: "a",
      hour: {
        numeric: "h",
        "2-digit": "hh"
      },
      minute: {
        numeric: "m",
        "2-digit": "mm"
      },
      second: {
        numeric: "s",
        "2-digit": "ss"
      }
    };

    function tokenForPart(part, locale, formatOpts) {
      const { type, value } = part;

      if (type === "literal") {
        return {
          literal: true,
          val: value
        };
      }

      const style = formatOpts[type];

      let val = partTypeStyleToTokenVal[type];
      if (typeof val === "object") {
        val = val[style];
      }

      if (val) {
        return {
          literal: false,
          val
        };
      }

      return undefined;
    }

    function buildRegex(units) {
      const re = units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, "");
      return [`^${re}$`, units];
    }

    function match(input, regex, handlers) {
      const matches = input.match(regex);

      if (matches) {
        const all = {};
        let matchIndex = 1;
        for (const i in handlers) {
          if (hasOwnProperty$1(handlers, i)) {
            const h = handlers[i],
              groups = h.groups ? h.groups + 1 : 1;
            if (!h.literal && h.token) {
              all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
            }
            matchIndex += groups;
          }
        }
        return [matches, all];
      } else {
        return [matches, {}];
      }
    }

    function dateTimeFromMatches(matches) {
      const toField = token => {
        switch (token) {
          case "S":
            return "millisecond";
          case "s":
            return "second";
          case "m":
            return "minute";
          case "h":
          case "H":
            return "hour";
          case "d":
            return "day";
          case "o":
            return "ordinal";
          case "L":
          case "M":
            return "month";
          case "y":
            return "year";
          case "E":
          case "c":
            return "weekday";
          case "W":
            return "weekNumber";
          case "k":
            return "weekYear";
          case "q":
            return "quarter";
          default:
            return null;
        }
      };

      let zone;
      if (!isUndefined$1(matches.Z)) {
        zone = new FixedOffsetZone(matches.Z);
      } else if (!isUndefined$1(matches.z)) {
        zone = IANAZone.create(matches.z);
      } else {
        zone = null;
      }

      if (!isUndefined$1(matches.q)) {
        matches.M = (matches.q - 1) * 3 + 1;
      }

      if (!isUndefined$1(matches.h)) {
        if (matches.h < 12 && matches.a === 1) {
          matches.h += 12;
        } else if (matches.h === 12 && matches.a === 0) {
          matches.h = 0;
        }
      }

      if (matches.G === 0 && matches.y) {
        matches.y = -matches.y;
      }

      if (!isUndefined$1(matches.u)) {
        matches.S = parseMillis(matches.u);
      }

      const vals = Object.keys(matches).reduce((r, k) => {
        const f = toField(k);
        if (f) {
          r[f] = matches[k];
        }

        return r;
      }, {});

      return [vals, zone];
    }

    let dummyDateTimeCache = null;

    function getDummyDateTime() {
      if (!dummyDateTimeCache) {
        dummyDateTimeCache = DateTime.fromMillis(1555555555555);
      }

      return dummyDateTimeCache;
    }

    function maybeExpandMacroToken(token, locale) {
      if (token.literal) {
        return token;
      }

      const formatOpts = Formatter.macroTokenToFormatOpts(token.val);

      if (!formatOpts) {
        return token;
      }

      const formatter = Formatter.create(locale, formatOpts);
      const parts = formatter.formatDateTimeParts(getDummyDateTime());

      const tokens = parts.map(p => tokenForPart(p, locale, formatOpts));

      if (tokens.includes(undefined)) {
        return token;
      }

      return tokens;
    }

    function expandMacroTokens(tokens, locale) {
      return Array.prototype.concat(...tokens.map(t => maybeExpandMacroToken(t, locale)));
    }

    /**
     * @private
     */

    function explainFromTokens(locale, input, format) {
      const tokens = expandMacroTokens(Formatter.parseFormat(format), locale),
        units = tokens.map(t => unitForToken(t, locale)),
        disqualifyingUnit = units.find(t => t.invalidReason);

      if (disqualifyingUnit) {
        return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };
      } else {
        const [regexString, handlers] = buildRegex(units),
          regex = RegExp(regexString, "i"),
          [rawMatches, matches] = match(input, regex, handlers),
          [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];
        if (hasOwnProperty$1(matches, "a") && hasOwnProperty$1(matches, "H")) {
          throw new ConflictingSpecificationError(
            "Can't include meridiem when specifying 24-hour format"
          );
        }
        return { input, tokens, regex, rawMatches, matches, result, zone };
      }
    }

    function parseFromTokens(locale, input, format) {
      const { result, zone, invalidReason } = explainFromTokens(locale, input, format);
      return [result, zone, invalidReason];
    }

    const nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
      leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];

    function unitOutOfRange(unit, value) {
      return new Invalid(
        "unit out of range",
        `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
      );
    }

    function dayOfWeek(year, month, day) {
      const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();
      return js === 0 ? 7 : js;
    }

    function computeOrdinal(year, month, day) {
      return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
    }

    function uncomputeOrdinal(year, ordinal) {
      const table = isLeapYear(year) ? leapLadder : nonLeapLadder,
        month0 = table.findIndex(i => i < ordinal),
        day = ordinal - table[month0];
      return { month: month0 + 1, day };
    }

    /**
     * @private
     */

    function gregorianToWeek(gregObj) {
      const { year, month, day } = gregObj,
        ordinal = computeOrdinal(year, month, day),
        weekday = dayOfWeek(year, month, day);

      let weekNumber = Math.floor((ordinal - weekday + 10) / 7),
        weekYear;

      if (weekNumber < 1) {
        weekYear = year - 1;
        weekNumber = weeksInWeekYear(weekYear);
      } else if (weekNumber > weeksInWeekYear(year)) {
        weekYear = year + 1;
        weekNumber = 1;
      } else {
        weekYear = year;
      }

      return Object.assign({ weekYear, weekNumber, weekday }, timeObject(gregObj));
    }

    function weekToGregorian(weekData) {
      const { weekYear, weekNumber, weekday } = weekData,
        weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),
        yearInDays = daysInYear(weekYear);

      let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,
        year;

      if (ordinal < 1) {
        year = weekYear - 1;
        ordinal += daysInYear(year);
      } else if (ordinal > yearInDays) {
        year = weekYear + 1;
        ordinal -= daysInYear(weekYear);
      } else {
        year = weekYear;
      }

      const { month, day } = uncomputeOrdinal(year, ordinal);

      return Object.assign({ year, month, day }, timeObject(weekData));
    }

    function gregorianToOrdinal(gregData) {
      const { year, month, day } = gregData,
        ordinal = computeOrdinal(year, month, day);

      return Object.assign({ year, ordinal }, timeObject(gregData));
    }

    function ordinalToGregorian(ordinalData) {
      const { year, ordinal } = ordinalData,
        { month, day } = uncomputeOrdinal(year, ordinal);

      return Object.assign({ year, month, day }, timeObject(ordinalData));
    }

    function hasInvalidWeekData(obj) {
      const validYear = isInteger(obj.weekYear),
        validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),
        validWeekday = integerBetween(obj.weekday, 1, 7);

      if (!validYear) {
        return unitOutOfRange("weekYear", obj.weekYear);
      } else if (!validWeek) {
        return unitOutOfRange("week", obj.week);
      } else if (!validWeekday) {
        return unitOutOfRange("weekday", obj.weekday);
      } else return false;
    }

    function hasInvalidOrdinalData(obj) {
      const validYear = isInteger(obj.year),
        validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));

      if (!validYear) {
        return unitOutOfRange("year", obj.year);
      } else if (!validOrdinal) {
        return unitOutOfRange("ordinal", obj.ordinal);
      } else return false;
    }

    function hasInvalidGregorianData(obj) {
      const validYear = isInteger(obj.year),
        validMonth = integerBetween(obj.month, 1, 12),
        validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));

      if (!validYear) {
        return unitOutOfRange("year", obj.year);
      } else if (!validMonth) {
        return unitOutOfRange("month", obj.month);
      } else if (!validDay) {
        return unitOutOfRange("day", obj.day);
      } else return false;
    }

    function hasInvalidTimeData(obj) {
      const { hour, minute, second, millisecond } = obj;
      const validHour =
          integerBetween(hour, 0, 23) ||
          (hour === 24 && minute === 0 && second === 0 && millisecond === 0),
        validMinute = integerBetween(minute, 0, 59),
        validSecond = integerBetween(second, 0, 59),
        validMillisecond = integerBetween(millisecond, 0, 999);

      if (!validHour) {
        return unitOutOfRange("hour", hour);
      } else if (!validMinute) {
        return unitOutOfRange("minute", minute);
      } else if (!validSecond) {
        return unitOutOfRange("second", second);
      } else if (!validMillisecond) {
        return unitOutOfRange("millisecond", millisecond);
      } else return false;
    }

    const INVALID$2 = "Invalid DateTime";
    const MAX_DATE = 8.64e15;

    function unsupportedZone(zone) {
      return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
    }

    // we cache week data on the DT object and this intermediates the cache
    function possiblyCachedWeekData(dt) {
      if (dt.weekData === null) {
        dt.weekData = gregorianToWeek(dt.c);
      }
      return dt.weekData;
    }

    // clone really means, "make a new object with these modifications". all "setters" really use this
    // to create a new object while only changing some of the properties
    function clone$1(inst, alts) {
      const current = {
        ts: inst.ts,
        zone: inst.zone,
        c: inst.c,
        o: inst.o,
        loc: inst.loc,
        invalid: inst.invalid
      };
      return new DateTime(Object.assign({}, current, alts, { old: current }));
    }

    // find the right offset a given local time. The o input is our guess, which determines which
    // offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
    function fixOffset(localTS, o, tz) {
      // Our UTC time is just a guess because our offset is just a guess
      let utcGuess = localTS - o * 60 * 1000;

      // Test whether the zone matches the offset for this ts
      const o2 = tz.offset(utcGuess);

      // If so, offset didn't change and we're done
      if (o === o2) {
        return [utcGuess, o];
      }

      // If not, change the ts by the difference in the offset
      utcGuess -= (o2 - o) * 60 * 1000;

      // If that gives us the local time we want, we're done
      const o3 = tz.offset(utcGuess);
      if (o2 === o3) {
        return [utcGuess, o2];
      }

      // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
      return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];
    }

    // convert an epoch timestamp into a calendar object with the given offset
    function tsToObj(ts, offset) {
      ts += offset * 60 * 1000;

      const d = new Date(ts);

      return {
        year: d.getUTCFullYear(),
        month: d.getUTCMonth() + 1,
        day: d.getUTCDate(),
        hour: d.getUTCHours(),
        minute: d.getUTCMinutes(),
        second: d.getUTCSeconds(),
        millisecond: d.getUTCMilliseconds()
      };
    }

    // convert a calendar object to a epoch timestamp
    function objToTS(obj, offset, zone) {
      return fixOffset(objToLocalTS(obj), offset, zone);
    }

    // create a new DT instance by adding a duration, adjusting for DSTs
    function adjustTime(inst, dur) {
      const keys = Object.keys(dur.values);
      if (keys.indexOf("milliseconds") === -1) {
        keys.push("milliseconds");
      }

      dur = dur.shiftTo(...keys);

      const oPre = inst.o,
        year = inst.c.year + dur.years,
        month = inst.c.month + dur.months + dur.quarters * 3,
        c = Object.assign({}, inst.c, {
          year,
          month,
          day: Math.min(inst.c.day, daysInMonth(year, month)) + dur.days + dur.weeks * 7
        }),
        millisToAdd = Duration.fromObject({
          hours: dur.hours,
          minutes: dur.minutes,
          seconds: dur.seconds,
          milliseconds: dur.milliseconds
        }).as("milliseconds"),
        localTS = objToLocalTS(c);

      let [ts, o] = fixOffset(localTS, oPre, inst.zone);

      if (millisToAdd !== 0) {
        ts += millisToAdd;
        // that could have changed the offset by going over a DST, but we want to keep the ts the same
        o = inst.zone.offset(ts);
      }

      return { ts, o };
    }

    // helper useful in turning the results of parsing into real dates
    // by handling the zone options
    function parseDataToDateTime(parsed, parsedZone, opts, format, text) {
      const { setZone, zone } = opts;
      if (parsed && Object.keys(parsed).length !== 0) {
        const interpretationZone = parsedZone || zone,
          inst = DateTime.fromObject(
            Object.assign(parsed, opts, {
              zone: interpretationZone,
              // setZone is a valid option in the calling methods, but not in fromObject
              setZone: undefined
            })
          );
        return setZone ? inst : inst.setZone(zone);
      } else {
        return DateTime.invalid(
          new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
        );
      }
    }

    // if you want to output a technical format (e.g. RFC 2822), this helper
    // helps handle the details
    function toTechFormat(dt, format, allowZ = true) {
      return dt.isValid
        ? Formatter.create(Locale.create("en-US"), {
            allowZ,
            forceSimple: true
          }).formatDateTimeFromString(dt, format)
        : null;
    }

    // technical time formats (e.g. the time part of ISO 8601), take some options
    // and this commonizes their handling
    function toTechTimeFormat(
      dt,
      {
        suppressSeconds = false,
        suppressMilliseconds = false,
        includeOffset,
        includeZone = false,
        spaceZone = false,
        format = "extended"
      }
    ) {
      let fmt = format === "basic" ? "HHmm" : "HH:mm";

      if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {
        fmt += format === "basic" ? "ss" : ":ss";
        if (!suppressMilliseconds || dt.millisecond !== 0) {
          fmt += ".SSS";
        }
      }

      if ((includeZone || includeOffset) && spaceZone) {
        fmt += " ";
      }

      if (includeZone) {
        fmt += "z";
      } else if (includeOffset) {
        fmt += format === "basic" ? "ZZZ" : "ZZ";
      }

      return toTechFormat(dt, fmt);
    }

    // defaults for unspecified units in the supported calendars
    const defaultUnitValues = {
        month: 1,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0
      },
      defaultWeekUnitValues = {
        weekNumber: 1,
        weekday: 1,
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0
      },
      defaultOrdinalUnitValues = {
        ordinal: 1,
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0
      };

    // Units in the supported calendars, sorted by bigness
    const orderedUnits$1 = ["year", "month", "day", "hour", "minute", "second", "millisecond"],
      orderedWeekUnits = [
        "weekYear",
        "weekNumber",
        "weekday",
        "hour",
        "minute",
        "second",
        "millisecond"
      ],
      orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];

    // standardize case and plurality in units
    function normalizeUnit(unit) {
      const normalized = {
        year: "year",
        years: "year",
        month: "month",
        months: "month",
        day: "day",
        days: "day",
        hour: "hour",
        hours: "hour",
        minute: "minute",
        minutes: "minute",
        quarter: "quarter",
        quarters: "quarter",
        second: "second",
        seconds: "second",
        millisecond: "millisecond",
        milliseconds: "millisecond",
        weekday: "weekday",
        weekdays: "weekday",
        weeknumber: "weekNumber",
        weeksnumber: "weekNumber",
        weeknumbers: "weekNumber",
        weekyear: "weekYear",
        weekyears: "weekYear",
        ordinal: "ordinal"
      }[unit.toLowerCase()];

      if (!normalized) throw new InvalidUnitError(unit);

      return normalized;
    }

    // this is a dumbed down version of fromObject() that runs about 60% faster
    // but doesn't do any validation, makes a bunch of assumptions about what units
    // are present, and so on.
    function quickDT(obj, zone) {
      // assume we have the higher-order units
      for (const u of orderedUnits$1) {
        if (isUndefined$1(obj[u])) {
          obj[u] = defaultUnitValues[u];
        }
      }

      const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
      if (invalid) {
        return DateTime.invalid(invalid);
      }

      const tsNow = Settings.now(),
        offsetProvis = zone.offset(tsNow),
        [ts, o] = objToTS(obj, offsetProvis, zone);

      return new DateTime({
        ts,
        zone,
        o
      });
    }

    function diffRelative(start, end, opts) {
      const round = isUndefined$1(opts.round) ? true : opts.round,
        format = (c, unit) => {
          c = roundTo(c, round || opts.calendary ? 0 : 2, true);
          const formatter = end.loc.clone(opts).relFormatter(opts);
          return formatter.format(c, unit);
        },
        differ = unit => {
          if (opts.calendary) {
            if (!end.hasSame(start, unit)) {
              return end
                .startOf(unit)
                .diff(start.startOf(unit), unit)
                .get(unit);
            } else return 0;
          } else {
            return end.diff(start, unit).get(unit);
          }
        };

      if (opts.unit) {
        return format(differ(opts.unit), opts.unit);
      }

      for (const unit of opts.units) {
        const count = differ(unit);
        if (Math.abs(count) >= 1) {
          return format(count, unit);
        }
      }
      return format(0, opts.units[opts.units.length - 1]);
    }

    /**
     * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
     *
     * A DateTime comprises of:
     * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
     * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
     * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
     *
     * Here is a brief overview of the most commonly used functionality it provides:
     *
     * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromFormat}. To create one from a native JS date, use {@link fromJSDate}.
     * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},
     * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.
     * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.
     * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.
     * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.
     * * **Output**: To convert the DateTime to other representations, use the {@link toRelative}, {@link toRelativeCalendar}, {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link toMillis} and {@link toJSDate}.
     *
     * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
     */
    class DateTime {
      /**
       * @access private
       */
      constructor(config) {
        const zone = config.zone || Settings.defaultZone;

        let invalid =
          config.invalid ||
          (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) ||
          (!zone.isValid ? unsupportedZone(zone) : null);
        /**
         * @access private
         */
        this.ts = isUndefined$1(config.ts) ? Settings.now() : config.ts;

        let c = null,
          o = null;
        if (!invalid) {
          const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);

          if (unchanged) {
            [c, o] = [config.old.c, config.old.o];
          } else {
            const ot = zone.offset(this.ts);
            c = tsToObj(this.ts, ot);
            invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
            c = invalid ? null : c;
            o = invalid ? null : ot;
          }
        }

        /**
         * @access private
         */
        this._zone = zone;
        /**
         * @access private
         */
        this.loc = config.loc || Locale.create();
        /**
         * @access private
         */
        this.invalid = invalid;
        /**
         * @access private
         */
        this.weekData = null;
        /**
         * @access private
         */
        this.c = c;
        /**
         * @access private
         */
        this.o = o;
        /**
         * @access private
         */
        this.isLuxonDateTime = true;
      }

      // CONSTRUCT

      /**
       * Create a local DateTime
       * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
       * @param {number} [month=1] - The month, 1-indexed
       * @param {number} [day=1] - The day of the month
       * @param {number} [hour=0] - The hour of the day, in 24-hour time
       * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
       * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
       * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
       * @example DateTime.local()                            //~> now
       * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00
       * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00
       * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00
       * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00
       * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00
       * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10
       * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765
       * @return {DateTime}
       */
      static local(year, month, day, hour, minute, second, millisecond) {
        if (isUndefined$1(year)) {
          return new DateTime({ ts: Settings.now() });
        } else {
          return quickDT(
            {
              year,
              month,
              day,
              hour,
              minute,
              second,
              millisecond
            },
            Settings.defaultZone
          );
        }
      }

      /**
       * Create a DateTime in UTC
       * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
       * @param {number} [month=1] - The month, 1-indexed
       * @param {number} [day=1] - The day of the month
       * @param {number} [hour=0] - The hour of the day, in 24-hour time
       * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
       * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
       * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
       * @example DateTime.utc()                            //~> now
       * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z
       * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z
       * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z
       * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z
       * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z
       * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z
       * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.765Z
       * @return {DateTime}
       */
      static utc(year, month, day, hour, minute, second, millisecond) {
        if (isUndefined$1(year)) {
          return new DateTime({
            ts: Settings.now(),
            zone: FixedOffsetZone.utcInstance
          });
        } else {
          return quickDT(
            {
              year,
              month,
              day,
              hour,
              minute,
              second,
              millisecond
            },
            FixedOffsetZone.utcInstance
          );
        }
      }

      /**
       * Create a DateTime from a Javascript Date object. Uses the default zone.
       * @param {Date} date - a Javascript Date object
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @return {DateTime}
       */
      static fromJSDate(date, options = {}) {
        const ts = isDate(date) ? date.valueOf() : NaN;
        if (Number.isNaN(ts)) {
          return DateTime.invalid("invalid input");
        }

        const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
        if (!zoneToUse.isValid) {
          return DateTime.invalid(unsupportedZone(zoneToUse));
        }

        return new DateTime({
          ts: ts,
          zone: zoneToUse,
          loc: Locale.fromObject(options)
        });
      }

      /**
       * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
       * @param {number} milliseconds - a number of milliseconds since 1970 UTC
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromMillis(milliseconds, options = {}) {
        if (!isNumber(milliseconds)) {
          throw new InvalidArgumentError(
            `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
          );
        } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
          // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
          return DateTime.invalid("Timestamp out of range");
        } else {
          return new DateTime({
            ts: milliseconds,
            zone: normalizeZone(options.zone, Settings.defaultZone),
            loc: Locale.fromObject(options)
          });
        }
      }

      /**
       * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
       * @param {number} seconds - a number of seconds since 1970 UTC
       * @param {Object} options - configuration options for the DateTime
       * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
       * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
       * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromSeconds(seconds, options = {}) {
        if (!isNumber(seconds)) {
          throw new InvalidArgumentError("fromSeconds requires a numerical input");
        } else {
          return new DateTime({
            ts: seconds * 1000,
            zone: normalizeZone(options.zone, Settings.defaultZone),
            loc: Locale.fromObject(options)
          });
        }
      }

      /**
       * Create a DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.
       * @param {Object} obj - the object to create the DateTime from
       * @param {number} obj.year - a year, such as 1987
       * @param {number} obj.month - a month, 1-12
       * @param {number} obj.day - a day of the month, 1-31, depending on the month
       * @param {number} obj.ordinal - day of the year, 1-365 or 366
       * @param {number} obj.weekYear - an ISO week year
       * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
       * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
       * @param {number} obj.hour - hour of the day, 0-23
       * @param {number} obj.minute - minute of the hour, 0-59
       * @param {number} obj.second - second of the minute, 0-59
       * @param {number} obj.millisecond - millisecond of the second, 0-999
       * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
       * @param {string} [obj.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
       * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })
       * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })
       * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
       * @return {DateTime}
       */
      static fromObject(obj) {
        const zoneToUse = normalizeZone(obj.zone, Settings.defaultZone);
        if (!zoneToUse.isValid) {
          return DateTime.invalid(unsupportedZone(zoneToUse));
        }

        const tsNow = Settings.now(),
          offsetProvis = zoneToUse.offset(tsNow),
          normalized = normalizeObject(obj, normalizeUnit, [
            "zone",
            "locale",
            "outputCalendar",
            "numberingSystem"
          ]),
          containsOrdinal = !isUndefined$1(normalized.ordinal),
          containsGregorYear = !isUndefined$1(normalized.year),
          containsGregorMD = !isUndefined$1(normalized.month) || !isUndefined$1(normalized.day),
          containsGregor = containsGregorYear || containsGregorMD,
          definiteWeekDef = normalized.weekYear || normalized.weekNumber,
          loc = Locale.fromObject(obj);

        // cases:
        // just a weekday -> this week's instance of that weekday, no worries
        // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
        // (gregorian month or day) + ordinal -> error
        // otherwise just use weeks or ordinals or gregorian, depending on what's specified

        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
          throw new ConflictingSpecificationError(
            "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
          );
        }

        if (containsGregorMD && containsOrdinal) {
          throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }

        const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);

        // configure ourselves to deal with gregorian dates or week stuff
        let units,
          defaultValues,
          objNow = tsToObj(tsNow, offsetProvis);
        if (useWeekData) {
          units = orderedWeekUnits;
          defaultValues = defaultWeekUnitValues;
          objNow = gregorianToWeek(objNow);
        } else if (containsOrdinal) {
          units = orderedOrdinalUnits;
          defaultValues = defaultOrdinalUnitValues;
          objNow = gregorianToOrdinal(objNow);
        } else {
          units = orderedUnits$1;
          defaultValues = defaultUnitValues;
        }

        // set default values for missing stuff
        let foundFirst = false;
        for (const u of units) {
          const v = normalized[u];
          if (!isUndefined$1(v)) {
            foundFirst = true;
          } else if (foundFirst) {
            normalized[u] = defaultValues[u];
          } else {
            normalized[u] = objNow[u];
          }
        }

        // make sure the values we have are in range
        const higherOrderInvalid = useWeekData
            ? hasInvalidWeekData(normalized)
            : containsOrdinal
              ? hasInvalidOrdinalData(normalized)
              : hasInvalidGregorianData(normalized),
          invalid = higherOrderInvalid || hasInvalidTimeData(normalized);

        if (invalid) {
          return DateTime.invalid(invalid);
        }

        // compute the actual time
        const gregorian = useWeekData
            ? weekToGregorian(normalized)
            : containsOrdinal
              ? ordinalToGregorian(normalized)
              : normalized,
          [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),
          inst = new DateTime({
            ts: tsFinal,
            zone: zoneToUse,
            o: offsetFinal,
            loc
          });

        // gregorian data + weekday serves only to validate
        if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
          return DateTime.invalid(
            "mismatched weekday",
            `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
          );
        }

        return inst;
      }

      /**
       * Create a DateTime from an ISO 8601 string
       * @param {string} text - the ISO string
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromISO('2016-05-25T09:08:34.123')
       * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
       * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
       * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
       * @example DateTime.fromISO('2016-W05-4')
       * @return {DateTime}
       */
      static fromISO(text, opts = {}) {
        const [vals, parsedZone] = parseISODate(text);
        return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
      }

      /**
       * Create a DateTime from an RFC 2822 string
       * @param {string} text - the RFC 2822 string
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
       * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
       * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
       * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
       * @return {DateTime}
       */
      static fromRFC2822(text, opts = {}) {
        const [vals, parsedZone] = parseRFC2822Date(text);
        return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
      }

      /**
       * Create a DateTime from an HTTP header date
       * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
       * @param {string} text - the HTTP header date
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
       * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
       * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
       * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
       * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
       * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
       * @return {DateTime}
       */
      static fromHTTP(text, opts = {}) {
        const [vals, parsedZone] = parseHTTPDate(text);
        return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
      }

      /**
       * Create a DateTime from an input string and format string.
       * Defaults to en-US if no locale has been specified, regardless of the system's locale.
       * @see https://moment.github.io/luxon/docs/manual/parsing.html#table-of-tokens
       * @param {string} text - the string to parse
       * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
       * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @return {DateTime}
       */
      static fromFormat(text, fmt, opts = {}) {
        if (isUndefined$1(text) || isUndefined$1(fmt)) {
          throw new InvalidArgumentError("fromFormat requires an input string and a format");
        }

        const { locale = null, numberingSystem = null } = opts,
          localeToUse = Locale.fromOpts({
            locale,
            numberingSystem,
            defaultToEN: true
          }),
          [vals, parsedZone, invalid] = parseFromTokens(localeToUse, text, fmt);
        if (invalid) {
          return DateTime.invalid(invalid);
        } else {
          return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text);
        }
      }

      /**
       * @deprecated use fromFormat instead
       */
      static fromString(text, fmt, opts = {}) {
        return DateTime.fromFormat(text, fmt, opts);
      }

      /**
       * Create a DateTime from a SQL date, time, or datetime
       * Defaults to en-US if no locale has been specified, regardless of the system's locale
       * @param {string} text - the string to parse
       * @param {Object} opts - options to affect the creation
       * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
       * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
       * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
       * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
       * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
       * @example DateTime.fromSQL('2017-05-15')
       * @example DateTime.fromSQL('2017-05-15 09:12:34')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
       * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
       * @example DateTime.fromSQL('09:12:34.342')
       * @return {DateTime}
       */
      static fromSQL(text, opts = {}) {
        const [vals, parsedZone] = parseSQL(text);
        return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
      }

      /**
       * Create an invalid DateTime.
       * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
       * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
       * @return {DateTime}
       */
      static invalid(reason, explanation = null) {
        if (!reason) {
          throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
        }

        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);

        if (Settings.throwOnInvalid) {
          throw new InvalidDateTimeError(invalid);
        } else {
          return new DateTime({ invalid });
        }
      }

      /**
       * Check if an object is a DateTime. Works across context boundaries
       * @param {object} o
       * @return {boolean}
       */
      static isDateTime(o) {
        return (o && o.isLuxonDateTime) || false;
      }

      // INFO

      /**
       * Get the value of unit.
       * @param {string} unit - a unit such as 'minute' or 'day'
       * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
       * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
       * @return {number}
       */
      get(unit) {
        return this[unit];
      }

      /**
       * Returns whether the DateTime is valid. Invalid DateTimes occur when:
       * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
       * * The DateTime was created by an operation on another invalid date
       * @type {boolean}
       */
      get isValid() {
        return this.invalid === null;
      }

      /**
       * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
       * @type {string}
       */
      get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
      }

      /**
       * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
       * @type {string}
       */
      get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
      }

      /**
       * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
       *
       * @type {string}
       */
      get locale() {
        return this.isValid ? this.loc.locale : null;
      }

      /**
       * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
       *
       * @type {string}
       */
      get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
      }

      /**
       * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
       *
       * @type {string}
       */
      get outputCalendar() {
        return this.isValid ? this.loc.outputCalendar : null;
      }

      /**
       * Get the time zone associated with this DateTime.
       * @type {Zone}
       */
      get zone() {
        return this._zone;
      }

      /**
       * Get the name of the time zone.
       * @type {string}
       */
      get zoneName() {
        return this.isValid ? this.zone.name : null;
      }

      /**
       * Get the year
       * @example DateTime.local(2017, 5, 25).year //=> 2017
       * @type {number}
       */
      get year() {
        return this.isValid ? this.c.year : NaN;
      }

      /**
       * Get the quarter
       * @example DateTime.local(2017, 5, 25).quarter //=> 2
       * @type {number}
       */
      get quarter() {
        return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
      }

      /**
       * Get the month (1-12).
       * @example DateTime.local(2017, 5, 25).month //=> 5
       * @type {number}
       */
      get month() {
        return this.isValid ? this.c.month : NaN;
      }

      /**
       * Get the day of the month (1-30ish).
       * @example DateTime.local(2017, 5, 25).day //=> 25
       * @type {number}
       */
      get day() {
        return this.isValid ? this.c.day : NaN;
      }

      /**
       * Get the hour of the day (0-23).
       * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
       * @type {number}
       */
      get hour() {
        return this.isValid ? this.c.hour : NaN;
      }

      /**
       * Get the minute of the hour (0-59).
       * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
       * @type {number}
       */
      get minute() {
        return this.isValid ? this.c.minute : NaN;
      }

      /**
       * Get the second of the minute (0-59).
       * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
       * @type {number}
       */
      get second() {
        return this.isValid ? this.c.second : NaN;
      }

      /**
       * Get the millisecond of the second (0-999).
       * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
       * @type {number}
       */
      get millisecond() {
        return this.isValid ? this.c.millisecond : NaN;
      }

      /**
       * Get the week year
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2014, 11, 31).weekYear //=> 2015
       * @type {number}
       */
      get weekYear() {
        return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
      }

      /**
       * Get the week number of the week year (1-52ish).
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
       * @type {number}
       */
      get weekNumber() {
        return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
      }

      /**
       * Get the day of the week.
       * 1 is Monday and 7 is Sunday
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2014, 11, 31).weekday //=> 4
       * @type {number}
       */
      get weekday() {
        return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
      }

      /**
       * Get the ordinal (meaning the day of the year)
       * @example DateTime.local(2017, 5, 25).ordinal //=> 145
       * @type {number|DateTime}
       */
      get ordinal() {
        return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
      }

      /**
       * Get the human readable short month name, such as 'Oct'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
       * @type {string}
       */
      get monthShort() {
        return this.isValid ? Info.months("short", { locale: this.locale })[this.month - 1] : null;
      }

      /**
       * Get the human readable long month name, such as 'October'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).monthLong //=> October
       * @type {string}
       */
      get monthLong() {
        return this.isValid ? Info.months("long", { locale: this.locale })[this.month - 1] : null;
      }

      /**
       * Get the human readable short weekday, such as 'Mon'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
       * @type {string}
       */
      get weekdayShort() {
        return this.isValid ? Info.weekdays("short", { locale: this.locale })[this.weekday - 1] : null;
      }

      /**
       * Get the human readable long weekday, such as 'Monday'.
       * Defaults to the system's locale if no locale has been specified
       * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
       * @type {string}
       */
      get weekdayLong() {
        return this.isValid ? Info.weekdays("long", { locale: this.locale })[this.weekday - 1] : null;
      }

      /**
       * Get the UTC offset of this DateTime in minutes
       * @example DateTime.local().offset //=> -240
       * @example DateTime.utc().offset //=> 0
       * @type {number}
       */
      get offset() {
        return this.isValid ? +this.o : NaN;
      }

      /**
       * Get the short human name for the zone's current offset, for example "EST" or "EDT".
       * Defaults to the system's locale if no locale has been specified
       * @type {string}
       */
      get offsetNameShort() {
        if (this.isValid) {
          return this.zone.offsetName(this.ts, {
            format: "short",
            locale: this.locale
          });
        } else {
          return null;
        }
      }

      /**
       * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
       * Defaults to the system's locale if no locale has been specified
       * @type {string}
       */
      get offsetNameLong() {
        if (this.isValid) {
          return this.zone.offsetName(this.ts, {
            format: "long",
            locale: this.locale
          });
        } else {
          return null;
        }
      }

      /**
       * Get whether this zone's offset ever changes, as in a DST.
       * @type {boolean}
       */
      get isOffsetFixed() {
        return this.isValid ? this.zone.universal : null;
      }

      /**
       * Get whether the DateTime is in a DST.
       * @type {boolean}
       */
      get isInDST() {
        if (this.isOffsetFixed) {
          return false;
        } else {
          return (
            this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset
          );
        }
      }

      /**
       * Returns true if this DateTime is in a leap year, false otherwise
       * @example DateTime.local(2016).isInLeapYear //=> true
       * @example DateTime.local(2013).isInLeapYear //=> false
       * @type {boolean}
       */
      get isInLeapYear() {
        return isLeapYear(this.year);
      }

      /**
       * Returns the number of days in this DateTime's month
       * @example DateTime.local(2016, 2).daysInMonth //=> 29
       * @example DateTime.local(2016, 3).daysInMonth //=> 31
       * @type {number}
       */
      get daysInMonth() {
        return daysInMonth(this.year, this.month);
      }

      /**
       * Returns the number of days in this DateTime's year
       * @example DateTime.local(2016).daysInYear //=> 366
       * @example DateTime.local(2013).daysInYear //=> 365
       * @type {number}
       */
      get daysInYear() {
        return this.isValid ? daysInYear(this.year) : NaN;
      }

      /**
       * Returns the number of weeks in this DateTime's year
       * @see https://en.wikipedia.org/wiki/ISO_week_date
       * @example DateTime.local(2004).weeksInWeekYear //=> 53
       * @example DateTime.local(2013).weeksInWeekYear //=> 52
       * @type {number}
       */
      get weeksInWeekYear() {
        return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
      }

      /**
       * Returns the resolved Intl options for this DateTime.
       * This is useful in understanding the behavior of formatting methods
       * @param {Object} opts - the same options as toLocaleString
       * @return {Object}
       */
      resolvedLocaleOpts(opts = {}) {
        const { locale, numberingSystem, calendar } = Formatter.create(
          this.loc.clone(opts),
          opts
        ).resolvedOptions(this);
        return { locale, numberingSystem, outputCalendar: calendar };
      }

      // TRANSFORM

      /**
       * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
       *
       * Equivalent to {@link setZone}('utc')
       * @param {number} [offset=0] - optionally, an offset from UTC in minutes
       * @param {Object} [opts={}] - options to pass to `setZone()`
       * @return {DateTime}
       */
      toUTC(offset = 0, opts = {}) {
        return this.setZone(FixedOffsetZone.instance(offset), opts);
      }

      /**
       * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
       *
       * Equivalent to `setZone('local')`
       * @return {DateTime}
       */
      toLocal() {
        return this.setZone(Settings.defaultZone);
      }

      /**
       * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
       *
       * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.
       * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.
       * @param {Object} opts - options
       * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
       * @return {DateTime}
       */
      setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
        zone = normalizeZone(zone, Settings.defaultZone);
        if (zone.equals(this.zone)) {
          return this;
        } else if (!zone.isValid) {
          return DateTime.invalid(unsupportedZone(zone));
        } else {
          let newTS = this.ts;
          if (keepLocalTime || keepCalendarTime) {
            const offsetGuess = zone.offset(this.ts);
            const asObj = this.toObject();
            [newTS] = objToTS(asObj, offsetGuess, zone);
          }
          return clone$1(this, { ts: newTS, zone });
        }
      }

      /**
       * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
       * @param {Object} properties - the properties to set
       * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
       * @return {DateTime}
       */
      reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
        const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
        return clone$1(this, { loc });
      }

      /**
       * "Set" the locale. Returns a newly-constructed DateTime.
       * Just a convenient alias for reconfigure({ locale })
       * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
       * @return {DateTime}
       */
      setLocale(locale) {
        return this.reconfigure({ locale });
      }

      /**
       * "Set" the values of specified units. Returns a newly-constructed DateTime.
       * You can only set units with this method; for "setting" metadata, see {@link reconfigure} and {@link setZone}.
       * @param {Object} values - a mapping of units to numbers
       * @example dt.set({ year: 2017 })
       * @example dt.set({ hour: 8, minute: 30 })
       * @example dt.set({ weekday: 5 })
       * @example dt.set({ year: 2005, ordinal: 234 })
       * @return {DateTime}
       */
      set(values) {
        if (!this.isValid) return this;

        const normalized = normalizeObject(values, normalizeUnit, []),
          settingWeekStuff =
            !isUndefined$1(normalized.weekYear) ||
            !isUndefined$1(normalized.weekNumber) ||
            !isUndefined$1(normalized.weekday);

        let mixed;
        if (settingWeekStuff) {
          mixed = weekToGregorian(Object.assign(gregorianToWeek(this.c), normalized));
        } else if (!isUndefined$1(normalized.ordinal)) {
          mixed = ordinalToGregorian(Object.assign(gregorianToOrdinal(this.c), normalized));
        } else {
          mixed = Object.assign(this.toObject(), normalized);

          // if we didn't set the day but we ended up on an overflow date,
          // use the last day of the right month
          if (isUndefined$1(normalized.day)) {
            mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
          }
        }

        const [ts, o] = objToTS(mixed, this.o, this.zone);
        return clone$1(this, { ts, o });
      }

      /**
       * Add a period of time to this DateTime and return the resulting DateTime
       *
       * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
       * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       * @example DateTime.local().plus(123) //~> in 123 milliseconds
       * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes
       * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow
       * @example DateTime.local().plus({ days: -1 }) //~> this time yesterday
       * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
       * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
       * @return {DateTime}
       */
      plus(duration) {
        if (!this.isValid) return this;
        const dur = friendlyDuration(duration);
        return clone$1(this, adjustTime(this, dur));
      }

      /**
       * Subtract a period of time to this DateTime and return the resulting DateTime
       * See {@link plus}
       * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
       @return {DateTime}
      */
      minus(duration) {
        if (!this.isValid) return this;
        const dur = friendlyDuration(duration).negate();
        return clone$1(this, adjustTime(this, dur));
      }

      /**
       * "Set" this DateTime to the beginning of a unit of time.
       * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
       * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
       * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
       * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
       * @return {DateTime}
       */
      startOf(unit) {
        if (!this.isValid) return this;
        const o = {},
          normalizedUnit = Duration.normalizeUnit(unit);
        switch (normalizedUnit) {
          case "years":
            o.month = 1;
          // falls through
          case "quarters":
          case "months":
            o.day = 1;
          // falls through
          case "weeks":
          case "days":
            o.hour = 0;
          // falls through
          case "hours":
            o.minute = 0;
          // falls through
          case "minutes":
            o.second = 0;
          // falls through
          case "seconds":
            o.millisecond = 0;
            break;
          // no default, invalid units throw in normalizeUnit()
        }

        if (normalizedUnit === "weeks") {
          o.weekday = 1;
        }

        if (normalizedUnit === "quarters") {
          const q = Math.ceil(this.month / 3);
          o.month = (q - 1) * 3 + 1;
        }

        return this.set(o);
      }

      /**
       * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
       * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.
       * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
       * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
       * @return {DateTime}
       */
      endOf(unit) {
        return this.isValid
          ? this.plus({ [unit]: 1 })
              .startOf(unit)
              .minus(1)
          : this;
      }

      // OUTPUT

      /**
       * Returns a string representation of this DateTime formatted according to the specified format string.
       * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens).
       * Defaults to en-US if no locale has been specified, regardless of the system's locale.
       * @see https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens
       * @param {string} fmt - the format string
       * @param {Object} opts - opts to override the configuration options
       * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
       * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
       * @example DateTime.local().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
       * @example DateTime.local().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
       * @return {string}
       */
      toFormat(fmt, opts = {}) {
        return this.isValid
          ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt)
          : INVALID$2;
      }

      /**
       * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
       * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
       * of the DateTime in the assigned locale.
       * Defaults to the system's locale if no locale has been specified
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
       * @param opts {Object} - Intl.DateTimeFormat constructor options and configuration options
       * @example DateTime.local().toLocaleString(); //=> 4/20/2017
       * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
       * @example DateTime.local().toLocaleString({ locale: 'en-gb' }); //=> '20/04/2017'
       * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
       * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
       * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
       * @example DateTime.local().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
       * @example DateTime.local().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
       * @example DateTime.local().toLocaleString({ hour: '2-digit', minute: '2-digit', hour12: false }); //=> '11:32'
       * @return {string}
       */
      toLocaleString(opts = DATE_SHORT) {
        return this.isValid
          ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)
          : INVALID$2;
      }

      /**
       * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
       * Defaults to the system's locale if no locale has been specified
       * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
       * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
       * @example DateTime.local().toLocaleParts(); //=> [
       *                                   //=>   { type: 'day', value: '25' },
       *                                   //=>   { type: 'literal', value: '/' },
       *                                   //=>   { type: 'month', value: '05' },
       *                                   //=>   { type: 'literal', value: '/' },
       *                                   //=>   { type: 'year', value: '1982' }
       *                                   //=> ]
       */
      toLocaleParts(opts = {}) {
        return this.isValid
          ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)
          : [];
      }

      /**
       * Returns an ISO 8601-compliant string representation of this DateTime
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
       * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'
       * @example DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
       * @example DateTime.local().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
       * @return {string}
       */
      toISO(opts = {}) {
        if (!this.isValid) {
          return null;
        }

        return `${this.toISODate(opts)}T${this.toISOTime(opts)}`;
      }

      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's date component
       * @param {Object} opts - options
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
       * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
       * @return {string}
       */
      toISODate({ format = "extended" } = {}) {
        let fmt = format === "basic" ? "yyyyMMdd" : "yyyy-MM-dd";
        if (this.year > 9999) {
          fmt = "+" + fmt;
        }

        return toTechFormat(this, fmt);
      }

      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's week date
       * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
       * @return {string}
       */
      toISOWeekDate() {
        return toTechFormat(this, "kkkk-'W'WW-c");
      }

      /**
       * Returns an ISO 8601-compliant string representation of this DateTime's time component
       * @param {Object} opts - options
       * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
       * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @param {string} [opts.format='extended'] - choose between the basic and extended format
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
       * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
       * @return {string}
       */
      toISOTime({
        suppressMilliseconds = false,
        suppressSeconds = false,
        includeOffset = true,
        format = "extended"
      } = {}) {
        return toTechTimeFormat(this, {
          suppressSeconds,
          suppressMilliseconds,
          includeOffset,
          format
        });
      }

      /**
       * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC
       * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
       * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
       * @return {string}
       */
      toRFC2822() {
        return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
      }

      /**
       * Returns a string representation of this DateTime appropriate for use in HTTP headers.
       * Specifically, the string conforms to RFC 1123.
       * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
       * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
       * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
       * @return {string}
       */
      toHTTP() {
        return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
      }

      /**
       * Returns a string representation of this DateTime appropriate for use in SQL Date
       * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
       * @return {string}
       */
      toSQLDate() {
        return toTechFormat(this, "yyyy-MM-dd");
      }

      /**
       * Returns a string representation of this DateTime appropriate for use in SQL Time
       * @param {Object} opts - options
       * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @example DateTime.utc().toSQL() //=> '05:15:16.345'
       * @example DateTime.local().toSQL() //=> '05:15:16.345 -04:00'
       * @example DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'
       * @example DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
       * @return {string}
       */
      toSQLTime({ includeOffset = true, includeZone = false } = {}) {
        return toTechTimeFormat(this, {
          includeOffset,
          includeZone,
          spaceZone: true
        });
      }

      /**
       * Returns a string representation of this DateTime appropriate for use in SQL DateTime
       * @param {Object} opts - options
       * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
       * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
       * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
       * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
       * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
       * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
       * @return {string}
       */
      toSQL(opts = {}) {
        if (!this.isValid) {
          return null;
        }

        return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
      }

      /**
       * Returns a string representation of this DateTime appropriate for debugging
       * @return {string}
       */
      toString() {
        return this.isValid ? this.toISO() : INVALID$2;
      }

      /**
       * Returns the epoch milliseconds of this DateTime. Alias of {@link toMillis}
       * @return {number}
       */
      valueOf() {
        return this.toMillis();
      }

      /**
       * Returns the epoch milliseconds of this DateTime.
       * @return {number}
       */
      toMillis() {
        return this.isValid ? this.ts : NaN;
      }

      /**
       * Returns the epoch seconds of this DateTime.
       * @return {number}
       */
      toSeconds() {
        return this.isValid ? this.ts / 1000 : NaN;
      }

      /**
       * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
       * @return {string}
       */
      toJSON() {
        return this.toISO();
      }

      /**
       * Returns a BSON serializable equivalent to this DateTime.
       * @return {Date}
       */
      toBSON() {
        return this.toJSDate();
      }

      /**
       * Returns a Javascript object with this DateTime's year, month, day, and so on.
       * @param opts - options for generating the object
       * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
       * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
       * @return {Object}
       */
      toObject(opts = {}) {
        if (!this.isValid) return {};

        const base = Object.assign({}, this.c);

        if (opts.includeConfig) {
          base.outputCalendar = this.outputCalendar;
          base.numberingSystem = this.loc.numberingSystem;
          base.locale = this.loc.locale;
        }
        return base;
      }

      /**
       * Returns a Javascript Date equivalent to this DateTime.
       * @return {Date}
       */
      toJSDate() {
        return new Date(this.isValid ? this.ts : NaN);
      }

      // COMPARE

      /**
       * Return the difference between two DateTimes as a Duration.
       * @param {DateTime} otherDateTime - the DateTime to compare this one to
       * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @example
       * var i1 = DateTime.fromISO('1982-05-25T09:45'),
       *     i2 = DateTime.fromISO('1983-10-14T10:30');
       * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
       * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
       * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
       * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
       * @return {Duration}
       */
      diff(otherDateTime, unit = "milliseconds", opts = {}) {
        if (!this.isValid || !otherDateTime.isValid) {
          return Duration.invalid(
            this.invalid || otherDateTime.invalid,
            "created by diffing an invalid DateTime"
          );
        }

        const durOpts = Object.assign(
          { locale: this.locale, numberingSystem: this.numberingSystem },
          opts
        );

        const units = maybeArray(unit).map(Duration.normalizeUnit),
          otherIsLater = otherDateTime.valueOf() > this.valueOf(),
          earlier = otherIsLater ? this : otherDateTime,
          later = otherIsLater ? otherDateTime : this,
          diffed = diff(earlier, later, units, durOpts);

        return otherIsLater ? diffed.negate() : diffed;
      }

      /**
       * Return the difference between this DateTime and right now.
       * See {@link diff}
       * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
       * @param {Object} opts - options that affect the creation of the Duration
       * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
       * @return {Duration}
       */
      diffNow(unit = "milliseconds", opts = {}) {
        return this.diff(DateTime.local(), unit, opts);
      }

      /**
       * Return an Interval spanning between this DateTime and another DateTime
       * @param {DateTime} otherDateTime - the other end point of the Interval
       * @return {Interval}
       */
      until(otherDateTime) {
        return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
      }

      /**
       * Return whether this DateTime is in the same unit of time as another DateTime
       * @param {DateTime} otherDateTime - the other DateTime
       * @param {string} unit - the unit of time to check sameness on
       * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day
       * @return {boolean}
       */
      hasSame(otherDateTime, unit) {
        if (!this.isValid) return false;
        if (unit === "millisecond") {
          return this.valueOf() === otherDateTime.valueOf();
        } else {
          const inputMs = otherDateTime.valueOf();
          return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);
        }
      }

      /**
       * Equality check
       * Two DateTimes are equal iff they represent the same millisecond, have the same zone and location, and are both valid.
       * To compare just the millisecond values, use `+dt1 === +dt2`.
       * @param {DateTime} other - the other DateTime
       * @return {boolean}
       */
      equals(other) {
        return (
          this.isValid &&
          other.isValid &&
          this.valueOf() === other.valueOf() &&
          this.zone.equals(other.zone) &&
          this.loc.equals(other.loc)
        );
      }

      /**
       * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
       * platform supports Intl.RelativeTimeFormat. Rounds down by default.
       * @param {Object} options - options that affect the output
       * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
       * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
       * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
       * @param {boolean} [options.round=true] - whether to round the numbers in the output.
       * @param {boolean} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
       * @param {string} options.locale - override the locale of this DateTime
       * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
       * @example DateTime.local().plus({ days: 1 }).toRelative() //=> "in 1 day"
       * @example DateTime.local().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
       * @example DateTime.local().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
       * @example DateTime.local().minus({ days: 2 }).toRelative() //=> "2 days ago"
       * @example DateTime.local().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
       * @example DateTime.local().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
       */
      toRelative(options = {}) {
        if (!this.isValid) return null;
        const base = options.base || DateTime.fromObject({ zone: this.zone }),
          padding = options.padding ? (this < base ? -options.padding : options.padding) : 0;
        return diffRelative(
          base,
          this.plus(padding),
          Object.assign(options, {
            numeric: "always",
            units: ["years", "months", "days", "hours", "minutes", "seconds"]
          })
        );
      }

      /**
       * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
       * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
       * @param {Object} options - options that affect the output
       * @param {DateTime} [options.base=DateTime.local()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
       * @param {string} options.locale - override the locale of this DateTime
       * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
       * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
       * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
       * @example DateTime.local().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
       * @example DateTime.local().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
       * @example DateTime.local().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
       */
      toRelativeCalendar(options = {}) {
        if (!this.isValid) return null;

        return diffRelative(
          options.base || DateTime.fromObject({ zone: this.zone }),
          this,
          Object.assign(options, {
            numeric: "auto",
            units: ["years", "months", "days"],
            calendary: true
          })
        );
      }

      /**
       * Return the min of several date times
       * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
       * @return {DateTime} the min DateTime, or undefined if called with no argument
       */
      static min(...dateTimes) {
        if (!dateTimes.every(DateTime.isDateTime)) {
          throw new InvalidArgumentError("min requires all arguments be DateTimes");
        }
        return bestBy(dateTimes, i => i.valueOf(), Math.min);
      }

      /**
       * Return the max of several date times
       * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
       * @return {DateTime} the max DateTime, or undefined if called with no argument
       */
      static max(...dateTimes) {
        if (!dateTimes.every(DateTime.isDateTime)) {
          throw new InvalidArgumentError("max requires all arguments be DateTimes");
        }
        return bestBy(dateTimes, i => i.valueOf(), Math.max);
      }

      // MISC

      /**
       * Explain how a string would be parsed by fromFormat()
       * @param {string} text - the string to parse
       * @param {string} fmt - the format the string is expected to be in (see description)
       * @param {Object} options - options taken by fromFormat()
       * @return {Object}
       */
      static fromFormatExplain(text, fmt, options = {}) {
        const { locale = null, numberingSystem = null } = options,
          localeToUse = Locale.fromOpts({
            locale,
            numberingSystem,
            defaultToEN: true
          });
        return explainFromTokens(localeToUse, text, fmt);
      }

      /**
       * @deprecated use fromFormatExplain instead
       */
      static fromStringExplain(text, fmt, options = {}) {
        return DateTime.fromFormatExplain(text, fmt, options);
      }

      // FORMAT PRESETS

      /**
       * {@link toLocaleString} format like 10/14/1983
       * @type {Object}
       */
      static get DATE_SHORT() {
        return DATE_SHORT;
      }

      /**
       * {@link toLocaleString} format like 'Oct 14, 1983'
       * @type {Object}
       */
      static get DATE_MED() {
        return DATE_MED;
      }

      /**
       * {@link toLocaleString} format like 'October 14, 1983'
       * @type {Object}
       */
      static get DATE_FULL() {
        return DATE_FULL;
      }

      /**
       * {@link toLocaleString} format like 'Tuesday, October 14, 1983'
       * @type {Object}
       */
      static get DATE_HUGE() {
        return DATE_HUGE;
      }

      /**
       * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_SIMPLE() {
        return TIME_SIMPLE;
      }

      /**
       * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_SECONDS() {
        return TIME_WITH_SECONDS;
      }

      /**
       * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_SHORT_OFFSET() {
        return TIME_WITH_SHORT_OFFSET;
      }

      /**
       * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get TIME_WITH_LONG_OFFSET() {
        return TIME_WITH_LONG_OFFSET;
      }

      /**
       * {@link toLocaleString} format like '09:30', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_SIMPLE() {
        return TIME_24_SIMPLE;
      }

      /**
       * {@link toLocaleString} format like '09:30:23', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_SECONDS() {
        return TIME_24_WITH_SECONDS;
      }

      /**
       * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_SHORT_OFFSET() {
        return TIME_24_WITH_SHORT_OFFSET;
      }

      /**
       * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
       * @type {Object}
       */
      static get TIME_24_WITH_LONG_OFFSET() {
        return TIME_24_WITH_LONG_OFFSET;
      }

      /**
       * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_SHORT() {
        return DATETIME_SHORT;
      }

      /**
       * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_SHORT_WITH_SECONDS() {
        return DATETIME_SHORT_WITH_SECONDS;
      }

      /**
       * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED() {
        return DATETIME_MED;
      }

      /**
       * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED_WITH_SECONDS() {
        return DATETIME_MED_WITH_SECONDS;
      }

      /**
       * {@link toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_MED_WITH_WEEKDAY() {
        return DATETIME_MED_WITH_WEEKDAY;
      }

      /**
       * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_FULL() {
        return DATETIME_FULL;
      }

      /**
       * {@link toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_FULL_WITH_SECONDS() {
        return DATETIME_FULL_WITH_SECONDS;
      }

      /**
       * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_HUGE() {
        return DATETIME_HUGE;
      }

      /**
       * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
       * @type {Object}
       */
      static get DATETIME_HUGE_WITH_SECONDS() {
        return DATETIME_HUGE_WITH_SECONDS;
      }
    }

    /**
     * @private
     */
    function friendlyDateTime(dateTimeish) {
      if (DateTime.isDateTime(dateTimeish)) {
        return dateTimeish;
      } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
        return DateTime.fromJSDate(dateTimeish);
      } else if (dateTimeish && typeof dateTimeish === "object") {
        return DateTime.fromObject(dateTimeish);
      } else {
        throw new InvalidArgumentError(
          `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
        );
      }
    }

    var fs = {};

    const scopedEval = eval;
    const templateCache = new Map();
    /**
     * returns a valid jsonx.children property
     * @param {Object} options
     * @param {Object} [options.jsonx ={}]- Valid JSONX JSON
     * @param {Object} [options.props=options.jsonx.children] - Props to pull children  Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops)
     * @returns {Object[]|String} returns a valid jsonx.children property that's either an array of JSONX objects or a string
     * @example
     * const sampleJSONX = {
      component: 'div',
      props: {
        id: 'generatedJSONX',
        className:'jsonx',
      },
      children: [
        {
          component: 'p',
          props: {
            style: {
              color: 'red',
            },
          },
          children:'hello world',
        },
        {
          component: 'div',
          children: [
            {
              component: 'ul',
              children: [
                {
                  component: 'li',
                  children:'list',
                },
              ],
            },
          ],
        },
      ],
    };
    const JSONXChildren = getChildrenProperty({ jsonx: sampleJSONX, }); //=> [ [jsonx Object],[jsonx Object]]
    const JSONXChildrenPTag = getChildrenProperty({ jsonx: sampleJSONX.children[ 0 ], }); //=>hello world
     */
    function getChildrenProperty(options = {}) {
        const { jsonx = {} } = options;
        const props = options.props || jsonx.props || {};
        if (typeof props._children !== "undefined" /* && !jsonx.children */) {
            if (Array.isArray(props._children) ||
                typeof props._children === "string" ||
                typeof props._children === "number") {
                return props._children;
            }
            else {
                return jsonx.children;
            }
        }
        else if (typeof jsonx.children === "undefined") {
            if (props &&
                props.children &&
                (typeof props.children !== "undefined" || Array.isArray(props.children))) {
                return props.children;
            }
            else {
                return null;
            }
        }
        else {
            return jsonx.children;
        }
    }
    /**
     * Used to pass properties down to child components if passprops is set to true
     * @param {Object} options
     * @param {Object} [options.jsonx ={}] - Valid JSONX JSON
     * @param {Object} [options.childjsonx ={}] - Valid JSONX JSON
     * @param {Number} options.renderIndex - React key property
     * @param {Object} [options.props=options.jsonx.props] - Props to pull children  Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops)
     * @returns {Object|String} returns a valid  Valid JSONX Child object or a string
     */
    function getChildrenProps(options = {}) {
        const { jsonx = {}, childjsonx, renderIndex } = options;
        const props = options.props || jsonx.props || {};
        return jsonx.passprops && childjsonx && typeof childjsonx === "object"
            ? Object.assign({}, childjsonx, {
                props: Object.assign({}, props, (childjsonx.thisprops && childjsonx.thisprops.style) || // this is to make sure when you bind props, if you've defined props in a dynamic property, to not use bind props to  remove passing down styles
                    (childjsonx.asyncprops && childjsonx.asyncprops.style) ||
                    (childjsonx.windowprops && childjsonx.windowprops.style)
                    ? {}
                    : {
                        style: {}
                    }, childjsonx.props, 
                //@ts-ignore
                typeof this !== "undefined" || (this && this.disableRenderIndexKey)
                    ? {}
                    : { key: typeof renderIndex !== "undefined"
                            ? renderIndex + Math.random()
                            : Math.random()
                    })
            })
            : childjsonx;
    }
    function fetchJSONSync(path, options) {
        try {
            const config = {
                method: "GET",
                headers: [],
                ...options
            };
            const request = new XMLHttpRequest();
            request.open(config && config.method || "GET", path, false); // `false` makes the request synchronous
            if (config.headers) {
                Object.keys(config.headers).forEach(header => {
                    request.setRequestHeader(header, config.headers[header]);
                });
            }
            request.send(config.body ? JSON.stringify(config.body) : undefined);
            if (request.status !== 200) {
                throw new Error(request.responseText);
            }
            else
                return request.responseText;
        }
        catch (e) {
            throw e;
        }
    }
    function getChildrenTemplate(template) {
        const cachedTemplate = templateCache.get(template);
        if (cachedTemplate) {
            return cachedTemplate;
        }
        else if (typeof window !== "undefined" &&
            typeof window.XMLHttpRequest === "function" &&
            !fs.readFileSync) {
            const jsFile = fetchJSONSync(template);
            const jsonxModule = scopedEval(`(${jsFile})`);
            templateCache.set(template, jsonxModule);
            return jsonxModule;
        }
        else if (typeof template === "string") {
            const jsFile = fs.readFileSync(path.resolve(template)).toString();
            const jsonxModule = scopedEval(`(${jsFile})`);
            // console.log({jsonxModule})
            templateCache.set(template, jsonxModule);
            // console.log({ templateCache });
            return jsonxModule;
        }
        return null;
    }
    function clearTemplateCache() {
        templateCache.clear();
    }
    /**
     * returns React Child Elements via JSONX
     * @param {*} options
     * @property {object} this - options for getReactElementFromJSONX
     * @property {Object} [this.componentLibraries] - react components to render with JSONX
     * @property {boolean} [this.debug=false] - use debug messages
     * @property {function} [this.logError=console.error] - error logging function
     * @property {string[]} [this.boundedComponents=[]] - list of components that require a bound this context (usefult for redux router)
     */
    function getJSONXChildren(options = { jsonx: {} }) {
        // eslint-disable-next-line
        const { jsonx, resources, renderIndex, logError = console.error } = options;
        try {
            const context = this || {};
            const props = options && options.props
                ? options.props
                : jsonx && jsonx.props
                    ? jsonx.props
                    : {};
            if (!jsonx)
                return null;
            jsonx.children = getChildrenProperty({ jsonx, props });
            props._children = undefined;
            delete props._children;
            if (jsonx.___template)
                jsonx.children = [getChildrenTemplate(jsonx.___template)];
            else if (typeof jsonx.children === 'undefined' || jsonx.children === null)
                return undefined;
            else if (jsonx.children && jsonx.___stringifyChildren)
                jsonx.children = JSON.stringify.apply(null, [jsonx.children, null, 2]);
            //TODO: fix passing applied params
            else if (jsonx.children && jsonx.___toStringChildren)
                jsonx.children = jsonx.children.toString();
            else if (jsonx.children && jsonx.___toNumeral)
                jsonx.children = numeral(jsonx.children).format(jsonx.___toNumeral);
            else if (jsonx.children && jsonx.___JSDatetoLuxonString)
                jsonx.children = DateTime.fromJSDate(jsonx.children).toFormat(jsonx.___JSDatetoLuxonString);
            else if (jsonx.children && jsonx.___ISOtoLuxonString)
                jsonx.children = DateTime.fromISO(jsonx.children, {
                    zone: jsonx.___FromLuxonTimeZone
                }).toFormat(jsonx.___ISOtoLuxonString);
            if (typeof jsonx.children === 'string')
                return jsonx.children;
            const children = jsonx.children && Array.isArray(jsonx.children)
                ? jsonx.children
                    .map(childjsonx => getReactElementFromJSONX.call(context, getChildrenProps.call(this, { jsonx, childjsonx, props, renderIndex }), resources))
                    .filter(child => child !== null)
                : jsonx.children;
            return children;
        }
        catch (e) {
            this && this.debug && logError(e, e.stack ? e.stack : "no stack");
            return null;
        }
    }

    var jsonxChildren = /*#__PURE__*/Object.freeze({
        __proto__: null,
        templateCache: templateCache,
        getChildrenProperty: getChildrenProperty,
        getChildrenProps: getChildrenProps,
        fetchJSONSync: fetchJSONSync,
        getChildrenTemplate: getChildrenTemplate,
        clearTemplateCache: clearTemplateCache,
        getJSONXChildren: getJSONXChildren
    });

    // import React, { createElement, } from 'react';
    const createElement = react.createElement;
    const { componentMap: componentMap$1, getComponentFromMap: getComponentFromMap$1, getBoundedComponents: getBoundedComponents$1, DynamicComponent: DynamicComponent$1, FormComponent: FormComponent$1, } = jsonxComponents;
    const { getComputedProps: getComputedProps$1 } = jsonxProps;
    const { getJSONXChildren: getJSONXChildren$1 } = jsonxChildren;
    const { displayComponent: displayComponent$1 } = jsonxUtils;
    let renderIndex = 0;
    /**
     * Use React.createElement and JSONX JSON to create React elements
     * @example
     * // Uses react to create the equivalent JSX <myComponent style={{color:blue}}>hello world</myComponent>
     * jsonx.getReactElementFromJSONX({component:'myCompnent',props:{style:{color:'blue'}},children:'hello world'})
     * @param {object} jsonx - any valid JSONX JSON object
     * @param {object} resources - any additional resource used for asynchronous properties
     * @property {object} this - options for getReactElementFromJSONX
     * @property {Object} [this.componentLibraries] - react components to render with JSONX
     * @property {boolean} [this.debug=false] - use debug messages
     * @property {boolean} [this.returnJSON=false] - return json object of {type,props,children} instead of react element
     * @property {boolean} [this.disableRenderIndexKey=false] - disables auto assign a key prop
     * @property {function} [this.logError=console.error] - error logging function
     * @property {string[]} [this.boundedComponents=[]] - list of components that require a bound this context (usefult for redux router)
     * @returns {function} React element via React.createElement
     */
    function getReactElementFromJSONX(jsonx, resources = {}) {
        // eslint-disable-next-line
        const { componentLibraries = {}, debug = false, returnJSON = false, logError = console.error, boundedComponents = [], disableRenderIndexKey = true } = this || {};
        // const componentLibraries = this.componentLibraries;
        if (!jsonx)
            return null;
        if (jsonx.type)
            jsonx.component = jsonx.type;
        if (validSimpleJSONXSyntax(jsonx))
            jsonx = simpleJSONXSyntax(jsonx);
        if (!jsonx || !jsonx.component)
            return createElement("span", {}, debug ? "Error: Missing Component Object" : "");
        try {
            const components = Object.assign({ DynamicComponent: DynamicComponent$1.bind(this) }, { FormComponent: FormComponent$1.bind(this) }, componentMap$1, this.reactComponents);
            const reactComponents = boundedComponents.length
                ? getBoundedComponents$1.call(this, {
                    boundedComponents,
                    reactComponents: components
                })
                : components;
            renderIndex++;
            const element = getComponentFromMap$1({
                jsonx,
                reactComponents,
                componentLibraries,
                debug,
                logError
            });
            const props = getComputedProps$1.call(this, {
                jsonx,
                resources,
                renderIndex,
                componentLibraries,
                debug,
                logError,
                disableRenderIndexKey
            });
            const displayElement = jsonx.comparisonprops
                ? displayComponent$1.call(this, {
                    jsonx,
                    props,
                    renderIndex,
                    componentLibraries,
                    debug
                })
                : true;
            if (displayElement) {
                const children = getJSONXChildren$1.call(this, {
                    jsonx,
                    props,
                    resources,
                    renderIndex
                });
                //@ts -ignore
                if (returnJSON)
                    return { type: element, props, children };
                else if (jsonx.test)
                    return JSON.stringify({ element, props, children }, null, 2);
                //TODO: Fix
                else
                    return createElement(element, props, children);
            }
            else {
                return null;
            }
        }
        catch (e) {
            if (debug) {
                logError({ jsonx, resources }, "getReactElementFromJSONX this", this);
                logError(e, e.stack ? e.stack : "no stack");
            }
            throw e;
        }
    }
    const getRenderedJSON = getReactElementFromJSONX;
    /**
     * Exposes react module used in JSONX
     * @returns {Object} React
     */
    function __getReact() {
        return react;
    }
    /**
     * Exposes react dom module used in JSONX
     * @returns {Object} ReactDOM
     */
    function __getReactDOM() {
        return ReactDOM;
    }
    const _jsonxComponents = jsonxComponents;

    /**
     * Expose `pathToRegexp`.
     */
    var pathToRegexp_1$1 = pathToRegexp$1;
    var match_1 = match$1;
    var regexpToFunction_1 = regexpToFunction;
    var parse_1$1 = parse$2;
    var compile_1$1 = compile$1;
    var tokensToFunction_1$1 = tokensToFunction$1;
    var tokensToRegExp_1$1 = tokensToRegExp$1;

    /**
     * Default configs.
     */
    var DEFAULT_DELIMITER = '/';

    /**
     * The main path matching regexp utility.
     *
     * @type {RegExp}
     */
    var PATH_REGEXP$1 = new RegExp([
      // Match escaped characters that would otherwise appear in future matches.
      // This allows the user to escape special characters that won't transform.
      '(\\\\.)',
      // Match Express-style parameters and un-named parameters with a prefix
      // and optional suffixes. Matches appear as:
      //
      // ":test(\\d+)?" => ["test", "\d+", undefined, "?"]
      // "(\\d+)"  => [undefined, undefined, "\d+", undefined]
      '(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?'
    ].join('|'), 'g');

    /**
     * Parse a string for the raw tokens.
     *
     * @param  {string}  str
     * @param  {Object=} options
     * @return {!Array}
     */
    function parse$2 (str, options) {
      var tokens = [];
      var key = 0;
      var index = 0;
      var path = '';
      var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER;
      var whitelist = (options && options.whitelist) || undefined;
      var pathEscaped = false;
      var res;

      while ((res = PATH_REGEXP$1.exec(str)) !== null) {
        var m = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index, offset);
        index = offset + m.length;

        // Ignore already escaped sequences.
        if (escaped) {
          path += escaped[1];
          pathEscaped = true;
          continue
        }

        var prev = '';
        var name = res[2];
        var capture = res[3];
        var group = res[4];
        var modifier = res[5];

        if (!pathEscaped && path.length) {
          var k = path.length - 1;
          var c = path[k];
          var matches = whitelist ? whitelist.indexOf(c) > -1 : true;

          if (matches) {
            prev = c;
            path = path.slice(0, k);
          }
        }

        // Push the current path onto the tokens.
        if (path) {
          tokens.push(path);
          path = '';
          pathEscaped = false;
        }

        var repeat = modifier === '+' || modifier === '*';
        var optional = modifier === '?' || modifier === '*';
        var pattern = capture || group;
        var delimiter = prev || defaultDelimiter;

        tokens.push({
          name: name || key++,
          prefix: prev,
          delimiter: delimiter,
          optional: optional,
          repeat: repeat,
          pattern: pattern
            ? escapeGroup$1(pattern)
            : '[^' + escapeString$1(delimiter === defaultDelimiter ? delimiter : (delimiter + defaultDelimiter)) + ']+?'
        });
      }

      // Push any remaining characters.
      if (path || index < str.length) {
        tokens.push(path + str.substr(index));
      }

      return tokens
    }

    /**
     * Compile a string to a template function for the path.
     *
     * @param  {string}             str
     * @param  {Object=}            options
     * @return {!function(Object=, Object=)}
     */
    function compile$1 (str, options) {
      return tokensToFunction$1(parse$2(str, options), options)
    }

    /**
     * Create path match function from `path-to-regexp` spec.
     */
    function match$1 (str, options) {
      var keys = [];
      var re = pathToRegexp$1(str, keys, options);
      return regexpToFunction(re, keys)
    }

    /**
     * Create a path match function from `path-to-regexp` output.
     */
    function regexpToFunction (re, keys) {
      return function (pathname, options) {
        var m = re.exec(pathname);
        if (!m) return false

        var path = m[0];
        var index = m.index;
        var params = {};
        var decode = (options && options.decode) || decodeURIComponent;

        for (var i = 1; i < m.length; i++) {
          if (m[i] === undefined) continue

          var key = keys[i - 1];

          if (key.repeat) {
            params[key.name] = m[i].split(key.delimiter).map(function (value) {
              return decode(value, key)
            });
          } else {
            params[key.name] = decode(m[i], key);
          }
        }

        return { path: path, index: index, params: params }
      }
    }

    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction$1 (tokens, options) {
      // Compile all the tokens into regexps.
      var matches = new Array(tokens.length);

      // Compile all the patterns before compilation.
      for (var i = 0; i < tokens.length; i++) {
        if (typeof tokens[i] === 'object') {
          matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags$1(options));
        }
      }

      return function (data, options) {
        var path = '';
        var encode = (options && options.encode) || encodeURIComponent;
        var validate = options ? options.validate !== false : true;

        for (var i = 0; i < tokens.length; i++) {
          var token = tokens[i];

          if (typeof token === 'string') {
            path += token;
            continue
          }

          var value = data ? data[token.name] : undefined;
          var segment;

          if (Array.isArray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but got array')
            }

            if (value.length === 0) {
              if (token.optional) continue

              throw new TypeError('Expected "' + token.name + '" to not be empty')
            }

            for (var j = 0; j < value.length; j++) {
              segment = encode(value[j], token);

              if (validate && !matches[i].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '"')
              }

              path += (j === 0 ? token.prefix : token.delimiter) + segment;
            }

            continue
          }

          if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
            segment = encode(String(value), token);

            if (validate && !matches[i].test(segment)) {
              throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but got "' + segment + '"')
            }

            path += token.prefix + segment;
            continue
          }

          if (token.optional) continue

          throw new TypeError('Expected "' + token.name + '" to be ' + (token.repeat ? 'an array' : 'a string'))
        }

        return path
      }
    }

    /**
     * Escape a regular expression string.
     *
     * @param  {string} str
     * @return {string}
     */
    function escapeString$1 (str) {
      return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1')
    }

    /**
     * Escape the capturing group by escaping special characters and meaning.
     *
     * @param  {string} group
     * @return {string}
     */
    function escapeGroup$1 (group) {
      return group.replace(/([=!:$/()])/g, '\\$1')
    }

    /**
     * Get the flags for a regexp from the options.
     *
     * @param  {Object} options
     * @return {string}
     */
    function flags$1 (options) {
      return options && options.sensitive ? '' : 'i'
    }

    /**
     * Pull out keys from a regexp.
     *
     * @param  {!RegExp} path
     * @param  {Array=}  keys
     * @return {!RegExp}
     */
    function regexpToRegexp$1 (path, keys) {
      if (!keys) return path

      // Use a negative lookahead to match only capturing groups.
      var groups = path.source.match(/\((?!\?)/g);

      if (groups) {
        for (var i = 0; i < groups.length; i++) {
          keys.push({
            name: i,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            pattern: null
          });
        }
      }

      return path
    }

    /**
     * Transform an array into a regexp.
     *
     * @param  {!Array}  path
     * @param  {Array=}  keys
     * @param  {Object=} options
     * @return {!RegExp}
     */
    function arrayToRegexp$1 (path, keys, options) {
      var parts = [];

      for (var i = 0; i < path.length; i++) {
        parts.push(pathToRegexp$1(path[i], keys, options).source);
      }

      return new RegExp('(?:' + parts.join('|') + ')', flags$1(options))
    }

    /**
     * Create a path regexp from string input.
     *
     * @param  {string}  path
     * @param  {Array=}  keys
     * @param  {Object=} options
     * @return {!RegExp}
     */
    function stringToRegexp$1 (path, keys, options) {
      return tokensToRegExp$1(parse$2(path, options), keys, options)
    }

    /**
     * Expose a function for taking tokens and returning a RegExp.
     *
     * @param  {!Array}  tokens
     * @param  {Array=}  keys
     * @param  {Object=} options
     * @return {!RegExp}
     */
    function tokensToRegExp$1 (tokens, keys, options) {
      options = options || {};

      var strict = options.strict;
      var start = options.start !== false;
      var end = options.end !== false;
      var delimiter = options.delimiter || DEFAULT_DELIMITER;
      var endsWith = [].concat(options.endsWith || []).map(escapeString$1).concat('$').join('|');
      var route = start ? '^' : '';

      // Iterate over the tokens and create our regexp string.
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];

        if (typeof token === 'string') {
          route += escapeString$1(token);
        } else {
          var capture = token.repeat
            ? '(?:' + token.pattern + ')(?:' + escapeString$1(token.delimiter) + '(?:' + token.pattern + '))*'
            : token.pattern;

          if (keys) keys.push(token);

          if (token.optional) {
            if (!token.prefix) {
              route += '(' + capture + ')?';
            } else {
              route += '(?:' + escapeString$1(token.prefix) + '(' + capture + '))?';
            }
          } else {
            route += escapeString$1(token.prefix) + '(' + capture + ')';
          }
        }
      }

      if (end) {
        if (!strict) route += '(?:' + escapeString$1(delimiter) + ')?';

        route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';
      } else {
        var endToken = tokens[tokens.length - 1];
        var isEndDelimited = typeof endToken === 'string'
          ? endToken[endToken.length - 1] === delimiter
          : endToken === undefined;

        if (!strict) route += '(?:' + escapeString$1(delimiter) + '(?=' + endsWith + '))?';
        if (!isEndDelimited) route += '(?=' + escapeString$1(delimiter) + '|' + endsWith + ')';
      }

      return new RegExp(route, flags$1(options))
    }

    /**
     * Normalize the given path string, returning a regular expression.
     *
     * An empty array can be passed in for the keys, which will hold the
     * placeholder key descriptions. For example, using `/user/:id`, `keys` will
     * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
     *
     * @param  {(string|RegExp|Array)} path
     * @param  {Array=}                keys
     * @param  {Object=}               options
     * @return {!RegExp}
     */
    function pathToRegexp$1 (path, keys, options) {
      if (path instanceof RegExp) {
        return regexpToRegexp$1(path, keys)
      }

      if (Array.isArray(path)) {
        return arrayToRegexp$1(/** @type {!Array} */ (path), keys, options)
      }

      return stringToRegexp$1(/** @type {string} */ (path), keys, options)
    }
    pathToRegexp_1$1.match = match_1;
    pathToRegexp_1$1.regexpToFunction = regexpToFunction_1;
    pathToRegexp_1$1.parse = parse_1$1;
    pathToRegexp_1$1.compile = compile_1$1;
    pathToRegexp_1$1.tokensToFunction = tokensToFunction_1$1;
    pathToRegexp_1$1.tokensToRegExp = tokensToRegExp_1$1;

    // const ROUTE_MAP = new Map();
    const ROUTE_MAP = new Map();
    /**
     * Generates a express style regexp for a given route and stores in a Map
     * @param  {string} route The route that should be converted into a regexp
     * @return {Object}       Returns an object with param keys and a path regexp
     */
    function getParameterizedPath(route, options = { useMap: true, }) {
        if (ROUTE_MAP.has(route) && options.useMap) {
            return ROUTE_MAP.get(route);
        }
        else {
            let keys = [];
            //@ts-ignore
            let result = new pathToRegexp_1$1(route, keys);
            // console.log({ route, }, {
            //   re: result,
            //   keys,
            // });
            ROUTE_MAP.set(route, {
                re: result,
                keys,
            });
            return { keys, re: result, };
        }
    }
    /**
     * Finds a matching dynamic route from manifest
     * @param  {Object|Array} routes   The manifest configuration object
     * @param  {string} location The window location that should be resolved
     * @return {string}          A matching dynamic route
     */
    function findMatchingRoutePath(routes, location, options = {}) {
        const { return_matching_keys, } = options;
        let matching;
        let params;
        let re;
        location = (/\?[^\s]+$/.test(location)) ? location.replace(/^([^\s\?]+)\?[^\s]+$/, '$1') : location;
        const routeArray = Array.isArray(routes) ? routes : Object.keys(routes);
        routeArray.forEach(function (key) {
            var result = getParameterizedPath(key, options);
            if (result.re.test(location) && !matching) {
                matching = key;
                re = result.re;
                if (return_matching_keys) {
                    const matchingParams = result.re.exec(matching);
                    const matchingVals = location.match(result.re);
                    if (matchingVals && matchingParams) {
                        params = matchingVals.reduce((result, val, idx) => {
                            if (idx !== 0 && typeof val === 'string')
                                result[matchingParams[idx].replace(':', '')] = val;
                            return result;
                        }, {});
                    }
                }
            }
        });
        // console.log({ routes, location, matching, });
        return return_matching_keys && matching ? {
            route: matching,
            location,
            params,
            re,
        }
            : matching;
    }

    var store2 = createCommonjsModule(function (module) {
    (function(window, define) {
        var _ = {
            version: "2.10.0",
            areas: {},
            apis: {},

            // utilities
            inherit: function(api, o) {
                for (var p in api) {
                    if (!o.hasOwnProperty(p)) {
                        Object.defineProperty(o, p, Object.getOwnPropertyDescriptor(api, p));
                    }
                }
                return o;
            },
            stringify: function(d) {
                return d === undefined || typeof d === "function" ? d+'' : JSON.stringify(d);
            },
            parse: function(s) {
                // if it doesn't parse, return as is
                try{ return JSON.parse(s); }catch(e){ return s; }
            },

            // extension hooks
            fn: function(name, fn) {
                _.storeAPI[name] = fn;
                for (var api in _.apis) {
                    _.apis[api][name] = fn;
                }
            },
            get: function(area, key){ return area.getItem(key); },
            set: function(area, key, string){ area.setItem(key, string); },
            remove: function(area, key){ area.removeItem(key); },
            key: function(area, i){ return area.key(i); },
            length: function(area){ return area.length; },
            clear: function(area){ area.clear(); },

            // core functions
            Store: function(id, area, namespace) {
                var store = _.inherit(_.storeAPI, function(key, data, overwrite) {
                    if (arguments.length === 0){ return store.getAll(); }
                    if (typeof data === "function"){ return store.transact(key, data, overwrite); }// fn=data, alt=overwrite
                    if (data !== undefined){ return store.set(key, data, overwrite); }
                    if (typeof key === "string" || typeof key === "number"){ return store.get(key); }
                    if (typeof key === "function"){ return store.each(key); }
                    if (!key){ return store.clear(); }
                    return store.setAll(key, data);// overwrite=data, data=key
                });
                store._id = id;
                try {
                    var testKey = '_-bad-_';
                    area.setItem(testKey, 'wolf');
                    store._area = area;
                    area.removeItem(testKey);
                } catch (e) {}
                if (!store._area) {
                    store._area = _.storage('fake');
                }
                store._ns = namespace || '';
                if (!_.areas[id]) {
                    _.areas[id] = store._area;
                }
                if (!_.apis[store._ns+store._id]) {
                    _.apis[store._ns+store._id] = store;
                }
                return store;
            },
            storeAPI: {
                // admin functions
                area: function(id, area) {
                    var store = this[id];
                    if (!store || !store.area) {
                        store = _.Store(id, area, this._ns);//new area-specific api in this namespace
                        if (!this[id]){ this[id] = store; }
                    }
                    return store;
                },
                namespace: function(namespace, singleArea) {
                    if (!namespace){
                        return this._ns ? this._ns.substring(0,this._ns.length-1) : '';
                    }
                    var ns = namespace, store = this[ns];
                    if (!store || !store.namespace) {
                        store = _.Store(this._id, this._area, this._ns+ns+'.');//new namespaced api
                        if (!this[ns]){ this[ns] = store; }
                        if (!singleArea) {
                            for (var name in _.areas) {
                                store.area(name, _.areas[name]);
                            }
                        }
                    }
                    return store;
                },
                isFake: function(){ return this._area.name === 'fake'; },
                toString: function() {
                    return 'store'+(this._ns?'.'+this.namespace():'')+'['+this._id+']';
                },

                // storage functions
                has: function(key) {
                    if (this._area.has) {
                        return this._area.has(this._in(key));//extension hook
                    }
                    return !!(this._in(key) in this._area);
                },
                size: function(){ return this.keys().length; },
                each: function(fn, fill) {// fill is used by keys(fillList) and getAll(fillList))
                    for (var i=0, m=_.length(this._area); i<m; i++) {
                        var key = this._out(_.key(this._area, i));
                        if (key !== undefined) {
                            if (fn.call(this, key, this.get(key), fill) === false) {
                                break;
                            }
                        }
                        if (m > _.length(this._area)) { m--; i--; }// in case of removeItem
                    }
                    return fill || this;
                },
                keys: function(fillList) {
                    return this.each(function(k, v, list){ list.push(k); }, fillList || []);
                },
                get: function(key, alt) {
                    var s = _.get(this._area, this._in(key));
                    return s !== null ? _.parse(s) : alt || s;// support alt for easy default mgmt
                },
                getAll: function(fillObj) {
                    return this.each(function(k, v, all){ all[k] = v; }, fillObj || {});
                },
                transact: function(key, fn, alt) {
                    var val = this.get(key, alt),
                        ret = fn(val);
                    this.set(key, ret === undefined ? val : ret);
                    return this;
                },
                set: function(key, data, overwrite) {
                    var d = this.get(key);
                    if (d != null && overwrite === false) {
                        return data;
                    }
                    return _.set(this._area, this._in(key), _.stringify(data), overwrite) || d;
                },
                setAll: function(data, overwrite) {
                    var changed, val;
                    for (var key in data) {
                        val = data[key];
                        if (this.set(key, val, overwrite) !== val) {
                            changed = true;
                        }
                    }
                    return changed;
                },
                add: function(key, data) {
                    var d = this.get(key);
                    if (d instanceof Array) {
                        data = d.concat(data);
                    } else if (d !== null) {
                        var type = typeof d;
                        if (type === typeof data && type === 'object') {
                            for (var k in data) {
                                d[k] = data[k];
                            }
                            data = d;
                        } else {
                            data = d + data;
                        }
                    }
                    _.set(this._area, this._in(key), _.stringify(data));
                    return data;
                },
                remove: function(key, alt) {
                    var d = this.get(key, alt);
                    _.remove(this._area, this._in(key));
                    return d;
                },
                clear: function() {
                    if (!this._ns) {
                        _.clear(this._area);
                    } else {
                        this.each(function(k){ _.remove(this._area, this._in(k)); }, 1);
                    }
                    return this;
                },
                clearAll: function() {
                    var area = this._area;
                    for (var id in _.areas) {
                        if (_.areas.hasOwnProperty(id)) {
                            this._area = _.areas[id];
                            this.clear();
                        }
                    }
                    this._area = area;
                    return this;
                },

                // internal use functions
                _in: function(k) {
                    if (typeof k !== "string"){ k = _.stringify(k); }
                    return this._ns ? this._ns + k : k;
                },
                _out: function(k) {
                    return this._ns ?
                        k && k.indexOf(this._ns) === 0 ?
                            k.substring(this._ns.length) :
                            undefined : // so each() knows to skip it
                        k;
                }
            },// end _.storeAPI
            storage: function(name) {
                return _.inherit(_.storageAPI, { items: {}, name: name });
            },
            storageAPI: {
                length: 0,
                has: function(k){ return this.items.hasOwnProperty(k); },
                key: function(i) {
                    var c = 0;
                    for (var k in this.items){
                        if (this.has(k) && i === c++) {
                            return k;
                        }
                    }
                },
                setItem: function(k, v) {
                    if (!this.has(k)) {
                        this.length++;
                    }
                    this.items[k] = v;
                },
                removeItem: function(k) {
                    if (this.has(k)) {
                        delete this.items[k];
                        this.length--;
                    }
                },
                getItem: function(k){ return this.has(k) ? this.items[k] : null; },
                clear: function(){ for (var k in this.items){ this.removeItem(k); } }
            }// end _.storageAPI
        };

        var store =
            // safely set this up (throws error in IE10/32bit mode for local files)
            _.Store("local", (function(){try{ return localStorage; }catch(e){}})());
        store.local = store;// for completeness
        store._ = _;// for extenders and debuggers...
        // safely setup store.session (throws exception in FF for file:/// urls)
        store.area("session", (function(){try{ return sessionStorage; }catch(e){}})());
        store.area("page", _.storage("page"));

        if (typeof define === 'function' && define.amd !== undefined) {
            define('store2', [], function () {
                return store;
            });
        } else if ( module.exports) {
            module.exports = store;
        } else {
            // expose the primary store fn to the global object and save conflicts
            if (window.store){ _.conflict = window.store; }
            window.store = store;
        }

    })(commonjsGlobal, commonjsGlobal && commonjsGlobal.define);
    });

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.


    // If obj.hasOwnProperty has been overridden, then calling
    // obj.hasOwnProperty(prop) will break.
    // See: https://github.com/joyent/node/issues/1707
    function hasOwnProperty$2(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var isArray$1 = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };
    function stringifyPrimitive(v) {
      switch (typeof v) {
        case 'string':
          return v;

        case 'boolean':
          return v ? 'true' : 'false';

        case 'number':
          return isFinite(v) ? v : '';

        default:
          return '';
      }
    }

    function stringify$1 (obj, sep, eq, name) {
      sep = sep || '&';
      eq = eq || '=';
      if (obj === null) {
        obj = undefined;
      }

      if (typeof obj === 'object') {
        return map(objectKeys(obj), function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (isArray$1(obj[k])) {
            return map(obj[k], function(v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);

      }

      if (!name) return '';
      return encodeURIComponent(stringifyPrimitive(name)) + eq +
             encodeURIComponent(stringifyPrimitive(obj));
    }
    function map (xs, f) {
      if (xs.map) return xs.map(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        res.push(f(xs[i], i));
      }
      return res;
    }

    var objectKeys = Object.keys || function (obj) {
      var res = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
      }
      return res;
    };

    function parse$3(qs, sep, eq, options) {
      sep = sep || '&';
      eq = eq || '=';
      var obj = {};

      if (typeof qs !== 'string' || qs.length === 0) {
        return obj;
      }

      var regexp = /\+/g;
      qs = qs.split(sep);

      var maxKeys = 1000;
      if (options && typeof options.maxKeys === 'number') {
        maxKeys = options.maxKeys;
      }

      var len = qs.length;
      // maxKeys <= 0 means that we should not limit keys count
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }

      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, '%20'),
            idx = x.indexOf(eq),
            kstr, vstr, k, v;

        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = '';
        }

        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);

        if (!hasOwnProperty$2(obj, k)) {
          obj[k] = v;
        } else if (isArray$1(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }

      return obj;
    }var qs = {
      encode: stringify$1,
      stringify: stringify$1,
      decode: parse$3,
      parse: parse$3
    };

    /**
     * Tokenize input string.
     */
    function lexer(str) {
        var tokens = [];
        var i = 0;
        while (i < str.length) {
            var char = str[i];
            if (char === "*" || char === "+" || char === "?") {
                tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
                continue;
            }
            if (char === "\\") {
                tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
                continue;
            }
            if (char === "{") {
                tokens.push({ type: "OPEN", index: i, value: str[i++] });
                continue;
            }
            if (char === "}") {
                tokens.push({ type: "CLOSE", index: i, value: str[i++] });
                continue;
            }
            if (char === ":") {
                var name = "";
                var j = i + 1;
                while (j < str.length) {
                    var code = str.charCodeAt(j);
                    if (
                    // `0-9`
                    (code >= 48 && code <= 57) ||
                        // `A-Z`
                        (code >= 65 && code <= 90) ||
                        // `a-z`
                        (code >= 97 && code <= 122) ||
                        // `_`
                        code === 95) {
                        name += str[j++];
                        continue;
                    }
                    break;
                }
                if (!name)
                    throw new TypeError("Missing parameter name at " + i);
                tokens.push({ type: "NAME", index: i, value: name });
                i = j;
                continue;
            }
            if (char === "(") {
                var count = 1;
                var pattern = "";
                var j = i + 1;
                if (str[j] === "?") {
                    throw new TypeError("Pattern cannot start with \"?\" at " + j);
                }
                while (j < str.length) {
                    if (str[j] === "\\") {
                        pattern += str[j++] + str[j++];
                        continue;
                    }
                    if (str[j] === ")") {
                        count--;
                        if (count === 0) {
                            j++;
                            break;
                        }
                    }
                    else if (str[j] === "(") {
                        count++;
                        if (str[j + 1] !== "?") {
                            throw new TypeError("Capturing groups are not allowed at " + j);
                        }
                    }
                    pattern += str[j++];
                }
                if (count)
                    throw new TypeError("Unbalanced pattern at " + i);
                if (!pattern)
                    throw new TypeError("Missing pattern at " + i);
                tokens.push({ type: "PATTERN", index: i, value: pattern });
                i = j;
                continue;
            }
            tokens.push({ type: "CHAR", index: i, value: str[i++] });
        }
        tokens.push({ type: "END", index: i, value: "" });
        return tokens;
    }
    /**
     * Parse a string for the raw tokens.
     */
    function parse$4(str, options) {
        if (options === void 0) { options = {}; }
        var tokens = lexer(str);
        var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a;
        var defaultPattern = "[^" + escapeString$2(options.delimiter || "/#?") + "]+?";
        var result = [];
        var key = 0;
        var i = 0;
        var path = "";
        var tryConsume = function (type) {
            if (i < tokens.length && tokens[i].type === type)
                return tokens[i++].value;
        };
        var mustConsume = function (type) {
            var value = tryConsume(type);
            if (value !== undefined)
                return value;
            var _a = tokens[i], nextType = _a.type, index = _a.index;
            throw new TypeError("Unexpected " + nextType + " at " + index + ", expected " + type);
        };
        var consumeText = function () {
            var result = "";
            var value;
            // tslint:disable-next-line
            while ((value = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR"))) {
                result += value;
            }
            return result;
        };
        while (i < tokens.length) {
            var char = tryConsume("CHAR");
            var name = tryConsume("NAME");
            var pattern = tryConsume("PATTERN");
            if (name || pattern) {
                var prefix = char || "";
                if (prefixes.indexOf(prefix) === -1) {
                    path += prefix;
                    prefix = "";
                }
                if (path) {
                    result.push(path);
                    path = "";
                }
                result.push({
                    name: name || key++,
                    prefix: prefix,
                    suffix: "",
                    pattern: pattern || defaultPattern,
                    modifier: tryConsume("MODIFIER") || ""
                });
                continue;
            }
            var value = char || tryConsume("ESCAPED_CHAR");
            if (value) {
                path += value;
                continue;
            }
            if (path) {
                result.push(path);
                path = "";
            }
            var open = tryConsume("OPEN");
            if (open) {
                var prefix = consumeText();
                var name_1 = tryConsume("NAME") || "";
                var pattern_1 = tryConsume("PATTERN") || "";
                var suffix = consumeText();
                mustConsume("CLOSE");
                result.push({
                    name: name_1 || (pattern_1 ? key++ : ""),
                    pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
                    prefix: prefix,
                    suffix: suffix,
                    modifier: tryConsume("MODIFIER") || ""
                });
                continue;
            }
            mustConsume("END");
        }
        return result;
    }
    /**
     * Compile a string to a template function for the path.
     */
    function compile$2(str, options) {
        return tokensToFunction$2(parse$4(str, options), options);
    }
    /**
     * Expose a method for transforming tokens into the path function.
     */
    function tokensToFunction$2(tokens, options) {
        if (options === void 0) { options = {}; }
        var reFlags = flags$2(options);
        var _a = options.encode, encode = _a === void 0 ? function (x) { return x; } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;
        // Compile all the tokens into regexps.
        var matches = tokens.map(function (token) {
            if (typeof token === "object") {
                return new RegExp("^(?:" + token.pattern + ")$", reFlags);
            }
        });
        return function (data) {
            var path = "";
            for (var i = 0; i < tokens.length; i++) {
                var token = tokens[i];
                if (typeof token === "string") {
                    path += token;
                    continue;
                }
                var value = data ? data[token.name] : undefined;
                var optional = token.modifier === "?" || token.modifier === "*";
                var repeat = token.modifier === "*" || token.modifier === "+";
                if (Array.isArray(value)) {
                    if (!repeat) {
                        throw new TypeError("Expected \"" + token.name + "\" to not repeat, but got an array");
                    }
                    if (value.length === 0) {
                        if (optional)
                            continue;
                        throw new TypeError("Expected \"" + token.name + "\" to not be empty");
                    }
                    for (var j = 0; j < value.length; j++) {
                        var segment = encode(value[j], token);
                        if (validate && !matches[i].test(segment)) {
                            throw new TypeError("Expected all \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                        }
                        path += token.prefix + segment + token.suffix;
                    }
                    continue;
                }
                if (typeof value === "string" || typeof value === "number") {
                    var segment = encode(String(value), token);
                    if (validate && !matches[i].test(segment)) {
                        throw new TypeError("Expected \"" + token.name + "\" to match \"" + token.pattern + "\", but got \"" + segment + "\"");
                    }
                    path += token.prefix + segment + token.suffix;
                    continue;
                }
                if (optional)
                    continue;
                var typeOfMessage = repeat ? "an array" : "a string";
                throw new TypeError("Expected \"" + token.name + "\" to be " + typeOfMessage);
            }
            return path;
        };
    }
    /**
     * Escape a regular expression string.
     */
    function escapeString$2(str) {
        return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
    }
    /**
     * Get the flags for a regexp from the options.
     */
    function flags$2(options) {
        return options && options.sensitive ? "" : "i";
    }

    // import { insertScriptParams } from '../../internal_types/config';
    var cacheKeyPrefix = 'exp@';
    var cacheKeySuffix = ';';
    var fetchProtocol_replace_str = '__|_/_/';
    var fetchProtocol_str = '://';
    function getNSKey(namespace, key) {
        return "" + namespace + cacheKeySuffix + key;
    }
    function getKeyElements(cacheKey) {
        var _a = cacheKey.split(cacheKeyPrefix), timeoutSuffixKey = _a[1];
        var _b = timeoutSuffixKey.split(cacheKeySuffix), timeout = _b[0], key = _b[1];
        return { timeout: timeout, key: key };
    }
    function getExpKey(key, timeout) {
        return "" + cacheKeyPrefix + (new Date().valueOf() + timeout) + cacheKeySuffix + key;
    }
    function removeKeys(namespace, keys) {
        keys.forEach(function (key) {
            var nsKey = getNSKey(namespace, key);
            var nsStore = store2.namespace(nsKey);
            nsStore.clearAll();
        });
    }
    function getFromCacheStore(namespace, key) {
        var nsKey = getNSKey(namespace, key);
        var nsStore = store2.namespace(nsKey);
        var keyArray = nsStore.keys();
        var cacheKey = (keyArray.length) ? keyArray[0] : undefined;
        if (cacheKey) {
            var timeoutData = getKeyElements(cacheKey);
            var currentTime = new Date().valueOf();
            if (Number(timeoutData.timeout) < currentTime) {
                nsStore.remove(cacheKey);
                return undefined;
            }
            else {
                return nsStore.get(cacheKey);
            }
        }
        else
            return undefined;
    }
    function setCacheStore(namespace, key, value, timeout) {
        var nsKey = getNSKey(namespace, key);
        var nsStore = store2.namespace(nsKey);
        var keyArray = nsStore.keys();
        var cacheKey = (keyArray.length) ? keyArray[0] : getExpKey(key, timeout);
        nsStore.set(cacheKey, value, true);
    }
    function getPath$2(path, options) {
        path = "" + path + (path.includes('?') ? '&' : '?') + qs.stringify(JSON.parse(options.body));
        options.body = undefined;
        delete options.body;
        return { path: path, options: options };
    }
    /**
     * Return JSON from remote path
     * @property this - function context
     * @param path - fetch path
     * @param options  - fetch options
     * @param options.method - fetch options
     */
    function fetchJSON$1(path, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, Promise, function () {
            var userAccessToken, getPathBody, response;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        userAccessToken = (this.props.user.token) ? (_a = {},
                            _a[this.settings.accessTokenProperty] = this.props.user.token,
                            _a) : {};
                        options.headers = __assign(__assign(__assign(__assign({}, options.headers), this.settings.fetchHeaders), this.props.user.fetchHeaders), userAccessToken);
                        if (this.settings.useWindowRequestQuery && window.location.search) ;
                        if (options.method === 'GET' && options.body) {
                            getPathBody = getPath$2(path, options);
                            path = getPathBody.path;
                            options = getPathBody.options;
                        }
                        if (!(options.method === 'socket')) return [3 /*break*/, 2];
                        return [4 /*yield*/, fetchJSONViaSocket.call(this, path, options)];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2: return [4 /*yield*/, fetch(path, options)];
                    case 3:
                        response = _b.sent();
                        if (typeof response.ok === 'boolean' && !response.ok)
                            throw new Error(response.status + ": " + response.statusText);
                        else if (response.status < 200 || response.status >= 300)
                            throw new Error(response.status + ": " + response.statusText);
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, _b.sent()];
                }
            });
        });
    }
    function fetchJSONViaSocket(path, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    this.props.socket.emit(path, options, function (successData) {
                        return successData;
                    });
                }
                catch (e) {
                    throw e;
                }
                return [2 /*return*/];
            });
        });
    }
    /**
     * Returns template resources for a vxt template. Resources are passed as resource props into the JSONX components
     * @property this - function context
     * @param options.resources - resourceprops for JSONX
     * @param options.templateRoute - template route properties
     */
    function fetchResources(_a) {
        var _b = _a.resources, resources = _b === void 0 ? {} : _b, templateRoute = _a.templateRoute;
        return __awaiter(this, void 0, Promise, function () {
            var results, resourceProperties, context;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        results = {};
                        resourceProperties = Object.keys(resources);
                        context = this;
                        if (!resourceProperties.length) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.all(resourceProperties.map(function (prop) {
                                return (function (prop) {
                                    return __awaiter(this, void 0, void 0, function () {
                                        var resource, fetchPath, toPath, basePath, fetchURL, fetchOptions, _a, _b;
                                        return __generator(this, function (_c) {
                                            switch (_c.label) {
                                                case 0:
                                                    resource = resources[prop];
                                                    fetchPath = typeof resource === "string" ? resource : resource.fetchPath;
                                                    toPath = compile$2(fetchPath.replace(fetchProtocol_str, fetchProtocol_replace_str), templateRoute.params);
                                                    basePath = toPath(templateRoute.params).replace(fetchProtocol_replace_str, fetchProtocol_str);
                                                    fetchURL = "" + basePath + (basePath.includes('?') ? window.location.search.replace('?', '') : window.location.search);
                                                    fetchOptions = typeof resource === "string" ? {} : resource.fetchOptions;
                                                    _a = results;
                                                    _b = prop;
                                                    return [4 /*yield*/, fetchJSON$1.call(context, fetchURL, fetchOptions)];
                                                case 1:
                                                    _a[_b] = _c.sent();
                                                    return [2 /*return*/, true];
                                            }
                                        });
                                    });
                                })(prop);
                            }))];
                    case 1:
                        _c.sent();
                        _c.label = 2;
                    case 2: return [2 /*return*/, results];
                }
            });
        });
    }

    /**
     * add class to html element
     * @param options.element - html element to modify
     * @param options.className - css class to add
     */
    function setHTMLElementClass(_a) {
        var element = _a.element, className = _a.className;
        if (element && element.classList && element.classList.add) {
            element.classList.add(className);
        }
        else if (element && element.className) {
            element.className = element.className += className;
        }
        // if(window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('Trident') !== -1) {
        //   document.body.style.zoom = 1;
        // }
    }
    /**
     * set id attribute on body based on pathname
     * @param pathname - vxa template layer route
     */
    function setBodyPathnameId(pathname) {
        if (document && document.body && document.body.setAttribute) {
            document.body.setAttribute("id", encodeURIComponent(pathname).replace(new RegExp(/%2F|%2/, "g"), "_"));
        }
    }
    function insertJavaScript(_a) {
        var src = _a.src, name = _a.name, _b = _a.async, async = _b === void 0 ? true : _b, onload = _a.onload;
        (function (d, s, id) {
            var tagId = "viewx-script-" + id;
            if (d.getElementById(id))
                return;
            var s0 = d.getElementsByTagName(s)[0];
            var j = d.createElement(s);
            j.setAttribute("async", async.toString());
            j.id = tagId;
            j.setAttribute("type", "text/javascript");
            j.setAttribute("src", src);
            if (src.includes('://')) {
                var a = document.createElement('a');
                a.setAttribute('ref', src);
                if (a.origin !== window.location.origin)
                    j.setAttribute('crossorigin', 'true');
            }
            if (onload)
                j.onload = onload;
            // @ts-ignore
            if (s0)
                s0.parentNode.insertBefore(j, s0);
            else
                document.head.prepend(j);
        })(document || window.document, "script", name);
    }
    function insertStyleSheet(_a) {
        var src = _a.src, name = _a.name, onload = _a.onload;
        (function (d, l, id) {
            var tagId = "viewx-style-" + id;
            if (d.getElementById(id))
                return;
            var s0 = d.getElementsByTagName(l)[0];
            var ss = d.createElement(l);
            ss.id = tagId;
            ss.setAttribute("rel", "stylesheet");
            ss.setAttribute("type", "text/css");
            ss.setAttribute("href", src);
            if (onload)
                ss.onload = onload;
            if (s0 && s0.parentNode)
                s0.parentNode.insertBefore(ss, s0);
            else
                document.head.prepend(ss);
        })(document || window.document, "link", name);
    }
    function createLayer(_a) {
        var layer = _a.layer, app = _a.app, querySelector = _a.querySelector;
        var name = layer.name, type = layer.type, order = layer.order, idSelector = layer.idSelector;
        var selector = "#" + (idSelector || name);
        var layerName = idSelector || name;
        var baseElement = querySelector && querySelector !== 'root'
            ? document.querySelector(querySelector) || document.body
            : document.body;
        // const baseElement= document.body;
        var layerDOM = document.querySelector(selector);
        if (!layerDOM) {
            var domEl = document.createElement("div");
            domEl.setAttribute("id", layerName);
            domEl.setAttribute('class', "vxa_layer vxa_layer_name_" + name + " vxa_layer_type_" + type);
            baseElement.appendChild(domEl);
            domEl.style.zIndex = String(order);
            layerDOM = domEl;
        }
        if (type === "applicationRoot" && app) {
            ReactDOM.render(app, layerDOM);
        }
    }
    function getElementSelector(_a) {
        var tagName = _a.tagName, _b = _a.attributes, attributes = _b === void 0 ? {} : _b;
        return "" + tagName + Object.keys(attributes)
            .map(function (attr) { return "[" + attr + "=\"" + attributes[attr] + "\"]"; })
            .join();
    }
    function setPageAttributes(_a) {
        var _b = _a.pageData, pageData = _b === void 0 ? [] : _b;
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_c) {
                pageData.forEach(function (pageDatum) {
                    var attributes = pageDatum.attributes, tagName = pageDatum.tagName, innerHTML = pageDatum.innerHTML;
                    var selector = getElementSelector(pageDatum);
                    var el = document.querySelector(selector);
                    var element = el || document.createElement(tagName);
                    // if(!el) el.setAttribute()
                    if (innerHTML)
                        element.innerHTML = innerHTML;
                    if (attributes && Object.keys(attributes).length) {
                        Object.keys(attributes).forEach(function (attr) {
                            element.setAttribute(attr, attributes[attr]);
                        });
                    }
                    if (!el)
                        document.head.appendChild(element);
                });
                return [2 /*return*/];
            });
        });
    }

    /**
     * Convert path to route object
     *
     * A string or RegExp should be passed,
     * will return { re, src, keys} obj
     *
     * @param  {String / RegExp} path
     * @return {Object}
     */

    var Route$1 = function(path){
      //using 'new' is optional

      var src, re, keys = [];

      if(path instanceof RegExp){
        re = path;
        src = path.toString();
      }else {
        re = pathToRegExp(path, keys);
        src = path;
      }

      return {
      	 re: re,
      	 src: path.toString(),
      	 keys: keys
      }
    };

    /**
     * Normalize the given path string,
     * returning a regular expression.
     *
     * An empty array should be passed,
     * which will contain the placeholder
     * key names. For example "/user/:id" will
     * then contain ["id"].
     *
     * @param  {String} path
     * @param  {Array} keys
     * @return {RegExp}
     */
    var pathToRegExp = function (path, keys) {
    	path = path
    		.concat('/?')
    		.replace(/\/\(/g, '(?:/')
    		.replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?|\*/g, function(_, slash, format, key, capture, optional){
    			if (_ === "*"){
    				keys.push(undefined);
    				return _;
    			}

    			keys.push(key);
    			slash = slash || '';
    			return ''
    				+ (optional ? '' : slash)
    				+ '(?:'
    				+ (optional ? slash : '')
    				+ (format || '') + (capture || '([^/]+?)') + ')'
    				+ (optional || '');
    		})
    		.replace(/([\/.])/g, '\\$1')
    		.replace(/\*/g, '(.*)');
    	return new RegExp('^' + path + '$', 'i');
    };

    /**
     * Attempt to match the given request to
     * one of the routes. When successful
     * a  {fn, params, splats} obj is returned
     *
     * @param  {Array} routes
     * @param  {String} uri
     * @return {Object}
     */
    var match$2 = function (routes, uri, startAt) {
    	var captures, i = startAt || 0;

    	for (var len = routes.length; i < len; ++i) {
    		var route = routes[i],
    		    re = route.re,
    		    keys = route.keys,
    		    splats = [],
    		    params = {};

    		if (captures = uri.match(re)) {
    			for (var j = 1, len = captures.length; j < len; ++j) {
    				var key = keys[j-1],
    					val = typeof captures[j] === 'string'
    						? unescape(captures[j])
    						: captures[j];
    				if (key) {
    					params[key] = val;
    				} else {
    					splats.push(val);
    				}
    			}
    			return {
    				params: params,
    				splats: splats,
    				route: route.src,
    				next: i + 1
    			};
    		}
    	}
    };

    /**
     * Default "normal" router constructor.
     * accepts path, fn tuples via addRoute
     * returns {fn, params, splats, route}
     *  via match
     *
     * @return {Object}
     */

    var Router$1 = function(){
      //using 'new' is optional
      return {
        routes: [],
        routeMap : {},
        addRoute: function(path, fn){
          if (!path) throw new Error(' route requires a path');
          if (!fn) throw new Error(' route ' + path.toString() + ' requires a callback');

          if (this.routeMap[path]) {
            throw new Error('path is already defined: ' + path);
          }

          var route = Route$1(path);
          route.fn = fn;

          this.routes.push(route);
          this.routeMap[path] = fn;
        },

        removeRoute: function(path) {
          if (!path) throw new Error(' route requires a path');
          if (!this.routeMap[path]) {
            throw new Error('path does not exist: ' + path);
          }
          var newRoutes = [];

          // copy the routes excluding the route being removed
          for (var i = 0; i < this.routes.length; i++) {
            var route = this.routes[i];
            if (route.src !== path) {
              newRoutes.push(route);
            }
          }
          this.routes = newRoutes;
          delete this.routeMap[path];
        },

        match: function(pathname, startAt){
          var route = match$2(this.routes, pathname, startAt);
          if(route){
            route.fn = this.routeMap[route.route];
            route.next = this.match.bind(this, pathname, route.next);
          }
          return route;
        }
      }
    };

    Router$1.Route = Route$1;
    Router$1.pathToRegExp = pathToRegExp;
    Router$1.match = match$2;
    // back compat
    Router$1.Router = Router$1;

    var routes = Router$1;

    // @ts-ignore
    const Router$2 = routes;
    /**
     * Catches all events on event emitter passed to the function
     * @param {Event Emitter} emitter - websocket/socket.io(client/server)/event emitter to intercept all incoming events
     * @param {Function} handler - socket.io like middleware (calls handler with packet and next)
     */
    function patchEmitter(emitter, handler) {
        emitter._onevent = emitter.onevent;
        const next = () => { };
        // Replace the onevent function with a handler that captures all messages
        emitter.onevent = function (packet) {
            handler(packet.data, next);
            // DO NOT USE https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments
            // emitter._onevent.apply(emitter, Array.prototype.slice.call(arguments));
            const args = new Array(arguments.length);
            for (var i = 0; i < args.length; ++i) {
                args[i] = arguments[i];
            }
            if (emitter._onevent)
                emitter._onevent.apply(emitter, args);
        };
    }
    /**
     * Returns socket.io like middleware function to handle incoming events based on their path
     * @param {Event emitter} options.socket - websocket/socket.io(client/server)/event emitter
     * @param {object} options.router - routes object
     * @see https://www.npmjs.com/package/routes
     * @return {function} router handler middleware function
     */
    function routerMiddleware({ socket, router, }) {
        return function routeHandler(packet, next) {
            // console.log({ packet, socket });
            const [path, body,] = packet;
            const match = router.match(path);
            const req = { path, body, socket, };
            let cb = (data) => data;
            const res = {
                send(data) {
                    try {
                        socket.emit(path, cb(data));
                        cb = null;
                    }
                    catch (e) {
                        socket.emit('error', new Error('Response already sent'));
                    }
                },
            };
            if (match) {
                req.params = match.params;
                req.splats = match.splats;
                match.fn(req, res, match);
            }
            next();
        };
    }
    /**
     * Responds to events based on their route and a router
     * @param {Event emitter} options.socket - websocket/socket.io(client/server)/event emitter
     * @param {object} options.router - routes object
     * @see https://www.npmjs.com/package/routes
     */
    function EventRouter({ socket, router, }) {
        if (socket.use) {
            socket.use(routerMiddleware({ socket, router, }));
        }
        else {
            patchEmitter(socket, routerMiddleware({ socket, router, }));
        }
    }

    // import { insertScriptParams } from '../../internal_types/config';
    var once = false;
    function initSockets(settings) {
        var _this = this;
        if (settings === void 0) { settings = {}; }
        var useWebSocketsAuth = settings.useWebSocketsAuth, socket_server_options = settings.socket_server_options, socket_server = settings.socket_server, socket_disconnect_message = settings.socket_disconnect_message;
        var createNotification = this.viewx.Functions.log;
        var getSocketFunction = function (_a) {
            var propFunc = _a.propFunc;
            return getFunctionFromNameString({
                Functions: _this.viewx.Functions,
                functionContext: _this,
                functionName: propFunc
            });
        };
        // @ts-ignore
        var router = Router$2();
        router.addRoute("*", function (req) {
            var propFunc = req.body.function || req.path;
            var props = req.body && req.body.props && Array.isArray(req.body.props)
                ? req.body.props
                : [req.body];
            // console.debug({ propFunc, props, once, req, });
            var reduxFunction = getSocketFunction({ propFunc: propFunc });
            if (reduxFunction)
                reduxFunction.call.apply(reduxFunction, __spreadArrays([_this], props));
            else
                _this.viewx.Functions.log({
                    type: "error",
                    error: new Error("Invalid Live Update")
                });
        });
        var socketOptions = Object.assign({
            // transports: [ 'websocket', ],
            reconnectionAttempts: 10
        }, socket_server_options);
        if (window.io) {
            var socket_1 = socket_server
                ? window.io(socket_server, socketOptions)
                : window.io("", socketOptions);
            this.props.dispatch({
                type: "setSocket",
                socket: socket_1
            });
            this.props.setSocket(socket_1);
            socket_1.once("connect", function () {
                EventRouter({ socket: socket_1, router: router });
                socket_1.emit("authentication", {
                    user: useWebSocketsAuth ? _this.props.user : false,
                    reconnection: true
                });
            });
            socket_1.on("error", function (e) {
                return createNotification({ type: "error", error: e });
            });
            socket_1.on("connect_error", function (e) { return console.debug(e); });
            socket_1.on("disconnect", function (reason) {
                if (once === false && socket_disconnect_message) {
                    createNotification({
                        data: "Live Updated Disconnected: " + reason + ". Refresh for live updates"
                    });
                    once = true;
                }
            });
            socket_1.on("reconnect", function (attemptNumber) {
                socket_1.emit("authentication", {
                    user: useWebSocketsAuth ? _this.props.user : false,
                    reconnection: true
                });
                createNotification({
                    type: "info",
                    data: "Reconnected to Live",
                    meta: { attemptNumber: attemptNumber }
                });
            });
            socket_1.on("reconnecting", function (attemptNumber) {
                createNotification({
                    type: "error",
                    data: "reconnecting socket",
                    meta: { attemptNumber: attemptNumber }
                });
                // console.debug('reconnecting', );
            });
            if (useWebSocketsAuth) {
                // console.debug('REAUTH',this.state.user)
                socket_1.emit("authentication", {
                    user: this.props.user,
                    reconnection: true
                });
            }
            socket_1.on("authenticated", function () {
                // use the socket as usual
                socket_1.emit("/user/createrepl", {
                    user: useWebSocketsAuth ? _this.props.user : false,
                    reconnection: true,
                    authSend: 0
                });
            });
        }
        //   // this.previousRoute = {};
    }

    /**
     * initial one time setup call
     * @property this
     * @param options.settings - vxa settings
     */
    function setup(_a) {
        var settings = _a.settings;
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_b) {
                initSockets.call(this, settings);
                if (settings.useBodyLoadedClass)
                    setHTMLElementClass({
                        element: document.body,
                        className: settings.bodyLoadedClass
                    });
                if (settings.useHTMLLoadedClass)
                    setHTMLElementClass({
                        element: document.querySelector("html"),
                        className: settings.htmlLoadedClass
                    });
                return [2 /*return*/];
            });
        });
    }
    /**
     * load vxt templates
     * @param options
     */
    function loadTemplates(_a) {
        var config = _a.config, viewxTemplates = _a.viewxTemplates, templates = _a.templates, setTemplates = _a.setTemplates, setUI = _a.setUI, ui = _a.ui, layers = _a.layers, Functions = _a.Functions, functionContext = _a.functionContext;
        return __awaiter(this, void 0, Promise, function () {
            var fetchFunction, loadedTemplates, _b, templatePaths, updatedUI;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        fetchFunction = (Functions.fetchJSON || fetchJSON$1).bind(functionContext);
                        if (!config.settings.hasPreloadedTemplates) return [3 /*break*/, 1];
                        _b = {};
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, fetchFunction(config.settings.templatePath, config.settings.templateFetchOptions)];
                    case 2:
                        _b = _c.sent();
                        _c.label = 3;
                    case 3:
                        loadedTemplates = _b;
                        viewxTemplates = layers.reduce(function (result, layer) {
                            var name = layer.name;
                            result[name] = __assign(__assign({}, loadedTemplates[name]), templates[name]);
                            return result;
                        }, {});
                        templatePaths = getTemplatePaths(viewxTemplates);
                        updatedUI = __assign(__assign({}, ui), { templatePaths: templatePaths, hasLoadedInitialProcess: true });
                        setTemplates(viewxTemplates);
                        setUI(updatedUI);
                        return [2 /*return*/, {
                                viewxTemplates: viewxTemplates,
                                updatedUI: updatedUI,
                            }];
                }
            });
        });
    }
    function getTemplatePaths(viewxTemplates) {
        var allPathNames = Object.keys(viewxTemplates).reduce(function (result, layerName) {
            //@ts-ignore
            var pathnames = Object.keys(viewxTemplates[layerName] || {});
            result = result.concat(pathnames);
            return result;
        }, []);
        var pathnames = new Set(allPathNames);
        return Array.from(pathnames);
    }
    function loadDynamicTemplate(_a) {
        var config = _a.config, viewxTemplates = _a.viewxTemplates, templates = _a.templates, setTemplates = _a.setTemplates, setUI = _a.setUI, ui = _a.ui, layers = _a.layers, Functions = _a.Functions, functionContext = _a.functionContext, pathname = _a.pathname;
        return __awaiter(this, void 0, Promise, function () {
            var fetchFunction, templateURL, loadedTemplates_1, _b, templatePaths, updatedUI, e_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        fetchFunction = (Functions.fetchJSON || fetchJSON$1).bind(functionContext);
                        templateURL = (config.settings.dynamicTemplatePathRequestMethod === 'path')
                            ? config.settings.dynamicTemplatePath + pathname
                            : config.settings.dynamicTemplatePath + ("?pathname=" + pathname);
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 5, , 6]);
                        if (!config.settings.hasPreloadedTemplates) return [3 /*break*/, 2];
                        _b = {};
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, fetchFunction(templateURL, config.settings.templateFetchOptions)];
                    case 3:
                        _b = _c.sent();
                        _c.label = 4;
                    case 4:
                        loadedTemplates_1 = _b;
                        viewxTemplates = layers.reduce(function (result, layer) {
                            var name = layer.name;
                            result[name] = __assign(__assign({}, loadedTemplates_1[name]), templates[name]);
                            return result;
                        }, viewxTemplates);
                        templatePaths = getTemplatePaths(viewxTemplates);
                        updatedUI = __assign(__assign({}, ui), { templatePaths: templatePaths, hasLoadedInitialProcess: true });
                        setTemplates(viewxTemplates);
                        setUI(updatedUI);
                        return [2 /*return*/, {
                                viewxTemplates: viewxTemplates,
                                updatedUI: updatedUI,
                            }];
                    case 5:
                        e_1 = _c.sent();
                        throw new Error("Could not load: " + templateURL);
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    function hasMatchingDynamicTemplateRoutePathFallback(_a) {
        var viewxTemplates = _a.viewxTemplates, layers = _a.layers, pathname = _a.pathname;
        var hasLayers = layers.filter(function (layer) {
            var name = layer.name;
            var viewxTemplateLayer = viewxTemplates[name];
            var templateRoute = findMatchingRoutePath(viewxTemplateLayer, pathname, {
                return_matching_keys: true
            });
            return templateRoute && templateRoute.route.includes('*') === false;
        });
        return hasLayers.length > 0;
    }
    /**
     * get template route layer map function
     * @param options.viewxTemplates - object of vxtTemplates
     * @param options.pathname - vxtRoutePath
     */
    function getTemplateRouteLayer(_a) {
        var viewxTemplates = _a.viewxTemplates, pathname = _a.pathname;
        var hasOverlayLayer = false;
        return function (layer) {
            var _a;
            var vxtObject;
            var name = layer.name, type = layer.type;
            var viewxTemplateLayer = viewxTemplates[name];
            var templateRoute = viewxTemplateLayer ? findMatchingRoutePath(viewxTemplateLayer, pathname, {
                return_matching_keys: true
            }) : undefined;
            if (type === "overlay" && templateRoute)
                hasOverlayLayer = true;
            if (!templateRoute &&
                viewxTemplateLayer && viewxTemplateLayer.__error_404 &&
                !hasOverlayLayer) {
                vxtObject = viewxTemplateLayer.__error_404;
            }
            else if (templateRoute) {
                vxtObject = viewxTemplateLayer[templateRoute.route];
            }
            if (vxtObject) {
                return {
                    name: name,
                    type: type,
                    vxtObject: vxtObject,
                    templateRoute: templateRoute,
                    ui: (_a = {},
                        _a["isRouteLayer_" + name + "_Matched"] = true,
                        _a),
                    hasOverlayLayer: hasOverlayLayer
                };
            }
            else
                return undefined;
        };
    }
    function loadRoute(_a) {
        var ui = _a.ui, viewxTemplates = _a.viewxTemplates, pathname = _a.pathname, dispatcher = _a.dispatcher, layers = _a.layers, Functions = _a.Functions, functionContext = _a.functionContext, _b = _a.resourceprops, resourceprops = _b === void 0 ? {} : _b;
        return __awaiter(this, void 0, Promise, function () {
            var applicationRootName, fetchResourcesFunction_1, templateRouteLayers_1, preFunctions, templateViewPromises, templateViewData, action, e_2;
            var _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        applicationRootName = "root";
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 4, , 5]);
                        fetchResourcesFunction_1 = Functions.fetchResources || fetchResources;
                        templateRouteLayers_1 = layers
                            .map(getTemplateRouteLayer({
                            viewxTemplates: viewxTemplates,
                            pathname: pathname
                        }))
                            .filter(function (layer) { return layer; });
                        return [4 /*yield*/, invokeWebhooks({
                                Functions: Functions,
                                functionContext: functionContext,
                                property: "preRenderFunctions",
                                templateRouteLayers: templateRouteLayers_1
                            })];
                    case 2:
                        preFunctions = _e.sent();
                        // @ts-ignore
                        if (shortCircutPromiseArray(preFunctions, "preRenderFunctions"))
                            return [2 /*return*/, false];
                        templateViewPromises = templateRouteLayers_1.map(function (templateRouteLayer) {
                            return fetchResourcesFunction_1.call(functionContext, {
                                resources: templateRouteLayer.vxtObject.resources,
                                templateRoute: templateRouteLayer.templateRoute
                            });
                        });
                        return [4 /*yield*/, Promise.all(templateViewPromises)];
                    case 3:
                        templateViewData = _e.sent();
                        action = templateViewData.reduce(function (result, templateViewDatum, i) {
                            var _a = templateRouteLayers_1[i], name = _a.name, type = _a.type, vxtObject = _a.vxtObject, ui = _a.ui, hasOverlayLayer = _a.hasOverlayLayer, templateRoute = _a.templateRoute;
                            if (hasOverlayLayer)
                                result.ui.hasOverlayLayer = true;
                            if (["applicationRoot", "overlay", "view"].includes(type)) {
                                if (type === "applicationRoot")
                                    applicationRootName = name;
                                result.ui.templateRoute = templateRoute;
                            }
                            setPageAttributes(vxtObject);
                            // @ts-ignore
                            result.view[name] = vxtObject;
                            // @ts-ignore
                            result.viewdata[name] = __assign(__assign({}, templateViewDatum), resourceprops);
                            // @ts-ignore
                            result.ui = __assign(__assign({}, result.ui), ui);
                            // result
                            return result;
                        }, {
                            type: "setView",
                            view: {},
                            viewdata: {},
                            ui: __assign(__assign({}, ui), { hasOverlayLayer: false })
                        });
                        // console.log({ action });
                        dispatcher(action);
                        invokeWebhooks({
                            Functions: Functions,
                            functionContext: functionContext,
                            templateViewData: templateViewData,
                            property: "postRenderFunctions",
                            templateRouteLayers: templateRouteLayers_1
                        });
                        return [2 /*return*/, action];
                    case 4:
                        e_2 = _e.sent();
                        Functions.log({ type: "error", error: e_2 });
                        dispatcher({
                            type: "setView",
                            view: (_c = {},
                                _c[applicationRootName] = viewxTemplates[applicationRootName].__error_500,
                                _c),
                            viewdata: (_d = {},
                                _d[applicationRootName] = {
                                    error: e_2
                                },
                                _d)
                        });
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    // @ts-ignore
    function shortCircutPromiseArray(promiseArrayResult, name) {
        // @ts-ignore
        var results = promiseArrayResult.map(
        // @ts-ignore
        function (arrayResult) { return arrayResult[Object.keys(arrayResult)[0]]; });
        //  // @ts-ignore
        //  console.log({ promiseArrayResult,results }, ' promiseArrayResult.filter(result => !result).length', promiseArrayResult.filter(result => !result).length);
        // @ts-ignore
        if (promiseArrayResult.length &&
            // @ts-ignore
            results.filter(function (result) { return result === false; }).length) {
            // return true;
            throw new Error("There was an error processing: " + name + ". [" + JSON.stringify(promiseArrayResult, null, 2) + "]");
        }
        else if (promiseArrayResult.length &&
            // @ts-ignore
            results.filter(function (result) { return result === undefined; }).length) {
            return true;
        }
        else
            return false;
    }
    // @ts-ignore
    function invokeWebhooks(_a) {
        var 
        // @ts-ignore
        Functions = _a.Functions, 
        // @ts-ignore
        functionContext = _a.functionContext, 
        // @ts-ignore
        templateViewData = _a.templateViewData, 
        // @ts-ignore
        _b = _a.property, 
        // @ts-ignore
        property = _b === void 0 ? "preRenderFunctions" : _b, 
        // @ts-ignore
        templateRouteLayers = _a.templateRouteLayers;
        return __awaiter(this, void 0, void 0, function () {
            var promises, promiseNames, results;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        promises = [];
                        promiseNames = [];
                        // @ts-ignore
                        templateRouteLayers.forEach(function (templateRouteLayer) { return __awaiter(_this, void 0, void 0, function () {
                            var functionNames, funcs;
                            return __generator(this, function (_a) {
                                functionNames = templateRouteLayer.vxtObject[property] || [];
                                funcs = functionNames.map(function (functionName) {
                                    return getFunctionFromNameString({
                                        Functions: Functions,
                                        functionContext: functionContext,
                                        functionName: functionName
                                    })(templateViewData);
                                });
                                promiseNames.push.apply(promiseNames, functionNames);
                                promises.push.apply(promises, funcs);
                                return [2 /*return*/];
                            });
                        }); });
                        return [4 /*yield*/, promiseSeries(
                            // @ts-ignore
                            promises.map(function (func) { return function () { return enforcePromise(func); }; }))];
                    case 1:
                        results = _c.sent();
                        // @ts-ignore
                        return [2 /*return*/, results.map(function (result, i) {
                                var _a;
                                return (_a = {},
                                    // @ts-ignore
                                    _a[promiseNames[i]] = result,
                                    _a);
                            })];
                }
            });
        });
    }
    function enforcePromise(val) {
        return val instanceof Promise ? val : Promise.resolve(val);
    }
    // @ts-ignore
    function promiseSeries(providers) {
        // console.log('promiseSeries',{providers})
        var ret = Promise.resolve(null);
        // @ts-ignore
        var results = [];
        // @ts-ignore
        return (providers
            // @ts-ignore
            .reduce(function (result, provider, index) {
            return result.then(function () {
                // @ts-ignore
                return provider().then(function (val) {
                    results[index] = val;
                });
            });
        }, ret)
            .then(function () {
            // @ts-ignore
            // console.log('promiseSeries', { results });
            // @ts-ignore
            return results;
        }));
    }
    /**
     * return bound function from function name string, e.g. func:this.props.debug
     * @param options.Functions - VXA Functions
     * @param options.functionContext - VXA Function Context
     * @param options.functionName - function name string
     */
    function getFunctionFromNameString(_a) {
        var Functions = _a.Functions, functionContext = _a.functionContext, functionName = _a.functionName;
        var func;
        try {
            if (typeof functionName === "string") {
                var name = getDynamicFunctionName(functionName);
                if (functionName.includes("func:this.props") &&
                    typeof functionContext.props[name] === "function") {
                    func = functionContext.props[name].bind(functionContext);
                }
                else if (functionName.includes("func:viewx.Functions") &&
                    typeof Functions[name] === "function") {
                    func = Functions[name].bind(functionContext);
                }
                else if (functionName.includes("func:window") &&
                    typeof window[name] === "function") {
                    func = window[name].bind(functionContext);
                }
            }
            if (func)
                return func;
            else
                return function () {
                    console.warn("Invalid Function Name: " + functionName);
                };
        }
        catch (e) {
            return function () {
                console.error("Invalid Function", e);
            };
        }
    }
    //func:this.props.login, func:window.alert, func:viewx.Functions.logout
    /* eslint-disable */
    var FUNCTION_NAME_REGEXP = /func:(?:this\.props|window|viewx)(?:\.Functions)?\.(\D.+)*/;
    /* eslint-enable */
    /**
     * get function name from function name string i.e. func:viewx.Functions.logout => logout
     * @param function_name - function name string
     */
    function getDynamicFunctionName(function_name) {
        return function_name.replace(FUNCTION_NAME_REGEXP, "$1");
    }

    /**
     * bound default vxa functions to the vxafunctioncontext object
     */
    function bindFunctionContext(_a) {
        var Functions = _a.Functions, functionContext = _a.functionContext;
        Functions.fetchJSON = fetchJSON$1.bind(functionContext);
        Functions.loadUser = Functions.loadUser.bind(functionContext);
        Functions.loginUser = Functions.loginUser.bind(functionContext);
        Functions.getUserProfile = Functions.getUserProfile.bind(functionContext);
        Functions.validateMFA = Functions.validateMFA.bind(functionContext);
        Functions.logoutUser = Functions.logoutUser.bind(functionContext);
    }
    function getMainComponent(options) {
        if (!options)
            throw ReferenceError("invalid VXA Options");
        else if (!options.config)
            throw ReferenceError("invalid VXA Options");
        var dispatch = options.dispatch, useGlobalState = options.useGlobalState, config = options.config, application = options.application;
        var Functions = config.Functions, settings = config.settings;
        var dispatcher = function (action) { return dispatch(action); };
        function Main(appProps) {
            var templates = useGlobalState("templates")[0];
            // const [templates, setTemplates] = useGlobalState("templates");
            var setTemplates = function (templates) { return dispatch({ type: 'setTemplates', templates: templates }); };
            var views = useGlobalState("views")[0];
            var user = useGlobalState("user")[0];
            var viewdata = useGlobalState("viewdata")[0];
            var ui = useGlobalState("ui")[0];
            // const [ui, setUI] = useGlobalState("ui");
            var setUI = function (ui) { return dispatch({ type: 'setUI', ui: ui }); };
            var _a = react_11(application ? application.state : {}), state = _a[0], setState = _a[1];
            var pathname = appProps.location.pathname;
            var props = Object.assign({
                dispatch: dispatch,
                templates: templates,
                views: views,
                viewdata: viewdata,
                ui: ui,
                user: user,
                setUI: setUI,
                setTemplates: setTemplates,
                updateState: function (applicationState) { return setState(applicationState); },
                setApplicationState: function (applicationState) {
                    return dispatch({ type: "setApplicationState", state: applicationState });
                }
            }, appProps);
            var functionContext = {
                props: props,
                state: state,
                setState: setState,
                settings: settings,
                viewx: { Functions: Functions, settings: settings }
            };
            if (settings.debug) {
                window.VXAcontext = functionContext;
            }
            // eslint-disable-line
            var loadView = react_16(function () {
                return function _loadView(_a) {
                    var _b, _c;
                    var layerName = _a.layerName, view = _a.view, resourceprops = _a.resourceprops, pathname = _a.pathname;
                    var loadViewPathname = pathname || "_loadView_" + layerName;
                    return loadRoute({
                        ui: ui,
                        viewxTemplates: Object.assign({}, templates, typeof layerName === 'string'
                            ? (_b = {},
                                _b[layerName] = __assign(__assign({}, templates[layerName]), (_c = {}, _c[loadViewPathname] = view, _c)),
                                _b) : {}),
                        pathname: loadViewPathname,
                        dispatcher: dispatcher,
                        layers: layerName
                            ? config
                                ? config.layers.filter(function (layer) { return layer.name === layerName; })
                                : []
                            : config.layers,
                        Functions: Functions,
                        resourceprops: resourceprops,
                        functionContext: functionContext
                    });
                };
                /* eslint-disable */
            }, [templates, functionContext]);
            /* eslint-enable */
            Functions.loadView = loadView;
            bindFunctionContext({ Functions: Functions, functionContext: functionContext });
            var ctx = {
                props: props,
                state: state,
                setState: setState,
                viewx: { Functions: Functions, settings: settings },
                // state:{counter, setCounter},
                debug: settings.debug,
                componentLibraries: Object.assign({}, config.componentLibraries),
                reactComponents: Object.assign({ Link: Link }, config.reactComponents)
            };
            if (settings.exposeVXAToWindow)
                window.__ViewXContext = ctx;
            var getReactElement = getReactElementFromJSONX.bind(ctx);
            react_12(function () {
                Functions.onLaunch.call(functionContext);
                return function () { return Functions.onShutdown.call(functionContext); };
                /* eslint-disable */
            }, []);
            /* eslint-enable */
            react_12(function () {
                var viewxTemplates = templates;
                var action;
                function initialize() {
                    return __awaiter(this, void 0, void 0, function () {
                        var updatedUI, updatedTemplates, dynamicTemplates, e_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    Functions.showLoader.call(functionContext, { ui: ui, setUI: setUI });
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 8, , 9]);
                                    setup.call(functionContext, { settings: settings });
                                    updatedUI = ui;
                                    if (!(ui.hasLoadedInitialProcess === false)) return [3 /*break*/, 4];
                                    return [4 /*yield*/, Functions.loadUser.call(functionContext)];
                                case 2:
                                    _a.sent();
                                    return [4 /*yield*/, loadTemplates({
                                            config: config,
                                            viewxTemplates: viewxTemplates,
                                            templates: templates,
                                            setTemplates: setTemplates,
                                            setUI: setUI,
                                            ui: ui,
                                            layers: config.layers,
                                            Functions: Functions,
                                            functionContext: functionContext
                                        })];
                                case 3:
                                    updatedTemplates = _a.sent();
                                    viewxTemplates = updatedTemplates.viewxTemplates;
                                    updatedUI = updatedTemplates.updatedUI;
                                    _a.label = 4;
                                case 4:
                                    if (!(config.settings.dynamicTemplatePath && updatedUI.templatePaths.includes(pathname) === false && hasMatchingDynamicTemplateRoutePathFallback({ viewxTemplates: viewxTemplates, layers: config.layers, pathname: pathname }) === false)) return [3 /*break*/, 6];
                                    return [4 /*yield*/, loadDynamicTemplate({
                                            config: config,
                                            viewxTemplates: viewxTemplates,
                                            templates: templates,
                                            setTemplates: setTemplates,
                                            setUI: setUI,
                                            ui: ui,
                                            layers: config.layers,
                                            Functions: Functions,
                                            functionContext: functionContext,
                                            pathname: pathname,
                                        })];
                                case 5:
                                    dynamicTemplates = _a.sent();
                                    viewxTemplates = dynamicTemplates.viewxTemplates;
                                    updatedUI = dynamicTemplates.updatedUI;
                                    _a.label = 6;
                                case 6: return [4 /*yield*/, loadRoute({
                                        ui: updatedUI,
                                        viewxTemplates: viewxTemplates,
                                        pathname: pathname,
                                        dispatcher: dispatcher,
                                        layers: config.layers,
                                        Functions: Functions,
                                        functionContext: functionContext
                                    })];
                                case 7:
                                    action = _a.sent();
                                    if (settings.setBodyPathnameID)
                                        setBodyPathnameId(pathname);
                                    return [3 /*break*/, 9];
                                case 8:
                                    e_1 = _a.sent();
                                    try {
                                        loadView({
                                            resourceprops: { error: e_1 },
                                            pathname: (e_1.message.includes('Could not load:')) ? '__error_400' : '__error_500',
                                        });
                                    }
                                    catch (e) {
                                    }
                                    Functions.log({ type: "error", error: e_1 });
                                    return [3 /*break*/, 9];
                                case 9:
                                    Functions.hideLoader.call(functionContext, { ui: typeof action !== 'undefined' && action.ui ? action.ui : ui, setUI: setUI });
                                    return [2 /*return*/];
                            }
                        });
                    });
                }
                initialize();
                //   // return function cleanup(){}
                /* eslint-disable */
            }, [pathname /* templates*/]);
            /* eslint-enable */
            return (react.createElement(react_5, { key: "viewx" }, config.layers.map(function (layer) {
                var name = layer.name, type = layer.type, idSelector = layer.idSelector;
                var jsonxChildren = getReactElement(views[name] ? views[name].jsonx : null, viewdata[name] ? viewdata[name] : {});
                // console.log(
                //   "LAYER",
                //   { name, type, jsonxChildren },
                //   "views[name]",
                //   views[name],
                //   "viewdata[name]",
                //   viewdata[name]
                // );
                if (type === "applicationRoot") {
                    return jsonxChildren;
                }
                else {
                    var el = document.querySelector("#" + (idSelector || name));
                    return el ? ReactDOM.createPortal(jsonxChildren, el) : null;
                }
            })));
        }
        return Main;
    }

    function u(){return (u=Object.assign||function(n){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var e in r)Object.prototype.hasOwnProperty.call(r,e)&&(n[e]=r[e]);}return n}).apply(this,arguments)}var i=function(n,t){if(!n.includes(t))throw new Error("'"+t+"' not found. It must be provided in initialState as a property key.")},c=Symbol("UPDATE_STATE"),a=function(a,f){var l=Object.keys(f),s=f,p=null,v={};l.forEach(function(n){v[n]=new Set;});var d=function(n,t){return t.type===c?t.r?t.r(n):t.e:a(n,t)},E=function(n,t){i(l,n);var r=function(r){var e,o;return u({},r,((e={})[n]="function"==typeof(o=t)?o(r[n]):o,e))};if(p){var e;p(((e={type:c}).r=r,e));}else {var o=(s=r(s))[n];v[n].forEach(function(n){return n(o)});}},S=function(n,t){l.forEach(function(r){var e=t[r];n[r]!==e&&v[r].forEach(function(n){return n(e)});});};return {useGlobalStateProvider:function(){var e=react_14(d,s),o=e[0],u=e[1];react_12(function(){var n;if(p)throw new Error("Only one global state provider is allowed");return p=u,u(((n={type:c}).e=s,n)),function(){p=null;}},[]);var i=react_17(o);S(i.current,o),i.current=o,react_12(function(){s=o;},[o]);},useGlobalState:function(n){i(l,n);var r=react_11(s[n]),u=r[0],c=r[1];return react_12(function(){return v[n].add(c),c(s[n]),function(){v[n].delete(c);}},[n]),[u,react_15(function(t){return E(n,t)},[n])]},getGlobalState:function(n){return i(l,n),s[n]},setGlobalState:E,getState:function(){return s},setState:function(n){var t;p?p(((t={type:c}).e=n,t)):S(s,s=n);},dispatch:function(n){if(p)p(n);else {var t=s;s=a(s,n),S(t,s);}return n}}},l$1=function n(t,r,e){return void 0===r&&(r=t(void 0,{type:void 0})),e?e(n)(t,r):a(t,r)};

    function getGlobalStateHooks(options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var settings, layers, layerOpenState, reducer, initialState, _a, 
            // GlobalStateProvider,
            dispatch, useGlobalState;
            return __generator(this, function (_b) {
                settings = options.config.settings;
                layers = options.config.layers;
                layerOpenState = layers.reduce(function (result, layer) {
                    var name = layer.name, type = layer.type;
                    result["isRouteLayer_" + name + "_Matched"] =
                        type === "applicationRoot" ? true : false;
                    return result;
                }, {});
                reducer = function (state, action) {
                    var _a;
                    switch (action.type) {
                        case "viewxUILoadingStart":
                            return __assign(__assign({}, state), {
                                ui: __assign(__assign({}, state.ui), { isLoading: true })
                            });
                        case "viewxUILoadingComplete":
                            return __assign(__assign({}, state), {
                                ui: __assign(__assign({}, state.ui), { isLoading: false })
                            });
                        case "setView":
                            // console.warn('setting setView', { action },state.ui);
                            return __assign(__assign({}, state), { views: __assign(__assign({}, state.views), action.view), viewdata: __assign(__assign({}, state.viewdata), action.viewdata), ui: __assign(__assign({}, state.ui), action.ui) });
                        case "setReturnURL":
                            // console.warn('setting RETURN URL', { action },state.ui);
                            return __assign(__assign({}, state), { ui: __assign(__assign({}, state.ui), { returnURL: action.returnURL }) });
                        case "setUser":
                            if (settings.cacheLoggedInUser || action.rememberMe) {
                                // @ts-ignore
                                Object.keys(action.user)
                                    .filter(function (prop) { return prop !== "type"; })
                                    .forEach(function (prop) {
                                    setCacheStore("user", prop, action.user[prop], settings.cacheUserTimeout);
                                });
                            }
                            return __assign(__assign({}, state), { user: __assign(__assign({}, state.user), action.user) });
                        case "setSocket":
                            return __assign(__assign({}, state), { socker: action.socket });
                        case "setUI": {
                            return __assign(__assign({}, state), { ui: __assign(__assign({}, state.ui), action.ui) });
                        }
                        case "setTemplates": {
                            return __assign(__assign({}, state), { templates: __assign(__assign({}, state.templates), action.templates) });
                        }
                        case "setApplicationState":
                            return __assign(__assign({}, state), action.state);
                        default:
                            if (action.type.includes("toggleMatchedRouteLayer")) {
                                var _b = action.type.split("_"), layerName = _b[1];
                                var uiLayerName = "isRouteLayer_" + layerName + "_Matched";
                                return __assign(__assign({}, state), { ui: __assign(__assign({}, state.ui), (_a = {}, _a[uiLayerName] = !state.ui[uiLayerName], _a)) });
                            }
                            return state;
                    }
                };
                initialState = __assign(__assign({}, options.application.state), { views: __assign({}, options.vxaState.views), viewdata: __assign({}, options.vxaState.viewdata), templates: __assign({}, options.templates), socket: {}, ui: __assign(__assign({ templateRoute: {
                            route: '',
                            location: '',
                            params: {},
                            re: undefined,
                        }, templatePaths: [], isLoading: true, isModalOpen: false, hasOverlayLayer: false, hasLoadedInitialProcess: false, hasPreloadedTemplates: settings.hasPreloadedTemplates || false, returnURL: undefined }, layerOpenState), options.vxaState.ui), user: __assign({ token: settings.cacheLoggedInUser
                            ? getFromCacheStore("user", "token")
                            : undefined, tokenData: settings.cacheLoggedInUser
                            ? getFromCacheStore("user", "tokenData")
                            : undefined, expires: settings.cacheLoggedInUser
                            ? getFromCacheStore("user", "expires")
                            : undefined, timeout: settings.cacheLoggedInUser
                            ? getFromCacheStore("user", "timeout")
                            : undefined, profile: settings.cacheLoggedInUser
                            ? getFromCacheStore("user", "profile") || {}
                            : {}, fetchHeaders: {}, loggedIn: settings.cacheLoggedInUser
                            ? getFromCacheStore("user", "loggedIn") || false
                            : false, loggedInMFA: settings.cacheLoggedInUser
                            ? getFromCacheStore("user", "loggedInMFA") || false
                            : false }, options.vxaState.user) });
                _a = l$1(reducer, initialState), dispatch = _a.dispatch, useGlobalState = _a.useGlobalState;
                return [2 /*return*/, {
                        // GlobalStateProvider,
                        dispatch: dispatch,
                        useGlobalState: useGlobalState
                    }];
            });
        });
    }

    function getViewXapp(options) {
        return __awaiter(this, void 0, Promise, function () {
            var settings, _a, 
            // GlobalStateProvider,
            dispatch, useGlobalState, MainApp, Router, app;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        settings = options.config.settings;
                        return [4 /*yield*/, getGlobalStateHooks(options)];
                    case 1:
                        _a = _b.sent(), dispatch = _a.dispatch, useGlobalState = _a.useGlobalState;
                        options.dispatch = dispatch;
                        options.useGlobalState = useGlobalState;
                        MainApp = getMainComponent(options);
                        switch (settings.router) {
                            case "static":
                                Router = StaticRouter;
                                break;
                            case "hash":
                                Router = HashRouter;
                                break;
                            case "memory":
                                Router = MemoryRouter;
                                break;
                            default:
                                Router = BrowserRouter;
                                break;
                        }
                        app = (
                        // <GlobalStateProvider>
                        react.createElement(Router, null,
                            react.createElement(Route, { path: "*", component: MainApp }))
                        // </GlobalStateProvider>
                        );
                        return [2 /*return*/, { app: app, options: options, }];
                }
            });
        });
    }

    var config = {
        componentLibraries: {},
        reactComponents: {},
        querySelector: "#root",
        settings: {
            name: "VXA-SPA",
            version: "0.0.1",
            addReactToWindow: true,
            addReactDOMToWindow: true,
            addJSONXToWindow: true,
            debug: true,
            exposeVXAToWindow: false,
            router: "browser",
            cacheTemplatesOffline: false,
            cacheLoggedInUser: true,
            cacheUserTimeout: 1000 * 60 * 24 * 30,
            templatePath: undefined,
            templateFetchOptions: {},
            fetchHeaders: {},
            dynamicTemplatePath: undefined,
            dynamicTemplatePathRequestMethod: 'path',
            dynamicTemplateFetchOptions: {},
            useBodyLoadedClass: true,
            useHTMLLoadedClass: true,
            setBodyPathnameID: true,
            hasPreloadedTemplates: true,
            bodyLoadedClass: "__viewx_body_loaded",
            htmlLoadedClass: "__viewx_html_loaded",
            uiLoadedClass: "__viewx_ui_loaded",
            uiLoadingClass: "__viewx_ui_loading",
            useWindowRequestQuery: true,
            useWebSockets: false,
            useWebSocketsAuth: false,
            socket_server_options: {},
            socket_disconnect_message: {},
            socket_server: undefined,
            accessTokenProperty: "x-access-token",
            routes: {
                user_login: "/auth/user/login",
                user_login_METHOD: "POST",
                user_login_mfa: "/auth/user/mfa",
                user_login_mfa_METHOD: "POST",
                user_profile: "/auth/user/profile",
                user_profile_METHOD: "POST",
                login: "/login",
                login_mfa: "/login_mfa",
                logged_in_homepage: "/home",
                logged_out_homepage: "/"
            }
        },
        Functions: {
            // @ts-ignore
            log: function (_a) {
                var type = _a.type, data = _a.data, error = _a.error, meta = _a.meta;
                switch (type) {
                    case "error":
                        console.error(error, { data: data, meta: meta });
                        break;
                    case "warning":
                        console.warn(data, { meta: meta });
                        break;
                    case "info":
                        console.info(data, { meta: meta });
                        break;
                    default:
                        console.log(data, { meta: meta });
                }
            },
            // @ts-ignore
            debug: function (input) {
                console.info("DEBUG", {
                    input: input
                });
            },
            // @ts-ignore
            showLoader: function (_a) {
                var ui = _a.ui, setUI = _a.setUI;
                var el = document.querySelector("#loading");
                if (el) {
                    el.style.height = "100%";
                    el.style.width = "100%";
                    el.style.position = "absolute";
                    el.style.background = "whitesmoke";
                    el.style.textAlign = "center";
                    el.style.display = "block";
                    el.style.opacity = "0.8";
                }
                setUI(__assign(__assign({}, ui), { isLoading: true }));
            },
            // @ts-ignore
            hideLoader: function (_a) {
                var ui = _a.ui, setUI = _a.setUI;
                var el = document.querySelector("#loading");
                if (el)
                    el.style.display = "none";
                setUI(__assign(__assign({}, ui), { isLoading: false }));
            },
            onPageChange: function () { },
            onLaunch: function () {
                // console.warn('default onlaunch')
            },
            onShutdown: function () {
                // console.warn('default onshutdown')
            },
            requireAuth: function requireAuth() {
                return __awaiter(this, void 0, void 0, function () {
                    var returnURL;
                    return __generator(this, function (_a) {
                        // @ts-ignore
                        if (this.props.user.loggedIn === false) {
                            returnURL = void 0;
                            // @ts-ignore
                            if (this.props.location.pathname !== this.settings.routes.login) {
                                // @ts-ignore
                                this.props.dispatch({
                                    type: "setReturnURL",
                                    // @ts-ignore
                                    returnURL: this.props.location.pathname
                                });
                                // @ts-ignore
                                returnURL = "?returnURL=" + this.props.location.pathname;
                            }
                            // @ts-ignore
                            this.props.history.push(this.settings.routes.login + returnURL);
                            return [2 /*return*/, undefined];
                        }
                        else
                            return [2 /*return*/, true];
                    });
                });
            },
            requireMFA: function requireMFA() {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        // @ts-ignore
                        if (this.props.user.loggedIn === false) {
                            // @ts-ignore
                            this.props.history.push(this.settings.routes.login);
                        }
                        else if (
                        // @ts-ignore
                        this.props.user.loggedInMFA === false &&
                            // @ts-ignore
                            this.props.user.loggedIn)
                            // @ts-ignore
                            this.props.history.push(this.settings.routes.login_mfa);
                        return [2 /*return*/];
                    });
                });
            },
            loadUser: function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        // try {
                        //   if (results[results.length - 1] === 'true') {
                        //     this.props.authenticatedMFA();
                        //   }
                        //   let jwt_token = results[ 0 ];
                        //   let jwt_token_data = JSON.parse(results[ 1 ]);
                        //   let jwt_user_profile = {};
                        //   try {
                        //     jwt_user_profile = JSON.parse(results[ 2 ]);
                        //   } catch (e) {
                        //     this.props.getUserProfile(jwt_token);
                        //     this.props.initializeAuthenticatedUser(jwt_token, false);
                        //     this.props.errorNotification(new Error('Invalid User Profile'));
                        //   }
                        //   if (jwt_token_data && jwt_user_profile) {
                        //     let url = '/api/jwt/token';
                        //     let response = {};
                        //     let json = {
                        //       token: jwt_token_data.token,
                        //       expires: jwt_token_data.expires,
                        //       timeout: jwt_token_data.timeout,
                        //       user: jwt_user_profile,
                        //     };
                        //     let currentTime = new Date();
                        //     if (moment(jwt_token_data.expires).isBefore(currentTime)) {
                        //       let expiredTokenError = new Error(`Access Token Expired ${moment(jwt_token_data.expires).format('LLLL')}`);
                        //       this.props.logoutUser();
                        //       throw expiredTokenError;
                        //     } else {
                        //       this.props.saveUserProfile(url, response, json);
                        //       this.props.initializeAuthenticatedUser(json.token, false);
                        //     }
                        //   } else if (jwt_token) {
                        //     this.props.getUserProfile(jwt_token);
                        //     this.props.initializeAuthenticatedUser(jwt_token, false);
                        //     this.props.createNotification({ text: 'welcome back', timeout:4000,  });
                        return [2 /*return*/, true];
                    });
                });
            },
            // @ts-ignore
            getSocketUser: function (_a) {
                var token = _a.token, expires = _a.expires, timeout = _a.timeout, profile = _a.profile;
                return {
                    email: profile.email,
                    username: profile.name || profile.username,
                    jwt_token: token,
                    jwt_token_expires: expires,
                    jwt_token_timeout: timeout,
                    userdata: profile
                };
            },
            // @ts-ignore
            loginUser: function (_a) {
                var username = _a.username, password = _a.password, remember_me = _a.remember_me;
                return __awaiter(this, void 0, void 0, function () {
                    var queryParams, tokenData, token, expires, timeout, userLoginAction, profile, user, e_1;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 3, , 4]);
                                queryParams = qs.parse(window.location.search);
                                console.log("loginUser", { username: username, password: password, queryParams: queryParams }, this);
                                return [4 /*yield*/, this.viewx.Functions.fetchJSON(
                                    // @ts-ignore
                                    this.settings.routes.user_login, {
                                        // @ts-ignore
                                        method: this.settings.routes.user_login_METHOD,
                                        headers: {
                                            Accept: "application/json",
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify({
                                            username: username,
                                            password: password
                                        })
                                    })];
                            case 1:
                                tokenData = _b.sent();
                                token = tokenData.token, expires = tokenData.expires, timeout = tokenData.timeout;
                                // console.log({ token, expires, timeout, } )
                                if (!token)
                                    throw new ReferenceError("Invalid login token");
                                userLoginAction = {
                                    type: "setUser",
                                    user: {
                                        token: token,
                                        tokenData: tokenData,
                                        expires: expires,
                                        timeout: timeout,
                                        loggedIn: true,
                                        rememberMe: typeof remember_me !== "undefined" ? remember_me : true
                                        // loggedInMFA: false,
                                    }
                                };
                                // @ts-ignore
                                this.viewx.Functions.showLoader.call(this, {
                                    // @ts-ignore
                                    ui: this.props.ui,
                                    // @ts-ignore
                                    setUI: this.props.setUI
                                });
                                // @ts-ignore
                                this.props.dispatch(userLoginAction);
                                return [4 /*yield*/, this.viewx.Functions.getUserProfile({ token: token })];
                            case 2:
                                profile = _b.sent();
                                // @ts-ignore
                                this.props.dispatch({ type: "setUser", user: { profile: profile } });
                                //send welcome message
                                // @ts-ignore
                                if (this.settings.useWebSockets) {
                                    user = this.viewx.Functions.getSocketUser({
                                        token: token,
                                        expires: expires,
                                        timeout: timeout,
                                        profile: profile
                                    });
                                    // @ts-ignore
                                    this.props.socket.emit("authentication", {
                                        user: user,
                                        reconnection: true
                                    });
                                }
                                // @ts-ignore
                                console.log("this.props.ui.returnURL", this.props.ui.returnURL);
                                // @ts-ignore
                                this.props.history.push(
                                // @ts-ignore
                                this.props.ui.returnURL || this.settings.routes.logged_in_homepage);
                                return [3 /*break*/, 4];
                            case 3:
                                e_1 = _b.sent();
                                // @ts-ignore
                                this.viewx.Functions.log({ type: "error", error: e_1 });
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            },
            // @ts-ignore
            getUserProfile: function (_a) {
                var token = _a.token;
                return __awaiter(this, void 0, void 0, function () {
                    var _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0: return [4 /*yield*/, this.viewx.Functions.fetchJSON(
                                // @ts-ignore
                                this.settings.routes.user_profile, {
                                    // @ts-ignore
                                    method: this.settings.routes.user_profile_METHOD,
                                    // @ts-ignore
                                    headers: (_b = {}, _b[this.settings.accessTokenProperty] = token, _b)
                                })];
                            case 1: 
                            // @ts-ignore
                            return [2 /*return*/, _c.sent()];
                        }
                    });
                });
            },
            // @ts-ignore
            validateMFA: function (_a) {
                var code = _a.code;
                return __awaiter(this, void 0, void 0, function () {
                    var response, e_2;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.viewx.Functions.fetchJSON(
                                    // @ts-ignore
                                    this.settings.routes.user_login, {
                                        // @ts-ignore
                                        method: this.settings.routes.user_login_mfa_METHOD,
                                        headers: { Accept: "application/json" },
                                        body: JSON.stringify({
                                            code: code
                                        })
                                    })];
                            case 1:
                                response = _b.sent();
                                if (response && response.data && response.data.authenticated) ;
                                else if (response.result === "error") {
                                    throw new Error(response.data.error);
                                    //           return this.enforceMFA()(dispatch, getState);
                                }
                                else
                                    throw Error("Invalid Repsonse");
                                return [3 /*break*/, 3];
                            case 2:
                                e_2 = _b.sent();
                                // @ts-ignore
                                this.viewx.Functions.log({ type: "error", error: e_2 });
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            },
            logoutUser: function () {
                var userLoginProps = [
                    "token",
                    "tokenData",
                    "expires",
                    "timeout",
                    "profile",
                    "loggedIn",
                    "loggedInMFA"
                ];
                //remove cache keys
                // @ts-ignore
                if (this.settings.cacheLoggedInUser)
                    removeKeys("user", userLoginProps);
                //remove from state
                var userLogoutAction = userLoginProps.reduce(function (result, prop) {
                    // @ts-ignore
                    result.user[prop] = false;
                    return result;
                }, {
                    type: "setUser",
                    user: {}
                });
                // @ts-ignore
                this.viewx.Functions.showLoader.call(this, {
                    // @ts-ignore
                    ui: this.props.ui,
                    // @ts-ignore
                    setUI: this.props.setUI
                });
                // @ts-ignore
                this.props.dispatch(userLogoutAction);
                // @ts-ignore
                this.props.history.push(this.settings.routes.logged_out_homepage);
            }
        },
        layers: [
            {
                order: 100,
                name: "loading",
                system: true,
                type: "loadingView"
            },
            {
                order: 200,
                name: "modal",
                system: true,
                type: "overlay"
            },
            // overlay
            {
                order: 400,
                name: "header",
                system: true,
                type: "view"
            },
            // nav
            // footer
            // error
            {
                order: 900,
                name: "root",
                system: true,
                type: "applicationRoot"
            }
        ]
    };

    var customFileType;
    (function (customFileType) {
        customFileType["script"] = "script";
        customFileType["style"] = "style";
    })(customFileType || (customFileType = {}));

    var addedReact = false;
    function getFilePromise(_a) {
        var type = _a.type, file = _a.file, i = _a.i, name = _a.name;
        return new Promise(function (resolve, reject) {
            try {
                var returnedFile_1 = false;
                var onload = function () {
                    returnedFile_1 = true;
                    // console.log('LOADED SCRIPT', umdFilePath);
                    resolve(file);
                };
                var t_1 = setTimeout(function () {
                    clearTimeout(t_1);
                    if (returnedFile_1 === false)
                        throw new Error("Timeout loading file: " + file);
                }, 60000);
                if (type === "script") {
                    insertJavaScript({
                        name: name + "-" + i,
                        src: file,
                        async: true,
                        onload: onload
                    });
                }
                else if (type === "style") {
                    insertStyleSheet({
                        src: file,
                        name: name + "-" + i,
                        onload: onload
                    });
                }
                else
                    resolve(true);
            }
            catch (e) {
                console.error(e);
                reject(e);
            }
        });
    }
    function getComponentPromise(customComponent) {
        return new Promise(function (resolve, reject) {
            var returnedFile = false;
            try {
                var 
                // type,
                umdFilePath_1 = customComponent.umdFilePath, name_1 = customComponent.name, _a = customComponent.stylesheets, stylesheets = _a === void 0 ? [] : _a;
                if (umdFilePath_1) {
                    var t_2 = setTimeout(function () {
                        clearTimeout(t_2);
                        if (returnedFile === false)
                            throw new Error("Timeout loading file: " + umdFilePath_1);
                    }, 60000);
                }
                if (stylesheets.length) {
                    stylesheets.forEach(function (stylesheet, i) {
                        return insertStyleSheet({
                            src: stylesheet,
                            name: name_1 + "-" + i
                        });
                    });
                }
                if (umdFilePath_1) {
                    if (addedReact === false) {
                        if (!window.React)
                            window.React = __getReact();
                        if (!window.ReactDOM)
                            window.ReactDOM = __getReactDOM();
                        addedReact = true;
                    }
                    insertJavaScript({
                        name: name_1,
                        src: umdFilePath_1,
                        async: true,
                        onload: function () {
                            returnedFile = true;
                            // console.log("LOADED SCRIPT", { umdFilePath, name, });
                            resolve(umdFilePath_1);
                        }
                    });
                }
                else
                    resolve(true);
            }
            catch (e) {
                console.error(e);
                reject(e);
            }
        });
    }
    function getReactLibrariesAndComponents(_a) {
        var customComponents = _a.customComponents;
        return __awaiter(this, void 0, Promise, function () {
            var componentLibraries, reactComponents;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        componentLibraries = {};
                        reactComponents = {};
                        if (!(customComponents && customComponents.length)) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.all(customComponents.map(getComponentPromise))];
                    case 1:
                        _b.sent();
                        customComponents.forEach(function (customComponent) {
                            var type = customComponent.type, name = customComponent.name, jsonx = customComponent.jsonx, options = customComponent.options, functionBody = customComponent.functionBody;
                            if (type === "library") {
                                if (jsonx) {
                                    componentLibraries[name] = Object.keys(jsonx).reduce(function (result, prop) {
                                        var libraryComponent = jsonx[prop];
                                        var type = libraryComponent.type, name = libraryComponent.name, jsonxComponent = libraryComponent.jsonxComponent, options = libraryComponent.options, functionBody = libraryComponent.functionBody;
                                        if (type === "component") {
                                            result[name] = _jsonxComponents.getReactClassComponent(jsonxComponent, options);
                                        }
                                        else {
                                            result[name] = _jsonxComponents.getReactFunctionComponent(jsonxComponent, functionBody, options);
                                        }
                                        return result;
                                    }, {});
                                }
                                else
                                    componentLibraries[name] = window[name];
                            }
                            else if (type === "component") {
                                if (jsonx) {
                                    reactComponents[name] = _jsonxComponents.getReactClassComponent(jsonx, options);
                                }
                                else
                                    reactComponents[name] = window[name];
                            }
                            else if (type === "function") {
                                if (jsonx) {
                                    reactComponents[name] = _jsonxComponents.getReactFunctionComponent(jsonx, functionBody, options);
                                }
                                else
                                    reactComponents[name] = window[name];
                            }
                        });
                        _b.label = 2;
                    case 2: return [2 /*return*/, {
                            componentLibraries: componentLibraries,
                            reactComponents: reactComponents
                        }];
                }
            });
        });
    }
    function addCustomFiles(_a) {
        var type = _a.type, files = _a.files;
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!files || !files.length)
                            return [2 /*return*/, []];
                        return [4 /*yield*/, Promise.all(files.map(function (file, i) {
                                return getFilePromise({
                                    type: type,
                                    file: file,
                                    i: i,
                                    name: type
                                });
                            }))];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    }
    function configureViewx(options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, Promise, function () {
            var layerMaxOrder, applicationRootLayerName, configuration, allLayers, layerObject, reactJSONXComponents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        layerMaxOrder = 0;
                        configuration = __assign({}, config);
                        configuration.settings = __assign(__assign(__assign({}, configuration.settings), options.settings), { routes: __assign(__assign({}, configuration.settings.routes), options.settings.routes) });
                        configuration.Functions = __assign(__assign({}, configuration.Functions), options.customFunctions);
                        configuration.layers = configuration.layers || [];
                        allLayers = [];
                        allLayers.push.apply(allLayers, configuration.layers);
                        allLayers.push.apply(allLayers, (options.layers || []));
                        layerObject = allLayers.reduce(function (result, layerObject) {
                            var order = layerObject.order, name = layerObject.name, type = layerObject.type;
                            if (order > layerMaxOrder)
                                layerMaxOrder = order;
                            if (type === "applicationRoot")
                                applicationRootLayerName = name;
                            result[name] = layerObject;
                            return result;
                        }, {});
                        if (!applicationRootLayerName)
                            throw ReferenceError("Invalid/Missing ApplicationRoot Layer");
                        if (layerObject[applicationRootLayerName].order !== layerMaxOrder)
                            layerObject[applicationRootLayerName].order = layerMaxOrder + 1;
                        configuration.layers = Object.keys(layerObject).map(function (layerName) { return layerObject[layerName]; });
                        return [4 /*yield*/, addCustomFiles({
                                type: customFileType.script,
                                files: options.initialScripts
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, Promise.all([
                                getReactLibrariesAndComponents({
                                    customComponents: options.customComponents
                                }),
                                addCustomFiles({
                                    type: customFileType.script,
                                    files: options.customScripts
                                }),
                                addCustomFiles({
                                    type: customFileType.style,
                                    files: options.customStyles
                                })
                            ])];
                    case 2:
                        reactJSONXComponents = (_a.sent())[0];
                        configuration.componentLibraries = reactJSONXComponents.componentLibraries;
                        configuration.reactComponents = reactJSONXComponents.reactComponents;
                        return [2 /*return*/, configuration];
                }
            });
        });
    }

    const options = {
      customComponents: [
        // {
        // name:ComponentName,
        // format:umd|jsonx,
        // type:component|library,
        // umdFilePath:url,
        // jsonx,
        // stylesheets:[url,],
        // }
      ],
      customScripts: [
        /*url,*/
      ],
      customStyles: [
        /*url,*/
      ],
      customFunctions: {
        /*Function, */
      },
      // config: {
      //   Functions: {},
      //   componentLibraries: {},
      //   layers: [],
      //   querySelector: '',
      //   reactComponents: {},
      //   // settings: {},
      // },
      layers: [
        // loading,
        // modal,
        // overlay,
        // header,
        // footer,
        // nav,
        // error,
        // root,
        {
          order: 100,
          name: "root",
          type: "applicationRoot"
        }
      ],
      querySelector:"#root",
      settings: {},
      application: {
        state: {
          name: "My Application",
          version: "0.0.1"
        }
      },
      vxaState: {
        views: {},
        viewdata: {},
        ui: {},
        user: {}
      },
      templates: {
        loading: {
          "/:catchall*": {
            jsonx: {
              component: "div",
              children: "loading..."
            }
          }
        },
        root: {
          __error_404: {
            jsonx: {
              component: "div",
              children: [
                {
                  component: "h1",
                  children: "Not Found"
                },
                {
                  component: "div",
                  thisprops: {
                    _children: ["location", "pathname"]
                  }
                }
              ]
            },
            pageData: [
              {
                tagName: "title",
                attributes: {},
                innerHTML: "Not Found"
              }
            ]
          },
          __error_500: {
            jsonx: {
              component: "div",
              children: [
                {
                  component: "h1",
                  children: "Error"
                },
                {
                  component: "div",
                  props: {
                    style: {
                      padding: "1rem",
                      margin: "1rem",
                      border: "1px solid lightgrey"
                    }
                  },
                  children: [
                    {
                      component: "pre",
                      resourceprops: {
                        _children: ["error", "message"]
                      }
                    },
                    {
                      component: "pre",
                      resourceprops: {
                        _children: ["error", "stack"]
                      }
                    }
                  ]
                }
              ]
            },
            pageData: [
              {
                tagName: "title",
                attributes: {},
                innerHTML: "Error"
              }
            ]
          },
          "/about-un-auth-basic": {
    				"jsonx": {
    					"component": "div",
    					"children": [{
    							"component": "p",
    							"children": "about page"
    						},
    						{
    							"component": "ul",
    							"children": [{
    									"component": "li",
    									"children": [{
    										"component": "Link",
    										"props": {
    											"to": "/"
    										},
    										"children": "index"
    									}]
    								},
    								{
    									"component": "li",
    									"children": [{
    										"component": "Link",
    										"props": {
    											"to": "/home"
    										},
    										"children": "home page"
    									}]
    								},
    								{
    									"component": "li",
    									"children": [{
    										"component": "Link",
    										"props": {
    											"to": "/about"
    										},
    										"children": "about page "
    									},
                      {
    										"component": "Link",
    										"props": {
    											"to": "/about-un-auth"
    										},
    										"children": " about page (no auth)"
    									}]
    								},
    								{
    									"component": "li",
    									"children": [{
    										"component": "Link",
    										"props": {
    											"to": "/page/2"
    										},
    										"children": "Page two"
    									}]
    								}
    							]
                },
                {
                  component: 'ul',
                  resourceprops: {
                    __spread:['photos']
                  },
                  __spreadComponent:{
                    component:'li',
                    thisprops:{
                      _children:['__item','title']
                    }
                  },
                }
    					]
    				},
    				"resources": {
    					"album": "https://jsonplaceholder.typicode.com/albums/1",
    					"photos": "https://jsonplaceholder.typicode.com/albums/1/photos"
    				},
            "pageData": [
              {
    						"tagName": "title",
    						"attributes": {

    						},
    						"innerHTML": "My about Page"
    					},
    					{
                "tagName": "meta",
    						"attributes": {
                  "name": "theme-color",
    							"content": "#9a1c5e"
    						},
    					}
    				]
    			},
          "/login": {
            jsonx: {
              component: "div",
              props: {
                key:902932
              },
              children: [
                {
                  component: "h1",
                  children: "Login",
                  props: {
                    key:31222,
                  },
                },
                {
                  component:'FormComponent',
                  props: {
                    formComponent: {
                      component: 'div',
                      props: {
                        key:3122,
                      },
                      children: [
                        {
                          component: 'div',
                          props: {
                            key:312,
                          },
                          children: [
                            {
                              component: 'label',
                              props: {
                                style: {
                                  
                                  display:'block'
                                }
                              },
                              children:'Username'
                            },
                            {
                              component: "input",
                              props: {
                                key:31,
                                type: "text",
                                name: "username",
                                placeholder: "username"
                              },
                              // thiscontext:{
                              //   ref:['reactHookForm','register']
                              // },
                              __dangerouslyEvalProps:{
                                ref:`(function(){
                              return this.reactHookForm.register({required:'required username'});
                            })`,
                              }
                            },
                            {
                              component: "ReactHookForm.ErrorMessage",
                              props: {
                                key:32,
                                name: "username"
                              },
                              thiscontext:{
                                errors:['reactHookForm','errors']
                              },
                              __dangerouslyInsertFunctionComponents: {
                                children:{
                                  functionBody: `let exposeProps={}`,
                                  reactComponent:{
                                    component:'p',
                                    thisprops:{
                                      _children:['message']
                                    }
                                    // children:'test functional component',
                                  },
                                  options: {
                                    name:'testHookFormError'
                                  }
                                }
                              }
                            },
                          ]
                        },
                        {
                          component: 'div',
                          props: {
                            key:412,
                          },
                          children: [
                            {
                              component: 'label',
                              props: {
                                style: {
                                  
                                  display:'block'
                                }
                              },
                              children:'Password'
                            },
                            {
                              component: "input",
                              props: {
                                key:41,
                                type: "password",
                                name: "password",
                                placeholder: "password"
                              },
                              __dangerouslyEvalProps:{
                                ref:`(function(){
                              return this.reactHookForm.register({required:'required password'});
                            })`,
                              }
                            },
                            {
                              component: "ReactHookForm.ErrorMessage",
                              props: {
                                key:42,
                                name: "password"
                              },
                              thiscontext:{
                                errors:['reactHookForm','errors']
                              },
                              __dangerouslyInsertFunctionComponents: {
                                children:{
                                  functionBody: `let exposeProps={}`,
                                  reactComponent:{
                                    component: 'p',
                                    props:{key:4552},
                                    thisprops:{
                                      _children:['message']
                                    }
                                  },
                                  options: {
                                    name:'testHookFormError'
                                  }
                                }
                              }
                            },
                          ]
                        },
                        {
                          component: 'div',
                          props: {
                            key:512
                          },
                          children: [
                            {
                              component: "button",
                              props: {
                                key:5432,
                                type: "submit"
                              },
                              children: "Submit"
                            }
                          ]
                        }
                      ],
                    }
                  },
                  __dangerouslyBindEvalProps: {
                    onSubmit: function(values){
                      console.log({ values }, this);
                      this.viewx.Functions.loginUser(values);

                      // setTimeout(() => {
                      //   alert(JSON.stringify(values, null, 2));
                      //   setSubmitting(false);
                      // }, 400);
                    }
                  }
                }
              ]
            },
            pageData: [
              {
                tagName: "title",
                attributes: {},
                innerHTML: "User Login"
              }
            ]
          },
          

          "/": {
            // '/:catchall*': {
            preRenderFunctions: [
              // 'func:viewx.Functions.passOne',
              // 'func:window.someWindowFunction',
              // 'func:viewx.Functions.passOne',
              // 'func:viewx.Functions.passTwo',
              // 'func:viewx.Functions.requireAuth',
              // 'func:viewx.Functions.passOne',
            ],
            pageData: [
              {
                tagName: "title",
                attributes: {},
                innerHTML: "Sample Simple App"
              }
            ],
            jsonx: {
              component: "Fragment",
              props: {
                key: "catchall"
              },
              children: [
                {
                  component: "div",
                  thiscontext: {
                    _children: ["state", "name"]
                  }
                  // children: 'hello world!',
                },
                {
                  component: "sayHello"
                },
                {
                  component: "h2",
                  thisstate: {
                    _children: ["name"]
                  }
                },
                {
                  component: "div",
                  props: {
                    style: {
                      display: "flex"
                    }
                  },
                  children: [
                    {
                      component: "input",
                      props: {
                        style: {
                          padding: "5px"
                        }
                      },
                      thisstate: {
                        value: ["name"]
                      },
                      __dangerouslyBindEvalProps: {
                        onChange: `(function(e){
                      //console.log({e});
                      console.log('this',this)
                      //console.log('e.target.value',e.target.value)
                      this.props.updateState({name:e.target.value})
                      // this.setState({name:e.target.value})
                    })`
                      }
                    },
                    {
                      component: "Link",
                      props: {
                        to: "/modal/hello",
                        style: {
                          padding: "5px"
                        }
                      },
                      children: "Hello Modal"
                    },
                    {
                      component: "Link",
                      props: {
                        to: "/about",
                        style: {
                          padding: "5px"
                        }
                      },
                      children: "About Page"
                    },
                    {
                      component: "Link",
                      props: {
                        to: "/page/4",
                        style: {
                          padding: "5px"
                        }
                      },
                      children: "Page 4"
                    },
                    {
                      component: "button",
                      props: {
                        style: {
                          padding: "5px"
                        }
                      },
                      children: "change header",
                      __dangerouslyBindEvalProps: {
                        onClick: `(function(){
                      // console.log('onClick this',this);
                      this.viewx.Functions.loadView({
                        layerName:'header',
                        view:{
                          jsonx:{
                            component:'h1',
                            resourceprops:{
                              style:['customStyle']
                            },
                            children:'NEW HEADER',
                          },
                        },
                        resourceprops:{
                          customStyle:{
                            color:'red',
                          }
                        }
                      });
                    })`
                      }
                    }
                  ]
                }
              ]
            }
          }
        },
        modal: {
          "/modal/hello": {
            jsonx: {
              component: "ReactModal",
              props: {
                ariaHideApp: false
              },
              thisprops: {
                isOpen: ["ui", "isRouteLayer_modal_Matched"]
              },
              __dangerouslyBindEvalProps: {
                onRequestClose: `(function(){
              // console.log('onRequestClose this',this);
              this.props.dispatch({ type:'toggleMatchedRouteLayer_modal',});
              this.props.history.goBack();
            })`
              },
              // __functionProps: {
              //   onRequestClose:['func:this.props.toggleMatchedRouteLayer_modal']
              // },
              children: [
                {
                  component:'div',
                  children: "SAY HELLO MODAL!!"
                }
              ]
            }
          }
        }
      }
    };

    window.hoistNonReactStatics = hoistNonReactStatics_cjs;
    function ViewXApp(options$1) {
        if (options$1 === void 0) { options$1 = {}; }
        return __awaiter(this, void 0, Promise, function () {
            var appOptions, _a, querySelector, _b, app, ViewXAppOptions;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        appOptions = __assign(__assign({}, options), options$1);
                        _a = appOptions;
                        return [4 /*yield*/, configureViewx(appOptions)];
                    case 1:
                        _a.config = _c.sent();
                        querySelector = appOptions.querySelector;
                        return [4 /*yield*/, getViewXapp(appOptions)];
                    case 2:
                        _b = _c.sent(), app = _b.app, ViewXAppOptions = _b.options;
                        appOptions.config.layers
                            .sort(function (a, b) { return a.order - b.order; })
                            .forEach(function (layer) { return createLayer({ layer: layer, app: app, querySelector: querySelector, }); });
                        return [2 /*return*/, { app: app, options: ViewXAppOptions, }];
                }
            });
        });
    }

    var isUndefined$2 = (val) => val === undefined;

    var isNullOrUndefined$1 = (value) => value === null || isUndefined$2(value);

    var isArray$2 = (value) => Array.isArray(value);

    const isObjectType$1 = (value) => typeof value === 'object';
    var isObject$1 = (value) => !isNullOrUndefined$1(value) && !isArray$2(value) && isObjectType$1(value);

    var isHTMLElement$1 = (value) => isObject$1(value) && value.nodeType === Node.ELEMENT_NODE;

    const VALIDATION_MODE$1 = {
        onBlur: 'onBlur',
        onChange: 'onChange',
        onSubmit: 'onSubmit',
    };
    const VALUE$1 = 'value';
    const UNDEFINED$1 = 'undefined';
    const EVENTS$1 = {
        BLUR: 'blur',
        CHANGE: 'change',
        INPUT: 'input',
    };
    const INPUT_VALIDATION_RULES$1 = {
        max: 'max',
        min: 'min',
        maxLength: 'maxLength',
        minLength: 'minLength',
        pattern: 'pattern',
        required: 'required',
        validate: 'validate',
    };
    const REGEX_IS_DEEP_PROP$1 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    const REGEX_IS_PLAIN_PROP$1 = /^\w*$/;
    const REGEX_PROP_NAME$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    const REGEX_ESCAPE_CHAR$1 = /\\(\\)?/g;

    function attachEventListeners$1({ field, handleChange, isRadioOrCheckbox, }) {
        const { ref } = field;
        if (isHTMLElement$1(ref) && ref.addEventListener && handleChange) {
            ref.addEventListener(isRadioOrCheckbox ? EVENTS$1.CHANGE : EVENTS$1.INPUT, handleChange);
            ref.addEventListener(EVENTS$1.BLUR, handleChange);
        }
    }

    var isKey$1 = (value) => !isArray$2(value) &&
        (REGEX_IS_PLAIN_PROP$1.test(value) || !REGEX_IS_DEEP_PROP$1.test(value));

    var stringToPath$1 = (string) => {
        const result = [];
        string.replace(REGEX_PROP_NAME$1, (match, number, quote, string) => {
            result.push(quote ? string.replace(REGEX_ESCAPE_CHAR$1, '$1') : number || match);
        });
        return result;
    };

    function set$1(object, path, value) {
        let index = -1;
        const tempPath = isKey$1(path) ? [path] : stringToPath$1(path);
        const length = tempPath.length;
        const lastIndex = length - 1;
        while (++index < length) {
            const key = tempPath[index];
            let newValue = value;
            if (index !== lastIndex) {
                const objValue = object[key];
                newValue =
                    isObject$1(objValue) || isArray$2(objValue)
                        ? objValue
                        : !isNaN(tempPath[index + 1])
                            ? []
                            : {};
            }
            object[key] = newValue;
            object = object[key];
        }
        return object;
    }

    var transformToNestObject$1 = (data) => Object.entries(data).reduce((previous, [key, value]) => {
        if (!isKey$1(key)) {
            set$1(previous, key, value);
            return previous;
        }
        return Object.assign(Object.assign({}, previous), { [key]: value });
    }, {});

    var get$1 = (obj, path, defaultValue) => {
        const result = path
            .split(/[,[\].]+?/)
            .filter(Boolean)
            .reduce((result, key) => (isNullOrUndefined$1(result) ? result : result[key]), obj);
        return isUndefined$2(result) || result === obj
            ? obj[path] || defaultValue
            : result;
    };

    var focusErrorField$1 = (fields, fieldErrors) => {
        for (const key in fields) {
            if (get$1(fieldErrors, key)) {
                const field = fields[key];
                if (field) {
                    if (isHTMLElement$1(field.ref) && field.ref.focus) {
                        field.ref.focus();
                        break;
                    }
                    else if (field.options) {
                        field.options[0].ref.focus();
                        break;
                    }
                }
            }
        }
    };

    var removeAllEventListeners$1 = (ref, validateWithStateUpdate) => {
        if (isHTMLElement$1(ref) && ref.removeEventListener) {
            ref.removeEventListener(EVENTS$1.INPUT, validateWithStateUpdate);
            ref.removeEventListener(EVENTS$1.CHANGE, validateWithStateUpdate);
            ref.removeEventListener(EVENTS$1.BLUR, validateWithStateUpdate);
        }
    };

    var isRadioInput$1 = (element) => !!element && element.type === 'radio';

    var isCheckBoxInput$1 = (element) => !!element && element.type === 'checkbox';

    function isDetached$1(element) {
        if (!element) {
            return true;
        }
        if (!(element instanceof HTMLElement) ||
            element.nodeType === Node.DOCUMENT_NODE) {
            return false;
        }
        return isDetached$1(element.parentNode);
    }

    var isEmptyObject$1 = (value) => isObject$1(value) && !Object.keys(value).length;

    function castPath$1(value) {
        return isArray$2(value) ? value : stringToPath$1(value);
    }
    function baseGet$1(object, path) {
        const updatePath = isKey$1(path) ? [path] : castPath$1(path);
        const length = path.length;
        let index = 0;
        while (index < length) {
            object = isUndefined$2(object) ? index++ : object[updatePath[index++]];
        }
        return index == length ? object : undefined;
    }
    function baseSlice$1(array, start, end) {
        let index = -1;
        let length = array.length;
        if (start < 0) {
            start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
            end += length;
        }
        length = start > end ? 0 : end - start;
        const result = Array(length);
        while (++index < length) {
            result[index] = array[index + start];
        }
        return result;
    }
    function parent$1(object, path) {
        return path.length == 1 ? object : baseGet$1(object, baseSlice$1(path, 0, -1));
    }
    function baseUnset$1(object, path) {
        const updatePath = isKey$1(path) ? [path] : castPath$1(path);
        const childObject = parent$1(object, updatePath);
        const key = updatePath[updatePath.length - 1];
        const result = !(childObject != null) || delete childObject[key];
        let previousObjRef = undefined;
        for (let k = 0; k < updatePath.slice(0, -1).length; k++) {
            let index = -1;
            let objectRef = undefined;
            const currentPaths = updatePath.slice(0, -(k + 1));
            const currentPathsLength = currentPaths.length - 1;
            if (k > 0) {
                previousObjRef = object;
            }
            while (++index < currentPaths.length) {
                const item = currentPaths[index];
                objectRef = objectRef ? objectRef[item] : object[item];
                if (currentPathsLength === index) {
                    if (isObject$1(objectRef) && isEmptyObject$1(objectRef)) {
                        previousObjRef ? delete previousObjRef[item] : delete object[item];
                    }
                    else if (isArray$2(objectRef) &&
                        !objectRef.filter(data => isObject$1(data) && !isEmptyObject$1(data))
                            .length) {
                        if (previousObjRef) {
                            delete previousObjRef[item];
                        }
                    }
                }
                previousObjRef = objectRef;
            }
        }
        return result;
    }
    function unset$1(object, paths) {
        paths.forEach(path => {
            baseUnset$1(object, path);
        });
        return object;
    }

    function findRemovedFieldAndRemoveListener$1(fields, handleChange, field, forceDelete) {
        if (!field) {
            return;
        }
        const { ref, ref: { name, type }, mutationWatcher, } = field;
        if (!type) {
            delete fields[name];
            return;
        }
        const fieldValue = fields[name];
        if ((isRadioInput$1(ref) || isCheckBoxInput$1(ref)) && fieldValue) {
            const { options } = fieldValue;
            if (isArray$2(options) && options.length) {
                options
                    .filter(Boolean)
                    .forEach(({ ref, mutationWatcher }, index) => {
                    if ((ref && isDetached$1(ref)) || forceDelete) {
                        removeAllEventListeners$1(ref, handleChange);
                        if (mutationWatcher) {
                            mutationWatcher.disconnect();
                        }
                        unset$1(options, [`[${index}]`]);
                    }
                });
                if (options && !options.filter(Boolean).length) {
                    delete fields[name];
                }
            }
            else {
                delete fields[name];
            }
        }
        else if (isDetached$1(ref) || forceDelete) {
            removeAllEventListeners$1(ref, handleChange);
            if (mutationWatcher) {
                mutationWatcher.disconnect();
            }
            delete fields[name];
        }
    }

    const defaultReturn$1 = {
        isValid: false,
        value: '',
    };
    var getRadioValue$1 = (options) => isArray$2(options)
        ? options.filter(Boolean).reduce((previous, { ref: { checked, value } }) => checked
            ? {
                isValid: true,
                value,
            }
            : previous, defaultReturn$1)
        : defaultReturn$1;

    var getMultipleSelectValue$1 = (options) => [...options]
        .filter(({ selected }) => selected)
        .map(({ value }) => value);

    var isFileInput$1 = (element) => !!element && element.type === 'file';

    var isMultipleSelect$1 = (element) => !!element && element.type === 'select-multiple';

    var isEmptyString$1 = (value) => value === '';

    const defaultResult$1 = {
        value: false,
        isValid: false,
    };
    const validResult$1 = { value: true, isValid: true };
    var getCheckboxValue$1 = (options) => {
        if (isArray$2(options)) {
            if (options.length > 1) {
                const values = options
                    .filter(({ ref: { checked } }) => checked)
                    .map(({ ref: { value } }) => value);
                return { value: values, isValid: !!values.length };
            }
            const { checked, value, attributes } = options[0].ref;
            return checked
                ? attributes && !isUndefined$2(attributes.value)
                    ? isUndefined$2(value) || isEmptyString$1(value)
                        ? validResult$1
                        : { value: value, isValid: true }
                    : validResult$1
                : defaultResult$1;
        }
        return defaultResult$1;
    };

    function getFieldValue$1(fields, ref) {
        const { name, value } = ref;
        const field = fields[name];
        if (isFileInput$1(ref)) {
            return ref.files;
        }
        if (isRadioInput$1(ref)) {
            return field ? getRadioValue$1(field.options).value : '';
        }
        if (isMultipleSelect$1(ref)) {
            return getMultipleSelectValue$1(ref.options);
        }
        if (isCheckBoxInput$1(ref)) {
            return field ? getCheckboxValue$1(field.options).value : false;
        }
        return value;
    }

    var isString$2 = (value) => typeof value === 'string';

    var getFieldsValues$1 = (fields, search) => {
        const output = {};
        const isSearchString = isString$2(search);
        const isSearchArray = isArray$2(search);
        const isNest = search && search.nest;
        for (const name in fields) {
            if (isUndefined$2(search) ||
                isNest ||
                (isSearchString && name.startsWith(search)) ||
                (isSearchArray &&
                    search.find((data) => name.startsWith(data)))) {
                output[name] = getFieldValue$1(fields, fields[name].ref);
            }
        }
        return output;
    };

    var compareObject$1 = (objectA = {}, objectB = {}) => Object.entries(objectA).reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);

    var isSameError$1 = (error, { type, types, message, }) => {
        return (isObject$1(error) &&
            error.type === type &&
            error.message === message &&
            compareObject$1(error.types, types));
    };

    function shouldUpdateWithError$1({ errors, name, error, validFields, fieldsWithValidation, }) {
        const isFieldValid = isEmptyObject$1(error);
        const isFormValid = isEmptyObject$1(errors);
        const currentFieldError = get$1(error, name);
        const existFieldError = get$1(errors, name);
        if ((isFieldValid && validFields.has(name)) ||
            (existFieldError && existFieldError.isManual)) {
            return false;
        }
        if (isFormValid !== isFieldValid ||
            (!isFormValid && !existFieldError) ||
            (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {
            return true;
        }
        return currentFieldError && !isSameError$1(existFieldError, currentFieldError);
    }

    var isRegex$1 = (value) => value instanceof RegExp;

    var getValueAndMessage$1 = (validationData) => {
        const isValueMessage = (value) => isObject$1(value) && !isRegex$1(value);
        return isValueMessage(validationData)
            ? validationData
            : {
                value: validationData,
                message: '',
            };
    };

    var isFunction$1 = (value) => typeof value === 'function';

    var isBoolean$1 = (value) => typeof value === 'boolean';

    var isMessage$1 = (value) => isString$2(value) || (isObject$1(value) && react_9(value));

    function getValidateError$1(result, ref, type = 'validate') {
        if (isMessage$1(result) || (isBoolean$1(result) && !result)) {
            const message = isMessage$1(result) ? result : '';
            return {
                type,
                message,
                ref,
            };
        }
    }

    var appendErrors$1 = (name, validateAllFieldCriteria, errors, type, message) => {
        if (!validateAllFieldCriteria) {
            return {};
        }
        const error = errors[name];
        return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });
    };

    var validateField$1 = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {
        const fields = fieldsRef.current;
        const error = {};
        const isRadio = isRadioInput$1(ref);
        const isCheckBox = isCheckBoxInput$1(ref);
        const isRadioOrCheckbox = isRadio || isCheckBox;
        const isEmpty = isEmptyString$1(value);
        const appendErrorsCurry = appendErrors$1.bind(null, name, validateAllFieldCriteria, error);
        const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES$1.maxLength, minType = INPUT_VALIDATION_RULES$1.minLength) => {
            const message = exceedMax ? maxLengthMessage : minLengthMessage;
            error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,
                ref }, (exceedMax
                ? appendErrorsCurry(maxType, message)
                : appendErrorsCurry(minType, message)));
            if (!validateAllFieldCriteria) {
                return error;
            }
        };
        if (required &&
            ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined$1(value))) ||
                (isBoolean$1(value) && !value) ||
                (isCheckBox && !getCheckboxValue$1(options).isValid) ||
                (isRadio && !getRadioValue$1(options).isValid))) {
            const { value: requiredValue, message: requiredMessage } = isMessage$1(required)
                ? { value: !!required, message: required }
                : getValueAndMessage$1(required);
            if (requiredValue) {
                error[name] = Object.assign({ type: INPUT_VALIDATION_RULES$1.required, message: requiredMessage, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES$1.required, requiredMessage));
                if (!validateAllFieldCriteria) {
                    return error;
                }
            }
        }
        if (!isNullOrUndefined$1(min) || !isNullOrUndefined$1(max)) {
            let exceedMax;
            let exceedMin;
            const { value: maxValue, message: maxMessage } = getValueAndMessage$1(max);
            const { value: minValue, message: minMessage } = getValueAndMessage$1(min);
            if (type === 'number' || (!type && !isNaN(value))) {
                const valueNumber = ref.valueAsNumber || parseFloat(value);
                if (!isNullOrUndefined$1(maxValue)) {
                    exceedMax = valueNumber > maxValue;
                }
                if (!isNullOrUndefined$1(minValue)) {
                    exceedMin = valueNumber < minValue;
                }
            }
            else {
                const valueDate = ref.valueAsDate || new Date(value);
                if (isString$2(maxValue)) {
                    exceedMax = valueDate > new Date(maxValue);
                }
                if (isString$2(minValue)) {
                    exceedMin = valueDate < new Date(minValue);
                }
            }
            if (exceedMax || exceedMin) {
                getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES$1.max, INPUT_VALIDATION_RULES$1.min);
                if (!validateAllFieldCriteria) {
                    return error;
                }
            }
        }
        if (isString$2(value) && !isEmpty && (maxLength || minLength)) {
            const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage$1(maxLength);
            const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage$1(minLength);
            const inputLength = value.toString().length;
            const exceedMax = !isNullOrUndefined$1(maxLengthValue) && inputLength > maxLengthValue;
            const exceedMin = !isNullOrUndefined$1(minLengthValue) && inputLength < minLengthValue;
            if (exceedMax || exceedMin) {
                getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);
                if (!validateAllFieldCriteria) {
                    return error;
                }
            }
        }
        if (pattern && !isEmpty) {
            const { value: patternValue, message: patternMessage } = getValueAndMessage$1(pattern);
            if (isRegex$1(patternValue) && !patternValue.test(value)) {
                error[name] = Object.assign({ type: INPUT_VALIDATION_RULES$1.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES$1.pattern, patternMessage));
                if (!validateAllFieldCriteria) {
                    return error;
                }
            }
        }
        if (validate) {
            const fieldValue = getFieldValue$1(fields, ref);
            const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;
            if (isFunction$1(validate)) {
                const result = await validate(fieldValue);
                const validateError = getValidateError$1(result, validateRef);
                if (validateError) {
                    error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES$1.validate, validateError.message));
                    if (!validateAllFieldCriteria) {
                        return error;
                    }
                }
            }
            else if (isObject$1(validate)) {
                let validationResult = {};
                for (const [key, validateFunction] of Object.entries(validate)) {
                    if (!isEmptyObject$1(validationResult) && !validateAllFieldCriteria) {
                        break;
                    }
                    const validateResult = await validateFunction(fieldValue);
                    const validateError = getValidateError$1(validateResult, validateRef, key);
                    if (validateError) {
                        validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));
                        if (validateAllFieldCriteria) {
                            error[name] = validationResult;
                        }
                    }
                }
                if (!isEmptyObject$1(validationResult)) {
                    error[name] = Object.assign({ ref: validateRef }, validationResult);
                    if (!validateAllFieldCriteria) {
                        return error;
                    }
                }
            }
        }
        return error;
    };

    const parseErrorSchema$1 = (error, validateAllFieldCriteria) => isArray$2(error.inner)
        ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria
            ? {
                [path]: appendErrors$1(path, validateAllFieldCriteria, previous, type, message),
            }
            : {
                [path]: previous[path] || Object.assign({ message,
                    type }, (validateAllFieldCriteria
                    ? {
                        types: { [type]: message || true },
                    }
                    : {})),
            }))), {})
        : {
            [error.path]: { message: error.message, type: error.type },
        };
    async function validateWithSchema$1(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {
        if (validationResolver) {
            return validationResolver(data, context);
        }
        try {
            return {
                values: await validationSchema.validate(data, {
                    abortEarly: false,
                    context,
                }),
                errors: {},
            };
        }
        catch (e) {
            return {
                values: {},
                errors: transformToNestObject$1(parseErrorSchema$1(e, validateAllFieldCriteria)),
            };
        }
    }

    var getDefaultValue$1 = (defaultValues, name, defaultValue) => isUndefined$2(defaultValues[name])
        ? get$1(defaultValues, name, defaultValue)
        : defaultValues[name];

    function flatArray$1(list) {
        return list.reduce((a, b) => a.concat(isArray$2(b) ? flatArray$1(b) : b), []);
    }

    var isPrimitive$1 = (value) => isNullOrUndefined$1(value) || !isObjectType$1(value);

    const getPath$3 = (path, values) => {
        const getInnerPath = (value, key, isObject) => {
            const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;
            return isPrimitive$1(value) ? pathWithIndex : getPath$3(pathWithIndex, value);
        };
        return isArray$2(values)
            ? values.map((value, key) => getInnerPath(value, key))
            : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));
    };
    var getPath$1$1 = (parentPath, value) => flatArray$1(getPath$3(parentPath, value));

    var assignWatchFields$1 = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {
        let value;
        watchFields.add(fieldName);
        if (isEmptyObject$1(fieldValues)) {
            value = undefined;
        }
        else if (!isUndefined$2(fieldValues[fieldName])) {
            value = fieldValues[fieldName];
            watchFields.add(fieldName);
        }
        else {
            value = get$1(transformToNestObject$1(fieldValues), fieldName);
            if (!isUndefined$2(value)) {
                getPath$1$1(fieldName, value).forEach(name => watchFields.add(name));
            }
        }
        return isUndefined$2(value)
            ? isObject$1(combinedDefaultValues)
                ? getDefaultValue$1(combinedDefaultValues, fieldName)
                : combinedDefaultValues
            : value;
    };

    var skipValidation$1 = ({ isOnChange, hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnChange && isBlurEvent) ||
        (isOnSubmit && isReValidateOnSubmit) ||
        (isOnSubmit && !isSubmitted) ||
        (isOnBlur && !isBlurEvent && !hasError) ||
        (isReValidateOnBlur && !isBlurEvent && hasError) ||
        (isReValidateOnSubmit && isSubmitted);

    var getFieldValueByName$1 = (fields, name) => {
        const results = transformToNestObject$1(getFieldsValues$1(fields));
        return name ? get$1(results, name, results) : results;
    };

    function getIsFieldsDifferent$1(referenceArray, differenceArray) {
        let isMatch = false;
        if (!isArray$2(referenceArray) ||
            !isArray$2(differenceArray) ||
            referenceArray.length !== differenceArray.length) {
            return true;
        }
        for (let i = 0; i < referenceArray.length; i++) {
            if (isMatch) {
                break;
            }
            const dataA = referenceArray[i];
            const dataB = differenceArray[i];
            if (isUndefined$2(dataB) ||
                Object.keys(dataA).length !== Object.keys(dataB).length) {
                isMatch = true;
                break;
            }
            for (const key in dataA) {
                if (dataA[key] !== dataB[key]) {
                    isMatch = true;
                    break;
                }
            }
        }
        return isMatch;
    }

    const isMatchFieldArrayName$1 = (name, searchName) => name.startsWith(`${searchName}[`);
    var isNameInFieldArray$1 = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName$1(name, current) ? true : prev), false);

    var isFileListObject$1 = (data) => typeof FileList !== UNDEFINED$1 && data instanceof FileList;

    function onDomRemove$1(element, onDetachCallback) {
        const observer = new MutationObserver(() => {
            if (isDetached$1(element)) {
                observer.disconnect();
                onDetachCallback();
            }
        });
        observer.observe(window.document, {
            childList: true,
            subtree: true,
        });
        return observer;
    }

    var modeChecker$1 = (mode) => ({
        isOnSubmit: !mode || mode === VALIDATION_MODE$1.onSubmit,
        isOnBlur: mode === VALIDATION_MODE$1.onBlur,
        isOnChange: mode === VALIDATION_MODE$1.onChange,
    });

    const { useRef: useRef$1, useState: useState$1, useCallback: useCallback$1, useEffect: useEffect$1 } = React;
    function useForm$1({ mode = VALIDATION_MODE$1.onSubmit, reValidateMode = VALIDATION_MODE$1.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {
        const fieldsRef = useRef$1({});
        const validateAllFieldCriteria = validateCriteriaMode === 'all';
        const errorsRef = useRef$1({});
        const touchedFieldsRef = useRef$1({});
        const watchFieldsRef = useRef$1(new Set());
        const dirtyFieldsRef = useRef$1(new Set());
        const fieldsWithValidationRef = useRef$1(new Set());
        const validFieldsRef = useRef$1(new Set());
        const isValidRef = useRef$1(true);
        const defaultRenderValuesRef = useRef$1({});
        const defaultValuesRef = useRef$1(defaultValues);
        const isUnMount = useRef$1(false);
        const isWatchAllRef = useRef$1(false);
        const isSubmittedRef = useRef$1(false);
        const isDirtyRef = useRef$1(false);
        const submitCountRef = useRef$1(0);
        const isSubmittingRef = useRef$1(false);
        const handleChangeRef = useRef$1();
        const resetFieldArrayFunctionRef = useRef$1({});
        const validationContextRef = useRef$1(validationContext);
        const fieldArrayNamesRef = useRef$1(new Set());
        const [, render] = useState$1();
        const { isOnBlur, isOnSubmit, isOnChange } = useRef$1(modeChecker$1(mode)).current;
        const isWindowUndefined = typeof window === UNDEFINED$1;
        const shouldValidateCallback = !!(validationSchema || validationResolver);
        const isWeb = typeof document !== UNDEFINED$1 &&
            !isWindowUndefined &&
            !isUndefined$2(window.HTMLElement);
        const isProxyEnabled = isWeb && 'Proxy' in window;
        const readFormStateRef = useRef$1({
            dirty: !isProxyEnabled,
            dirtyFields: !isProxyEnabled,
            isSubmitted: isOnSubmit,
            submitCount: !isProxyEnabled,
            touched: !isProxyEnabled,
            isSubmitting: !isProxyEnabled,
            isValid: !isProxyEnabled,
        });
        const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef$1(modeChecker$1(reValidateMode)).current;
        const reRender = useCallback$1(() => {
            if (!isUnMount.current) {
                render({});
            }
        }, []);
        const shouldRenderBaseOnError = useCallback$1((name, error, shouldRender, skipReRender) => {
            let shouldReRender = shouldRender ||
                shouldUpdateWithError$1({
                    errors: errorsRef.current,
                    error,
                    name,
                    validFields: validFieldsRef.current,
                    fieldsWithValidation: fieldsWithValidationRef.current,
                });
            if (isEmptyObject$1(error)) {
                if (fieldsWithValidationRef.current.has(name) ||
                    shouldValidateCallback) {
                    validFieldsRef.current.add(name);
                    shouldReRender = shouldReRender || get$1(errorsRef.current, name);
                }
                errorsRef.current = unset$1(errorsRef.current, [name]);
            }
            else {
                validFieldsRef.current.delete(name);
                shouldReRender = shouldReRender || !get$1(errorsRef.current, name);
                set$1(errorsRef.current, name, error[name]);
            }
            if (shouldReRender && !skipReRender) {
                reRender();
                return true;
            }
        }, [reRender, shouldValidateCallback]);
        const setFieldValue = useCallback$1((field, rawValue) => {
            const ref = field.ref;
            const options = field.options;
            const { type } = ref;
            const value = isWeb && isHTMLElement$1(ref) && isNullOrUndefined$1(rawValue)
                ? ''
                : rawValue;
            if (isRadioInput$1(ref) && options) {
                options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));
            }
            else if (isFileInput$1(ref)) {
                if (isEmptyString$1(value) ||
                    isFileListObject$1(value)) {
                    ref.files = value;
                }
                else {
                    ref.value = value;
                }
            }
            else if (isMultipleSelect$1(ref)) {
                [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));
            }
            else if (isCheckBoxInput$1(ref) && options) {
                options.length > 1
                    ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))
                    : (options[0].ref.checked = !!value);
            }
            else {
                ref.value = value;
            }
            return !!type;
        }, [isWeb]);
        const setDirty = (name) => {
            if (!fieldsRef.current[name] ||
                (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {
                return false;
            }
            const isFieldArray = isNameInFieldArray$1(fieldArrayNamesRef.current, name);
            const previousDirtyFieldsLength = dirtyFieldsRef.current.size;
            let isDirty = defaultRenderValuesRef.current[name] !==
                getFieldValue$1(fieldsRef.current, fieldsRef.current[name].ref);
            if (isFieldArray) {
                const fieldArrayName = name.substring(0, name.indexOf('['));
                isDirty = getIsFieldsDifferent$1(getFieldValueByName$1(fieldsRef.current, fieldArrayName), get$1(defaultValuesRef.current, fieldArrayName));
            }
            const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==
                isDirty;
            if (isDirty) {
                dirtyFieldsRef.current.add(name);
            }
            else {
                dirtyFieldsRef.current.delete(name);
            }
            isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;
            return readFormStateRef.current.dirty
                ? isDirtyChanged
                : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;
        };
        const setDirtyAndTouchedFields = useCallback$1((fieldName) => {
            if (setDirty(fieldName) ||
                (!get$1(touchedFieldsRef.current, fieldName) &&
                    readFormStateRef.current.touched)) {
                return !!set$1(touchedFieldsRef.current, fieldName, true);
            }
        }, []);
        const setInternalValueBatch = useCallback$1((name, value, parentFieldName) => {
            const isValueArray = isArray$2(value);
            for (const key in value) {
                const fieldName = `${parentFieldName || name}${isValueArray ? `[${key}]` : `.${key}`}`;
                if (isObject$1(value[key])) {
                    setInternalValueBatch(name, value[key], fieldName);
                }
                const field = fieldsRef.current[fieldName];
                if (field) {
                    setFieldValue(field, value[key]);
                    setDirtyAndTouchedFields(fieldName);
                }
            }
        }, [setFieldValue, setDirtyAndTouchedFields]);
        const setInternalValue = useCallback$1((name, value) => {
            const field = fieldsRef.current[name];
            if (field) {
                setFieldValue(field, value);
                const output = setDirtyAndTouchedFields(name);
                if (isBoolean$1(output)) {
                    return output;
                }
            }
            else if (!isPrimitive$1(value)) {
                setInternalValueBatch(name, value);
            }
        }, [setDirtyAndTouchedFields, setFieldValue, setInternalValueBatch]);
        const executeValidation = useCallback$1(async (name, skipReRender) => {
            const field = fieldsRef.current[name];
            if (!field) {
                return false;
            }
            const error = await validateField$1(fieldsRef, validateAllFieldCriteria, field);
            shouldRenderBaseOnError(name, error, false, skipReRender);
            return isEmptyObject$1(error);
        }, [shouldRenderBaseOnError, validateAllFieldCriteria]);
        const executeSchemaValidation = useCallback$1(async (payload) => {
            const { errors } = await validateWithSchema$1(validationSchema, validateAllFieldCriteria, getFieldValueByName$1(fieldsRef.current), validationResolver, validationContextRef.current);
            const previousFormIsValid = isValidRef.current;
            isValidRef.current = isEmptyObject$1(errors);
            if (isArray$2(payload)) {
                payload.forEach(name => {
                    const error = get$1(errors, name);
                    if (error) {
                        set$1(errorsRef.current, name, error);
                    }
                    else {
                        unset$1(errorsRef.current, [name]);
                    }
                });
                reRender();
            }
            else {
                shouldRenderBaseOnError(payload, (get$1(errors, payload)
                    ? { [payload]: get$1(errors, payload) }
                    : {}), previousFormIsValid !== isValidRef.current);
            }
            return isEmptyObject$1(errorsRef.current);
        }, [
            reRender,
            shouldRenderBaseOnError,
            validateAllFieldCriteria,
            validationResolver,
            validationSchema,
        ]);
        const triggerValidation = useCallback$1(async (payload) => {
            const fields = payload || Object.keys(fieldsRef.current);
            if (shouldValidateCallback) {
                return executeSchemaValidation(fields);
            }
            if (isArray$2(fields)) {
                const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));
                reRender();
                return result.every(Boolean);
            }
            return await executeValidation(fields);
        }, [
            executeSchemaValidation,
            executeValidation,
            reRender,
            shouldValidateCallback,
        ]);
        const isFieldWatched = (name) => isWatchAllRef.current ||
            watchFieldsRef.current.has(name) ||
            watchFieldsRef.current.has((name.match(/\w+/) || [])[0]);
        function setValue(names, valueOrShouldValidate, shouldValidate) {
            let shouldRender = false;
            const isMultiple = isArray$2(names);
            (isMultiple
                ? names
                : [names]).forEach((name) => {
                const isStringFieldName = isString$2(name);
                shouldRender =
                    setInternalValue(isStringFieldName ? name : Object.keys(name)[0], isStringFieldName
                        ? valueOrShouldValidate
                        : Object.values(name)[0]) || isMultiple
                        ? true
                        : isFieldWatched(name);
            });
            if (shouldRender || isMultiple) {
                reRender();
            }
            if (shouldValidate || (isMultiple && valueOrShouldValidate)) {
                triggerValidation(isMultiple ? undefined : names);
            }
        }
        handleChangeRef.current = handleChangeRef.current
            ? handleChangeRef.current
            : async ({ type, target }) => {
                const name = target ? target.name : '';
                const fields = fieldsRef.current;
                const errors = errorsRef.current;
                const field = fields[name];
                const currentError = get$1(errors, name);
                let error;
                if (!field) {
                    return;
                }
                const isBlurEvent = type === EVENTS$1.BLUR;
                const shouldSkipValidation = skipValidation$1({
                    hasError: !!currentError,
                    isOnChange,
                    isBlurEvent,
                    isOnSubmit,
                    isReValidateOnSubmit,
                    isOnBlur,
                    isReValidateOnBlur,
                    isSubmitted: isSubmittedRef.current,
                });
                const shouldUpdateDirty = setDirty(name);
                let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;
                if (isBlurEvent &&
                    !get$1(touchedFieldsRef.current, name) &&
                    readFormStateRef.current.touched) {
                    set$1(touchedFieldsRef.current, name, true);
                    shouldUpdateState = true;
                }
                if (shouldSkipValidation) {
                    return shouldUpdateState && reRender();
                }
                if (shouldValidateCallback) {
                    const { errors } = await validateWithSchema$1(validationSchema, validateAllFieldCriteria, getFieldValueByName$1(fields), validationResolver, validationContextRef.current);
                    const previousFormIsValid = isValidRef.current;
                    isValidRef.current = isEmptyObject$1(errors);
                    error = (get$1(errors, name)
                        ? { [name]: get$1(errors, name) }
                        : {});
                    if (previousFormIsValid !== isValidRef.current) {
                        shouldUpdateState = true;
                    }
                }
                else {
                    error = await validateField$1(fieldsRef, validateAllFieldCriteria, field);
                }
                if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {
                    reRender();
                }
            };
        const validateSchemaIsValid = useCallback$1((values = {}) => {
            const fieldValues = isEmptyObject$1(defaultValuesRef.current)
                ? getFieldsValues$1(fieldsRef.current)
                : defaultValuesRef.current;
            validateWithSchema$1(validationSchema, validateAllFieldCriteria, transformToNestObject$1(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContextRef.current).then(({ errors }) => {
                const previousFormIsValid = isValidRef.current;
                isValidRef.current = isEmptyObject$1(errors);
                if (previousFormIsValid !== isValidRef.current) {
                    reRender();
                }
            });
        }, 
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [reRender, validateAllFieldCriteria, validationResolver]);
        const removeFieldEventListener = (field, forceDelete) => {
            if (!isUndefined$2(handleChangeRef.current) && field) {
                findRemovedFieldAndRemoveListener$1(fieldsRef.current, handleChangeRef.current, field, forceDelete);
            }
        };
        const removeFieldEventListenerAndRef = useCallback$1((field, forceDelete) => {
            if (!field ||
                (field &&
                    isNameInFieldArray$1(fieldArrayNamesRef.current, field.ref.name) &&
                    !forceDelete)) {
                return;
            }
            removeFieldEventListener(field, forceDelete);
            const { name } = field.ref;
            errorsRef.current = unset$1(errorsRef.current, [name]);
            touchedFieldsRef.current = unset$1(touchedFieldsRef.current, [name]);
            defaultRenderValuesRef.current = unset$1(defaultRenderValuesRef.current, [
                name,
            ]);
            [
                dirtyFieldsRef,
                fieldsWithValidationRef,
                validFieldsRef,
                watchFieldsRef,
            ].forEach(data => data.current.delete(name));
            if (readFormStateRef.current.isValid ||
                readFormStateRef.current.touched) {
                reRender();
                if (shouldValidateCallback) {
                    validateSchemaIsValid();
                }
            }
        }, [reRender, shouldValidateCallback, validateSchemaIsValid]);
        function clearError(name) {
            if (isUndefined$2(name)) {
                errorsRef.current = {};
            }
            else {
                unset$1(errorsRef.current, isArray$2(name) ? name : [name]);
            }
            reRender();
        }
        const setInternalError = ({ name, type, types, message, preventRender, }) => {
            const field = fieldsRef.current[name];
            if (!isSameError$1(errorsRef.current[name], {
                type,
                message,
                types,
            })) {
                set$1(errorsRef.current, name, {
                    type,
                    types,
                    message,
                    ref: field ? field.ref : {},
                    isManual: true,
                });
                if (!preventRender) {
                    reRender();
                }
            }
        };
        function setError(name, type = '', message) {
            if (isString$2(name)) {
                setInternalError(Object.assign({ name }, (isObject$1(type)
                    ? {
                        types: type,
                        type: '',
                    }
                    : {
                        type,
                        message,
                    })));
            }
            else if (isArray$2(name)) {
                name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));
                reRender();
            }
        }
        function watch(fieldNames, defaultValue) {
            const combinedDefaultValues = isUndefined$2(defaultValue)
                ? isUndefined$2(defaultValuesRef.current)
                    ? {}
                    : defaultValuesRef.current
                : defaultValue;
            const fieldValues = getFieldsValues$1(fieldsRef.current, fieldNames);
            const watchFields = watchFieldsRef.current;
            if (isString$2(fieldNames)) {
                return assignWatchFields$1(fieldValues, fieldNames, watchFields, combinedDefaultValues);
            }
            if (isArray$2(fieldNames)) {
                return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields$1(fieldValues, name, watchFields, combinedDefaultValues) })), {});
            }
            isWatchAllRef.current = true;
            const result = (!isEmptyObject$1(fieldValues) && fieldValues) ||
                defaultValue ||
                defaultValuesRef.current;
            return fieldNames && fieldNames.nest
                ? transformToNestObject$1(result)
                : result;
        }
        function unregister(names) {
            if (!isEmptyObject$1(fieldsRef.current)) {
                (isArray$2(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));
            }
        }
        function registerFieldsRef(ref, validateOptions = {}) {
            if (!ref.name) {
                // eslint-disable-next-line no-console
                return console.warn('Missing name @', ref);
            }
            const { name, type, value } = ref;
            const fieldAttributes = Object.assign({ ref }, validateOptions);
            const fields = fieldsRef.current;
            const isRadioOrCheckbox = isRadioInput$1(ref) || isCheckBoxInput$1(ref);
            let currentField = fields[name];
            let isEmptyDefaultValue = true;
            let isFieldArray = false;
            let defaultValue;
            if (isRadioOrCheckbox
                ? currentField &&
                    isArray$2(currentField.options) &&
                    currentField.options
                        .filter(Boolean)
                        .find(({ ref }) => value === ref.value)
                : currentField) {
                fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);
                return;
            }
            if (type) {
                const mutationWatcher = onDomRemove$1(ref, () => removeFieldEventListenerAndRef(fieldAttributes));
                currentField = isRadioOrCheckbox
                    ? Object.assign({ options: [
                            ...((currentField && currentField.options) || []),
                            {
                                ref,
                                mutationWatcher,
                            },
                        ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });
            }
            else {
                currentField = fieldAttributes;
            }
            fields[name] = currentField;
            if (!isEmptyObject$1(defaultValuesRef.current)) {
                defaultValue = getDefaultValue$1(defaultValuesRef.current, name);
                isEmptyDefaultValue = isUndefined$2(defaultValue);
                isFieldArray = isNameInFieldArray$1(fieldArrayNamesRef.current, name);
                if (!isEmptyDefaultValue && !isFieldArray) {
                    setFieldValue(currentField, defaultValue);
                }
            }
            if (shouldValidateCallback &&
                !isFieldArray &&
                readFormStateRef.current.isValid) {
                validateSchemaIsValid();
            }
            else if (!isEmptyObject$1(validateOptions)) {
                fieldsWithValidationRef.current.add(name);
                if (!isOnSubmit && readFormStateRef.current.isValid) {
                    validateField$1(fieldsRef, validateAllFieldCriteria, currentField).then(error => {
                        const previousFormIsValid = isValidRef.current;
                        if (isEmptyObject$1(error)) {
                            validFieldsRef.current.add(name);
                        }
                        else {
                            isValidRef.current = false;
                        }
                        if (previousFormIsValid !== isValidRef.current) {
                            reRender();
                        }
                    });
                }
            }
            if (!defaultRenderValuesRef.current[name] &&
                !(isFieldArray && isEmptyDefaultValue)) {
                defaultRenderValuesRef.current[name] = isEmptyDefaultValue
                    ? getFieldValue$1(fields, currentField.ref)
                    : defaultValue;
            }
            if (!type) {
                return;
            }
            const fieldToAttachListener = isRadioOrCheckbox && currentField.options
                ? currentField.options[currentField.options.length - 1]
                : currentField;
            attachEventListeners$1({
                field: fieldToAttachListener,
                isRadioOrCheckbox,
                handleChange: handleChangeRef.current,
            });
        }
        function register(refOrValidationOptions, validationOptions) {
            if (isWindowUndefined) {
                return;
            }
            if (isString$2(refOrValidationOptions)) {
                registerFieldsRef({ name: refOrValidationOptions }, validationOptions);
                return;
            }
            if (isObject$1(refOrValidationOptions) && 'name' in refOrValidationOptions) {
                registerFieldsRef(refOrValidationOptions, validationOptions);
                return;
            }
            return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);
        }
        const handleSubmit = useCallback$1((callback) => async (e) => {
            if (e) {
                e.preventDefault();
                e.persist();
            }
            let fieldErrors = {};
            let fieldValues = {};
            const fields = fieldsRef.current;
            if (readFormStateRef.current.isSubmitting) {
                isSubmittingRef.current = true;
                reRender();
            }
            try {
                if (shouldValidateCallback) {
                    fieldValues = getFieldsValues$1(fields);
                    const { errors, values } = await validateWithSchema$1(validationSchema, validateAllFieldCriteria, transformToNestObject$1(fieldValues), validationResolver, validationContextRef.current);
                    errorsRef.current = errors;
                    fieldErrors = errors;
                    fieldValues = values;
                }
                else {
                    for (const field of Object.values(fields)) {
                        if (field) {
                            const { ref, ref: { name }, } = field;
                            const fieldError = await validateField$1(fieldsRef, validateAllFieldCriteria, field);
                            if (fieldError[name]) {
                                set$1(fieldErrors, name, fieldError[name]);
                                validFieldsRef.current.delete(name);
                            }
                            else {
                                if (fieldsWithValidationRef.current.has(name)) {
                                    validFieldsRef.current.add(name);
                                }
                                fieldValues[name] = getFieldValue$1(fields, ref);
                            }
                        }
                    }
                }
                if (isEmptyObject$1(fieldErrors)) {
                    errorsRef.current = {};
                    await callback(transformToNestObject$1(fieldValues), e);
                }
                else {
                    if (submitFocusError && isWeb) {
                        focusErrorField$1(fields, fieldErrors);
                    }
                    errorsRef.current = fieldErrors;
                }
            }
            finally {
                isSubmittedRef.current = true;
                isSubmittingRef.current = false;
                submitCountRef.current = submitCountRef.current + 1;
                reRender();
            }
        }, [
            isWeb,
            reRender,
            shouldValidateCallback,
            submitFocusError,
            validateAllFieldCriteria,
            validationResolver,
            validationSchema,
        ]);
        const resetRefs = ({ errors, dirty, isSubmitted, touched, isValid, submitCount, }) => {
            fieldsRef.current = {};
            if (!errors) {
                errorsRef.current = {};
            }
            if (!touched) {
                touchedFieldsRef.current = {};
            }
            if (!isValid) {
                validFieldsRef.current = new Set();
                fieldsWithValidationRef.current = new Set();
                isValidRef.current = true;
            }
            if (!dirty) {
                dirtyFieldsRef.current = new Set();
                isDirtyRef.current = false;
            }
            if (!isSubmitted) {
                isSubmittedRef.current = false;
            }
            if (!submitCount) {
                submitCountRef.current = 0;
            }
            defaultRenderValuesRef.current = {};
            watchFieldsRef.current = new Set();
            isWatchAllRef.current = false;
        };
        const reset = (values, omitResetState = {}) => {
            if (isWeb) {
                for (const value of Object.values(fieldsRef.current)) {
                    if (value && isHTMLElement$1(value.ref) && value.ref.closest) {
                        try {
                            value.ref.closest('form').reset();
                            break;
                        }
                        catch (_a) { }
                    }
                }
            }
            if (values) {
                defaultValuesRef.current = values;
            }
            Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction$1(resetFieldArray) && resetFieldArray());
            resetRefs(omitResetState);
            reRender();
        };
        const getValues = (payload) => {
            const fieldValues = getFieldsValues$1(fieldsRef.current);
            const outputValues = isEmptyObject$1(fieldValues)
                ? defaultValuesRef.current
                : fieldValues;
            return payload && payload.nest
                ? transformToNestObject$1(outputValues)
                : outputValues;
        };
        useEffect$1(() => () => {
            isUnMount.current = true;
            fieldsRef.current &&
                "development" === 'production' &&
                Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));
        }, [removeFieldEventListenerAndRef]);
        if (!shouldValidateCallback) {
            isValidRef.current =
                validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&
                    isEmptyObject$1(errorsRef.current);
        }
        const formState = {
            dirty: isDirtyRef.current,
            dirtyFields: dirtyFieldsRef.current,
            isSubmitted: isSubmittedRef.current,
            submitCount: submitCountRef.current,
            touched: touchedFieldsRef.current,
            isSubmitting: isSubmittingRef.current,
            isValid: isOnSubmit
                ? isSubmittedRef.current && isEmptyObject$1(errorsRef.current)
                : isValidRef.current,
        };
        const control = Object.assign(Object.assign({ register,
            unregister,
            removeFieldEventListener,
            getValues,
            setValue,
            reRender,
            triggerValidation }, (shouldValidateCallback ? { validateSchemaIsValid } : {})), { formState, mode: {
                isOnBlur,
                isOnSubmit,
                isOnChange,
            }, reValidateMode: {
                isReValidateOnBlur,
                isReValidateOnSubmit,
            }, errorsRef,
            touchedFieldsRef,
            fieldsRef,
            resetFieldArrayFunctionRef,
            validFieldsRef,
            dirtyFieldsRef,
            fieldsWithValidationRef,
            watchFieldsRef,
            fieldArrayNamesRef,
            isDirtyRef,
            readFormStateRef,
            defaultValuesRef });
        return {
            watch,
            control,
            handleSubmit,
            setValue: useCallback$1(setValue, [
                reRender,
                setInternalValue,
                triggerValidation,
            ]),
            triggerValidation,
            getValues: useCallback$1(getValues, []),
            reset: useCallback$1(reset, []),
            register: useCallback$1(register, [
                defaultValuesRef.current,
                defaultRenderValuesRef.current,
            ]),
            unregister: useCallback$1(unregister, []),
            clearError: useCallback$1(clearError, []),
            setError: useCallback$1(setError, []),
            errors: errorsRef.current,
            formState: isProxyEnabled
                ? new Proxy(formState, {
                    get: (obj, prop) => {
                        if (prop in obj) {
                            readFormStateRef.current[prop] = true;
                            return obj[prop];
                        }
                        return {};
                    },
                })
                : formState,
        };
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __rest$1(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    const FormGlobalContext$1 = react_4(null);
    function useFormContext$1() {
        return react_13(FormGlobalContext$1);
    }

    var getInputValue$1 = (event, isCheckboxInput) => isPrimitive$1(event) ||
        !isObject$1(event.target) ||
        (isObject$1(event.target) && !event.type)
        ? event
        : isCheckboxInput || isUndefined$2(event.target.value)
            ? event.target.checked
            : event.target.value;

    const Controller$1 = (_a) => {
        var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE$1.onChange, onBlurName = VALIDATION_MODE$1.onBlur, valueName, defaultValue, control } = _a, rest = __rest$1(_a, ["name", "rules", "as", "onBlur", "onChange", "onChangeName", "onBlurName", "valueName", "defaultValue", "control"]);
        const methods = useFormContext$1();
        const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur, isOnChange }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;
        const [value, setInputStateValue] = react_11(isUndefined$2(defaultValue)
            ? get$1(defaultValuesRef.current, name)
            : defaultValue);
        const valueRef = react_17(value);
        const isCheckboxInput = isBoolean$1(value);
        const shouldValidate = () => !skipValidation$1({
            hasError: !!get$1(errorsRef.current, name),
            isOnBlur,
            isOnSubmit,
            isOnChange,
            isReValidateOnBlur,
            isReValidateOnSubmit,
            isSubmitted,
        });
        const commonTask = (event) => {
            const data = getInputValue$1(event, isCheckboxInput);
            setInputStateValue(data);
            valueRef.current = data;
            return data;
        };
        const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());
        const handleChange = (event) => {
            const data = commonTask(event);
            setValue(name, data, shouldValidate());
        };
        const registerField = () => {
            if (isNameInFieldArray$1(fieldArrayNamesRef.current, name) &&
                fieldsRef.current[name]) {
                removeFieldEventListener(fieldsRef.current[name], true);
            }
            register(Object.defineProperty({ name }, VALUE$1, {
                set(data) {
                    setInputStateValue(data);
                    valueRef.current = data;
                },
                get() {
                    return valueRef.current;
                },
            }), Object.assign({}, rules));
        };
        react_12(() => {
            if (!fieldsRef.current[name]) {
                registerField();
                setInputStateValue(isUndefined$2(defaultValue)
                    ? get$1(defaultValuesRef.current, name)
                    : defaultValue);
            }
        });
        react_12(() => {
            registerField();
            return () => {
                if (!isNameInFieldArray$1(fieldArrayNamesRef.current, name)) {
                    unregister(name);
                }
            };
        }, [name]);
        react_12(() => {
            registerField();
        }, [rules]);
        const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;
        const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange
            ? { [onChangeName]: eventWrapper(onChange) }
            : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur
            ? {
                [onBlurName]: (...args) => {
                    if (onBlur) {
                        onBlur(args);
                    }
                    if (shouldReValidateOnBlur) {
                        triggerValidation(name);
                    }
                },
            }
            : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE$1)]: value });
        return react_9(InnerComponent)
            ? react_10(InnerComponent, props)
            : react_8(InnerComponent, props);
    };

    const ErrorMessage$1 = (_a) => {
        var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest$1(_a, ["as", "errors", "name", "message", "children"]);
        const methods = useFormContext$1();
        const error = get$1(errors || methods.errors, name);
        if (!error) {
            return null;
        }
        const { message: messageFromRegister, types } = error;
        const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children
                ? children({ message: messageFromRegister || message, messages: types })
                : messageFromRegister || message });
        return InnerComponent ? (react_9(InnerComponent) ? (react_10(InnerComponent, props)) : (react_8(InnerComponent, props))) : (react_8(react_5, Object.assign({}, props)));
    };

    var global$3 = typeof global$3 !== "undefined"
        ? global$3
        : typeof globalThis !== "undefined"
            ? globalThis
            : {};
    /**
     * Used to evaluate whether or not to render a component
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} options.props - Props to test comparison values against, usually Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops)
     * @returns {Boolean} returns true if all comparisons are true or if using or comparisons, at least one condition is true
     * @example
     const sampleJSONX = {
      component: 'div',
      props: {
        id: 'generatedJSONX',
        className: 'jsonx',
        bigNum: 1430931039,
        smallNum: 0.425,
        falsey: false,
        truthy: true,
      },
      children: 'some div',
    };
    const testJSONX = Object.assign({}, sampleJSONX, {
      comparisonprops: [{
        left: ['truthy',],
        operation:'==',
        right:['falsey',],
      }],
    });
    displayComponent({ jsonx: testJSONX, props: testJSONX2.props, }) // => false
     */
    function displayComponent$2(options) {
        if (options === void 0) { options = {}; }
        var _a = options.jsonx, jsonx = _a === void 0 ? {} : _a, props = options.props;
        var propsToCompare = jsonx.comparisonprops;
        var comparisons = Array.isArray(propsToCompare)
            ? propsToCompare.map(function (comp) {
                var compares = {};
                if (Array.isArray(comp.left)) {
                    compares.left = comp.left;
                }
                if (Array.isArray(comp.right)) {
                    compares.right = comp.right;
                }
                var propcompares = traverse$1(compares, props || jsonx.props);
                var opscompares = Object.assign({}, comp, propcompares);
                // console.debug({ opscompares, compares, renderedCompProps });
                switch (opscompares.operation) {
                    case "eq":
                    case "==":
                        // return opscompares.left == opscompares.right;
                        // eslint-disable-next-line
                        return opscompares.left == opscompares.right;
                    case "dneq":
                    case "!=":
                    case "!":
                        // return opscompares.left != opscompares.right;
                        return opscompares.left !== opscompares.right;
                    case "dnseq":
                    case "!==":
                        return opscompares.left !== opscompares.right;
                    case "seq":
                    case "===":
                        return opscompares.left === opscompares.right;
                    case "lt":
                    case "<":
                        return opscompares.left < opscompares.right;
                    case "lte":
                    case "<=":
                        return opscompares.left <= opscompares.right;
                    case "gt":
                    case ">":
                        return opscompares.left > opscompares.right;
                    case "gte":
                    case ">=":
                        return opscompares.left >= opscompares.right;
                    case "dne":
                    case "undefined":
                    case "null":
                        return opscompares.left === undefined || opscompares.left === null;
                    case "!null":
                    case "!undefined":
                    case "exists":
                    default:
                        //'exists'
                        return opscompares.left !== undefined && opscompares.left !== null;
                }
                // }
                // if (opscompares.operation === 'eq') {
                //   // return opscompares.left == opscompares.right;
                //   // eslint-disable-next-line
                //   return opscompares.left == opscompares.right;
                // } else if (opscompares.operation === 'dneq') {
                //   // return opscompares.left != opscompares.right;
                //   return opscompares.left !== opscompares.right;
                // } else if (opscompares.operation === 'dnseq') {
                //   return opscompares.left !== opscompares.right;
                // } else if (opscompares.operation === 'seq') {
                //   return opscompares.left === opscompares.right;
                // } else if (opscompares.operation === 'lt') {
                //   return opscompares.left < opscompares.right;
                // } else if (opscompares.operation === 'lte') {
                //   return opscompares.left <= opscompares.right;
                // } else if (opscompares.operation === 'gt') {
                //   return opscompares.left > opscompares.right;
                // } else if (opscompares.operation === 'gte') {
                //   return opscompares.left >= opscompares.right;
                // } else if (opscompares.operation === 'dne') {
                //   return opscompares.left === undefined || opscompares.left === null;
                // } else { //'exists'
                //   return opscompares.left !== undefined && opscompares.left !== null;
                // }
            })
            : [];
        var validProps = comparisons.filter(function (comp) { return comp === true; });
        if (!jsonx.comparisonprops) {
            return true;
        }
        else if (jsonx.comparisonorprops && validProps.length < 1) {
            return false;
        }
        else if (validProps.length !== comparisons.length &&
            !jsonx.comparisonorprops) {
            return false;
        }
        else {
            return true;
        }
    }
    /**
     * Use to test if can bind components this context for react-redux-router
     * @returns {Boolean} true if browser is not IE or old android / chrome
     */
    function getAdvancedBinding$1() {
        var window = window;
        if (typeof window === "undefined") {
            if (this && this.window) {
                window = this.window;
            }
            else if (typeof global$3 !== "undefined" && (typeof global$3 !== "undefined" ? global$3 : window).window) {
                window = (typeof global$3 !== "undefined" ? global$3 : window).window;
            }
            else if (typeof globalThis !== "undefined" && globalThis.window) {
                window = globalThis.window;
            }
            if (!window.navigator)
                return false;
        }
        try {
            if (window &&
                window.navigator &&
                window.navigator.userAgent &&
                typeof window.navigator.userAgent === "string") {
                // console.log('window.navigator.userAgent',window.navigator.userAgent)
                if (window.navigator.userAgent.indexOf("Trident") !== -1) {
                    return false;
                }
                var uastring = window.navigator.userAgent;
                //@ts-ignore
                var parser = new uaParser();
                parser.setUA(uastring);
                var parseUserAgent = parser.getResult();
                // console.log({ parseUserAgent, });
                if ((parseUserAgent.browser.name === "Chrome" ||
                    parseUserAgent.browser.name === "Chrome WebView") &&
                    parseUserAgent.os.name === "Android" &&
                    parseInt(parseUserAgent.browser.version, 10) < 50) {
                    return false;
                }
                if (parseUserAgent.browser.name === "Android Browser") {
                    return false;
                }
            }
        }
        catch (e) {
            console.error(e);
            // console.warn('could not detect browser support', e);
            return false;
        }
        return true;
    }
    /**
     * take an object of array paths to traverse and resolve
     * @example
     * const testObj = {
          user: {
            name: 'jsonx',
            description: 'react withouth javascript',
          },
          stats: {
            logins: 102,
            comments: 3,
          },
          authentication: 'OAuth2',
        };
    const testVals = { auth: ['authentication', ], username: ['user', 'name', ], };

     traverse(testVals, testObj) // =>{ auth:'OAuth2', username:'jsonx',  }
     * @param {Object} paths - an object to resolve array property paths
     * @param {Object} data - object to traverse
     * @returns {Object} resolved object with traversed properties
     * @throws {TypeError}
     */
    function traverse$1(paths, data) {
        if (paths === void 0) { paths = {}; }
        if (data === void 0) { data = {}; }
        var keys = Object.keys(paths);
        if (!keys.length)
            return paths;
        return keys.reduce(function (result, key) {
            //@ts-ignore
            if (typeof paths[key] === "string")
                result[key] = data[paths[key]];
            else if (Array.isArray(paths[key])) {
                var _path = Object.assign([], paths[key]);
                var value = data;
                while (_path.length && value && typeof value === "object") {
                    var prop = _path.shift();
                    //@ts-ignore
                    value = value[prop];
                }
                result[key] = _path.length ? undefined : value;
            }
            else
                throw new TypeError("dynamic property paths must be a string or an array of strings or numeric indexes");
            return result;
        }, {});
    }
    /**
     * validates simple JSONX Syntax {[component]:{props,children}}
     * @param {Object} simpleJSONX - Any valid simple JSONX Syntax
     * @return {Boolean} returns true if simpleJSONX is valid
     */
    function validSimpleJSONXSyntax$1(simpleJSONX) {
        if (simpleJSONX === void 0) { simpleJSONX = {}; }
        if (Object.keys(simpleJSONX).length !== 1 && !simpleJSONX.component) {
            return false;
        }
        else {
            var componentName = Object.keys(simpleJSONX)[0];
            return Object.keys(simpleJSONX).length === 1 &&
                !simpleJSONX[componentName].component &&
                typeof simpleJSONX[componentName] === "object"
                ? true
                : false;
        }
    }
    /**
     * Transforms SimpleJSONX to Valid JSONX JSON {[component]:{props,children}} => {component,props,children}
     * @param {Object} simpleJSONX JSON Object
     * @return {Object} - returns a valid JSONX JSON Object from a simple JSONX JSON Object
     */
    function simpleJSONXSyntax$1(simpleJSONX) {
        if (simpleJSONX === void 0) { simpleJSONX = {}; }
        var component = Object.keys(simpleJSONX)[0];
        try {
            return Object.assign({}, {
                component: component
            }, simpleJSONX[component], {
                children: simpleJSONX[component] &&
                    simpleJSONX[component].children &&
                    Array.isArray(simpleJSONX[component].children)
                    ? simpleJSONX[component].children.map(simpleJSONXSyntax$1)
                    : simpleJSONX[component].children
            });
        }
        catch (e) {
            throw SyntaxError("Invalid Simple JSONX Syntax");
        }
    }
    /**
     * Fetches JSON from remote path
     * @param {String} path - fetch path url
     * @param {Object} options - fetch options
     * @return {Object} - returns fetched JSON data
     */
    function fetchJSON$2(path, options) {
        if (path === void 0) { path = ""; }
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, fetch(path, options)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_1 = _a.sent();
                        throw e_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    }

    var cache$3 = new Cache_1();
    // if (typeof window === 'undefined') {
    //   var window = window || (typeof global!=="undefined" ? global : window).window || {};
    // }
    /**
     
     */
    //@ts-ignore
    var advancedBinding$1 = getAdvancedBinding$1();
    // require;
    /**
     * object of all react components available for JSONX
     
     */
    //@ts-ignore
    var componentMap$2 = Object.assign({ Fragment: react_5, Suspense: react_6 }, reactDomFactories, window && typeof window === "object" ? window.__jsonx_custom_elements : {});
    /**
     * getBoundedComponents returns reactComponents with certain elements that have this bounded to select components in the boundedComponents list
     
     * @param {Object} options - options for getBoundedComponents
     * @param {Object} options.reactComponents - all react components available for JSONX
     * @param {string[]} boundedComponents - list of components to bind JSONX this context (usually helpful for navigation and redux-router)
     * @returns {Object} reactComponents object of all react components available for JSONX
     */
    function getBoundedComponents$2(options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var reactComponents = options.reactComponents, _a = options.boundedComponents, boundedComponents = _a === void 0 ? [] : _a;
        if (advancedBinding$1 || options.advancedBinding) {
            return Object.assign({}, reactComponents, boundedComponents.reduce(function (result, componentName) {
                result[componentName] = reactComponents[componentName].bind(_this);
                return result;
            }, {}));
            // reactComponents.ResponsiveLink = ResponsiveLink.bind(this);
        }
        else
            return reactComponents;
    }
    /**
     * returns a react component from a component library
     
     * @param {Object} options - options for getComponentFromLibrary
     * @param {Object} [options.componentLibraries={}] - react component library like bootstrap
     * @param {Object} [options.jsonx={}] - any valid JSONX JSON
     * @returns {function|undefined} react component from react library like bootstrap, material design or bulma
     */
    function getComponentFromLibrary$1(options) {
        if (options === void 0) { options = { jsonx: {} }; }
        var _a = options.componentLibraries, componentLibraries = _a === void 0 ? {} : _a, _b = options.jsonx, jsonx = _b === void 0 ? {} : _b;
        var libComponent = Object.keys(componentLibraries)
            .map(function (libraryName) {
            //@ts-ignore
            var cleanLibraryName = jsonx.component.replace(libraryName + ".", "");
            var libraryNameArray = cleanLibraryName.split(".");
            if (libraryNameArray.length === 2 &&
                componentLibraries[libraryName] &&
                componentLibraries[libraryName][libraryNameArray[0]] &&
                typeof componentLibraries[libraryName][libraryNameArray[0]][libraryNameArray[1]] !== "undefined") {
                return componentLibraries[libraryName][libraryNameArray[0]][libraryNameArray[1]];
            }
            else if (typeof componentLibraries[libraryName][cleanLibraryName] !== "undefined") {
                return componentLibraries[libraryName][cleanLibraryName];
            }
        })
            .filter(function (val) { return val; })[0];
        return libComponent;
    }
    /**
     * returns a react element from jsonx.component
     
     * @example
     * // returns react elements
     * getComponentFromMap({jsonx:{component:'div'}})=>div
     * getComponentFromMap({jsonx:{component:'MyModal'},reactComponents:{MyModal:MyModal extends React.Component}})=>MyModal
     * getComponentFromMap({jsonx:{component:'reactBootstap.nav'},componentLibraries:{reactBootstrap,}})=>reactBootstap.nav
     * @param {Object} options - options for getComponentFromMap
     * @param {object} [options.jsonx={}] - any valid JSONX JSON object
     * @param {Object} [options.reactComponents={}] - react components to render
     * @param {Object} [options.componentLibraries={}] - react components to render from another component library like bootstrap or bulma
     * @param {function} [options.logError=console.error] - error logging function
     * @param {boolean} [options.debug=false] - use debug messages
     * @returns {string|function|class} valid react element
     */
    function getComponentFromMap$2(options) {
        if (options === void 0) { options = {}; }
        //ReactElementLike | ReactComponentLike | ReactElement | ReactComponentLike
        // eslint-disable-next-line
        var _a = options.jsonx, jsonx = _a === void 0 ? {} : _a, _b = options.reactComponents, reactComponents = _b === void 0 ? {} : _b, _c = options.componentLibraries, componentLibraries = _c === void 0 ? {} : _c, _d = options.logError, logError = _d === void 0 ? console.error : _d, debug = options.debug;
        try {
            if (typeof jsonx.component !== "string" &&
                typeof jsonx.component === "function") {
                return jsonx.component;
                //@ts-ignore
            }
            else if (jsonx.component && reactDomFactories[jsonx.component]) {
                return jsonx.component;
                //@ts-ignore
            }
            else if (reactComponents[jsonx.component]) {
                //@ts-ignore
                return reactComponents[jsonx.component];
            }
            else if (typeof jsonx.component === "string" &&
                jsonx.component.indexOf(".") > 0 &&
                getComponentFromLibrary$1({ jsonx: jsonx, componentLibraries: componentLibraries })) {
                return getComponentFromLibrary$1({ jsonx: jsonx, componentLibraries: componentLibraries });
            }
            else {
                throw new ReferenceError("Invalid React Component (" + jsonx.component + ")");
            }
        }
        catch (e) {
            if (debug)
                logError(e, e.stack ? e.stack : "no stack");
            throw e;
        }
    }
    /**
     * Returns a new function from an options object
     
     * @param {Object} options
     * @param {String} [options.body=''] - Function string body
     * @param {String[]} [options.args=[]] - Function arguments
     * @returns {Function}
     */
    function getFunctionFromEval$1(options) {
        if (options === void 0) { options = {}; }
        if (typeof options === "function")
            return options;
        var _a = options.body, body = _a === void 0 ? "" : _a, _b = options.args, args = _b === void 0 ? [] : _b, name = options.name;
        var argus = [].concat(args);
        argus.push(body);
        var evalFunction = Function.prototype.constructor.apply({ name: name }, argus);
        if (name) {
            Object.defineProperty(evalFunction, "name", { value: name });
        }
        return evalFunction;
    }
    /**
     * Returns a new React Component
     
     * @param {Boolean} [options.returnFactory=true] - returns a React component if true otherwise returns Component Class
     * @param {Object} [options.resources={}] - asyncprops for component
     * @param {String} [options.name ] - Component name
     * @param {Function} [options.lazy ] - function that resolves {reactComponent,options} to lazy load component for code splitting
     * @param {Boolean} [options.use_getState=true] - define getState prop
     * @param {Boolean} [options.bindContext=true] - bind class this reference to render function components
     * @param {Boolean} [options.passprops ] - pass props to rendered component
     * @param {Boolean} [options.passstate] - pass state as props to rendered component
     * @param {Object} [reactComponent={}] - an object of functions used for create-react-class
     * @param {Object} reactComponent.render.body - Valid JSONX JSON
     * @param {String} reactComponent.getDefaultProps.body - return an object for the default props
     * @param {String} reactComponent.getInitialState.body - return an object for the default state
     * @returns {Function}
     * @see {@link https://reactjs.org/docs/react-without-es6.html}
     */
    function getReactClassComponent$1(reactComponent, options) {
        if (reactComponent === void 0) { reactComponent = {}; }
        if (options === void 0) { options = {}; }
        // const util = require('util');
        // console.log(util.inspect({ reactComponent },{depth:20}));
        if (options.lazy) {
            //@ts-ignore
            return react_7(function () {
                return options
                    .lazy(reactComponent, Object.assign({}, options, { lazy: false }))
                    .then(function (lazyComponent) {
                    return {
                        //@ts-ignore
                        default: getReactClassComponent$1.apply(void 0, lazyComponent)
                    };
                });
            });
        }
        var context = this || {};
        var _a = options.returnFactory, returnFactory = _a === void 0 ? true : _a, _b = options.resources, resources = _b === void 0 ? {} : _b, _c = options.use_getState, use_getState = _c === void 0 ? true : _c, _d = options.bindContext, bindContext = _d === void 0 ? true : _d, _e = options.disableRenderIndexKey, disableRenderIndexKey = _e === void 0 ? true : _e;
        var rjc = __assign({ 
            //mounting
            getDefaultProps: {
                body: "return {};"
            }, 
            // (unsupported) getDerivedStateFromProps: undefined, // {body:'return null;', args:['props','state',]}
            getInitialState: {
                body: "return {};"
            }, componentDidMount: undefined, UNSAFE_componentWillMount: undefined, 
            //updating
            // (unsupported) getDerivedStateFromProps 
            shouldComponentUpdate: undefined, getSnapshotBeforeUpdate: undefined, componentDidUpdate: undefined, UNSAFE_componentWillUpdate: undefined, UNSAFE_componentWillReceiveProps: undefined, 
            //unmounting
            componentWillUnmount: undefined }, reactComponent);
        var rjcKeys = Object.keys(rjc);
        if (rjcKeys.includes("render") === false) {
            throw new ReferenceError("React components require a render method");
        }
        var classOptions = rjcKeys.reduce(function (result, val) {
            if (!rjc[val])
                return result;
            if (typeof rjc[val] === "function")
                rjc[val] = { body: rjc[val] };
            var args = rjc[val].arguments;
            var body = rjc[val].body;
            if (!body) {
                console.warn({ rjc: rjc });
                throw new SyntaxError("Function(" + val + ") requires a function body");
            }
            if (args &&
                !Array.isArray(args) &&
                args.length &&
                args.length &&
                args.filter(function (arg) { return typeof arg === "string"; }).length) {
                throw new TypeError("Function(" + val + ") arguments must be an array or variable names");
            }
            if (val === "render") {
                result[val] = function () {
                    var _this = this;
                    //@ts-ignore
                    if (options.passprops && this && this.props)
                        body.props = Object.assign({}, body.props, this.props);
                    //@ts-ignore
                    if (options.passstate && this.state)
                        body.props = Object.assign({}, body.props, this.state);
                    return getReactElementFromJSONX$1.call(Object.assign({}, context, bindContext ? this : { props: {} }, { disableRenderIndexKey: disableRenderIndexKey }, {
                        props: use_getState && this && this.props
                            ? //@ts-ignore
                                Object.assign({}, this.props, {
                                    getState: function () { return _this.state; }
                                })
                            : //@ts-ignore
                                this.props
                    }), body, resources);
                };
            }
            else {
                //@ts-ignore
                result[val] =
                    typeof body === "function"
                        ? body
                        : getFunctionFromEval$1({
                            body: body,
                            args: args
                        });
            }
            return result;
        }, {});
        var reactComponentClass = createReactClass(classOptions);
        if (options.name) {
            Object.defineProperty(reactComponentClass, "name", {
                value: options.name
            });
        }
        var reactClass = returnFactory
            ? react.createFactory(reactComponentClass)
            : reactComponentClass;
        return reactClass;
    }
    /**
     * A helper component that allows you to create forms with [react-hook-form](https://react-hook-form.com/) without needed to add external form libraries
     * @param this
     * @param props
     */
    function FormComponent$2(props) {
        if (props === void 0) { props = {}; }
        var _a = props.hookFormOptions, hookFormOptions = _a === void 0 ? {} : _a, _b = props.formComponent, formComponent = _b === void 0 ? { component: "div", children: "empty form" } : _b, onSubmit = props.onSubmit, formWrapperComponent = props.formWrapperComponent, formKey = props.formKey, formWrapperProps = props.formWrapperProps;
        // const { register, unregister, errors, watch, handleSubmit, reset, setError, clearError, setValue, getValues, triggerValidation, control, formState, } = useForm(hookFormOptions);
        var reactHookForm = useForm$1(hookFormOptions);
        var context = __assign(__assign({}, this || {}), { reactHookForm: reactHookForm, });
        if (!context.componentLibraries || !context.componentLibraries.ReactHookForm) {
            context.componentLibraries = __assign(__assign({}, context.componentLibraries), {
                ReactHookForm: {
                    Controller: Controller$1, ErrorMessage: ErrorMessage$1,
                }
            });
        }
        var formWrapperJXM = formWrapperComponent || {
            component: 'form',
            props: __assign({ onSubmit: onSubmit ? reactHookForm.handleSubmit(onSubmit) : undefined, key: formKey ? "formWrapperJXM-" + formKey : undefined }, formWrapperProps)
        };
        formWrapperJXM.children = Array.isArray(formComponent) ? formComponent : [formComponent];
        var renderJSONX = react_16(function () { return getReactElementFromJSONX$1.bind(context); }, [
            context
        ]);
        return renderJSONX(formWrapperJXM);
    }
    /**
     * A helper component that allows you to create components that load data and render asynchronously.
     * @param this
     * @param props
     */
    function DynamicComponent$2(props) {
        if (props === void 0) { props = {}; }
        //@ts-ignore
        var _a = props.useCache, useCache = _a === void 0 ? true : _a, _b = props.cacheTimeout, cacheTimeout = _b === void 0 ? 60 * 60 * 5 : _b, _c = props.loadingJSONX, loadingJSONX = _c === void 0 ? { component: "div", children: "...Loading" } : _c, 
        //@ts-ignore
        _d = props.loadingErrorJSONX, 
        //@ts-ignore
        loadingErrorJSONX = _d === void 0 ? {
            component: "div",
            children: [
                { component: "span", children: "Error: " },
                {
                    component: "span",
                    resourceprops: { _children: ["error", "message"] }
                }
            ]
        } : _d, _e = props.cacheTimeoutFunction, cacheTimeoutFunction = _e === void 0 ? function () { } : _e, jsonx = props.jsonx, _f = props.transformFunction, transformFunction = _f === void 0 ? function (data) { return data; } : _f, fetchURL = props.fetchURL, fetchOptions = props.fetchOptions, fetchFunction = props.fetchFunction;
        var context = this || {};
        var _g = react_11({
            hasLoaded: false,
            hasError: false,
            resources: {},
            error: undefined
        }), state = _g[0], setState = _g[1];
        var transformer = react_16(function () { return getFunctionFromEval$1(transformFunction); }, [
            transformFunction
        ]);
        var timeoutFunction = react_16(function () { return getFunctionFromEval$1(cacheTimeoutFunction); }, [cacheTimeoutFunction]);
        var renderJSONX = react_16(function () { return getReactElementFromJSONX$1.bind(context); }, [
            context
        ]);
        var loadingComponent = react_16(function () { return renderJSONX(loadingJSONX); }, [
            loadingJSONX
        ]);
        var loadingError = react_16(function () { return renderJSONX(loadingErrorJSONX, { error: state.error }); }, [loadingErrorJSONX, state.error]);
        react_12(function () {
            function getData() {
                return __awaiter(this, void 0, void 0, function () {
                    var transformedData_1, fetchedData, e_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 8, , 9]);
                                if (!(useCache && cache$3.get(fetchURL))) return [3 /*break*/, 1];
                                transformedData_1 = cache$3.get(fetchURL);
                                return [3 /*break*/, 7];
                            case 1:
                                fetchedData = void 0;
                                if (!fetchFunction) return [3 /*break*/, 3];
                                return [4 /*yield*/, fetchFunction(fetchURL, fetchOptions)];
                            case 2:
                                fetchedData = _a.sent();
                                return [3 /*break*/, 5];
                            case 3: return [4 /*yield*/, fetchJSON$2(fetchURL, fetchOptions)];
                            case 4:
                                fetchedData = _a.sent();
                                _a.label = 5;
                            case 5: return [4 /*yield*/, transformer(fetchedData)];
                            case 6:
                                transformedData_1 = _a.sent();
                                if (useCache)
                                    cache$3.put(fetchURL, transformedData_1, cacheTimeout, timeoutFunction);
                                _a.label = 7;
                            case 7:
                                //@ts-ignore
                                setState(function (prevState) {
                                    return Object.assign({}, prevState, {
                                        hasLoaded: true,
                                        hasError: false,
                                        resources: { DynamicComponentData: transformedData_1 }
                                    });
                                });
                                return [3 /*break*/, 9];
                            case 8:
                                e_1 = _a.sent();
                                if (context.debug)
                                    console.warn(e_1);
                                //@ts-ignore
                                setState({ hasError: true, error: e_1 });
                                return [3 /*break*/, 9];
                            case 9: return [2 /*return*/];
                        }
                    });
                });
            }
            if (fetchURL)
                getData();
        }, [fetchURL, fetchOptions]);
        if (!fetchURL)
            return null;
        else if (state.hasError) {
            return loadingError;
        }
        else if (state.hasLoaded === false) {
            return loadingComponent;
        }
        else
            return renderJSONX(jsonx, state.resources);
    }
    /**
     * Returns new React Function Component
     
     * @todo set 'functionprops' to set arguments for function
     * @param {*} reactComponent - Valid JSONX to render
     * @param {String} functionBody - String of function component body
     * @param {String} options.name - Function Component name
     * @returns {Function}
     * @see {@link https://reactjs.org/docs/hooks-intro.html}
     * @example
      const jsonxRender = {
       component:'div',
       passprops:'true',
       children:[
         {
          component:'input',
          thisprops:{
              value:['count'],
            },
         },
          {
            component:'button',
           __dangerouslyBindEvalProps:{
            onClick:function(count,setCount){
              setCount(count+1);
              console.log('this is inline',{count,setCount});
            },
            // onClick:`(function(count,setCount){
            //   setCount(count+1)
            //   console.log('this is inline',{count,setCount});
            // })`,
            children:'Click me'
          }
       ]
      };
      const functionBody = 'const [count, setCount] = useState(0); const functionprops = {count,setCount};'
      const options = { name: IntroHook}
      const MyCustomFunctionComponent = jsonx._jsonxComponents.getReactFunctionComponent({jsonxRender, functionBody, options});
       */
    function getReactFunctionComponent$1(reactComponent, functionBody, options) {
        if (reactComponent === void 0) { reactComponent = {}; }
        if (functionBody === void 0) { functionBody = ""; }
        if (options === void 0) { options = {}; }
        if (options.lazy) {
            //@ts-ignore
            return react_7(function () {
                return options
                    .lazy(reactComponent, functionBody, Object.assign({}, options, { lazy: false }))
                    .then(function (lazyComponent) {
                    return {
                        //@ts-ignore
                        default: getReactFunctionComponent$1.apply(void 0, lazyComponent)
                    };
                });
            });
        }
        if (typeof options === "undefined" || typeof options.bind === "undefined")
            options.bind = true;
        var _a = options.resources, resources = _a === void 0 ? {} : _a, _b = options.args;
        //@ts-ignore
        var props = Object.assign({}, reactComponent.props);
        var functionArgs = [
            react,
            react_11,
            react_12,
            react_13,
            react_14,
            react_15,
            react_16,
            react_17,
            react_18,
            react_19,
            react_20,
            getReactElementFromJSONX$1,
            reactComponent,
            resources,
            props
        ];
        //@ts-ignore
        if (typeof functionBody === "function")
            functionBody = functionBody.toString();
        var functionComponent = Function("React", "useState", "useEffect", "useContext", "useReducer", "useCallback", "useMemo", "useRef", "useImperativeHandle", "useLayoutEffect", "useDebugValue", "getReactElementFromJSONX", "reactComponent", "resources", "props", "\n    'use strict';\n    const self = this || {};\n\n    return function " + (options.name || "Anonymous") + "(props){\n      " + functionBody + "\n      if(typeof exposeprops==='undefined' || exposeprops){\n        reactComponent.props = Object.assign({},props,typeof exposeprops==='undefined'?{}:exposeprops);\n        if(typeof exposeprops!=='undefined') reactComponent.__functionargs = Object.keys(exposeprops);\n      } else{\n        reactComponent.props =  props;\n      }\n      if(!props.children) {\n      //  delete props.children;\n      }\n      const context = " + (options.bind ? "Object.assign(self,this||{})" : "this") + ";\n      return getReactElementFromJSONX.call(context, reactComponent);\n    }\n  ");
        if (options.name) {
            Object.defineProperty(functionComponent, "name", {
                value: options.name
            });
        }
        return options.bind
            ? functionComponent.call.apply(functionComponent, __spreadArrays([this], functionArgs)) : functionComponent.apply(void 0, functionArgs);
    }

    //https://stackoverflow.com/questions/1007981/how-to-get-function-parameter-names-values-dynamically
    var STRIP_COMMENTS$1 = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
    var ARGUMENT_NAMES$1 = /([^\s,]+)/g;
    /**
     * returns the names of parameters from a function declaration
     * @example
     * const arrowFunctionAdd = (a,b)=>a+b;
     * function regularFunctionAdd(c,d){return c+d;}
     * getParamNames(arrowFunctionAdd) // => ['a','b']
     * getParamNames(regularFunctionAdd) // => ['c','d']
     * @param {Function} func
     * @todo write tests
     */
    function getParamNames$1(func) {
        var fnStr = func.toString().replace(STRIP_COMMENTS$1, "");
        var result = fnStr
            .slice(fnStr.indexOf("(") + 1, fnStr.indexOf(")"))
            .match(ARGUMENT_NAMES$1);
        if (result === null) {
            result = [];
        }
        return result;
    }
    /**
     * It uses traverse on a traverseObject to returns a resolved object on propName. So if you're making an ajax call and want to pass properties into a component, you can assign them using asyncprops and reference object properties by an array of property paths
     * @param {Object} [traverseObject={}] - the object that contains values of propName
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} [options.propName='asyncprops'] - Property on JSONX to resolve values onto, i.e (asyncprops,thisprops,windowprops)
     * @returns {Object} resolved object
     * @example
     const traverseObject = {
      user: {
        name: 'jsonx',
        description: 'react withouth javascript',
      },
      stats: {
        logins: 102,
        comments: 3,
      },
      authentication: 'OAuth2',
    };
    const testJSONX = {
      component: 'div',
      props: {
        id: 'generatedJSONX',
        className:'jsonx',
      },
      asyncprops:{
        auth: [ 'authentication', ],
        username: [ 'user', 'name', ],
      },
      children: [
        {
          component: 'p',
          props: {
            style: {
              color: 'red',
              fontWeight:'bold',
            },
          },
          children:'hello world',
        },
      ],
    };
    const JSONXP = getJSONXProps({ jsonx: testJSONX, traverseObject, });
    // => {
    //   auth: 'OAuth2',
    //   username: 'jsonx'
    // }

    //finally resolves:
    const testJSONX = {
      component: 'div',
      props: {
        id: 'generatedJSONX',
        className:'jsonx',
        auth: 'OAuth2',
        username: 'jsonx',
      },
      children: [
        {
          component: 'p',
          props: {
            style: {
              color: 'red',
              fontWeight:'bold',
            },
          },
          children:'hello world',
        },
      ],
    };
     */
    function getJSONXProps$1(options) {
        if (options === void 0) { options = {}; }
        // eslint-disable-next-line
        var _a = options.jsonx, jsonx = _a === void 0 ? {} : _a, _b = options.propName, propName = _b === void 0 ? "asyncprops" : _b, _c = options.traverseObject, traverseObject = _c === void 0 ? {} : _c;
        // return (jsonx.asyncprops && typeof jsonx.asyncprops === 'object')
        // ? utilities.traverse(jsonx.asyncprops, resources)
        // : {};
        return jsonx[propName] && typeof jsonx[propName] === "object"
            ? traverse$1(jsonx[propName], traverseObject)
            : {};
    }
    /**
     * returns children jsonx components defined on __spreadComponent spread over an array on props.__spread
     * @param {*} options
     */
    function getChildrenComponents$1(options) {
        if (options === void 0) { options = {}; }
        var _a = options.allProps, allProps = _a === void 0 ? {} : _a, _b = options.jsonx, jsonx = _b === void 0 ? {} : _b;
        // const asyncprops = getJSONXProps({ jsonx, propName: 'spreadprops', traverseObject: allProps, });
        if (Array.isArray(allProps.__spread) === false) {
            if ((this && this.debug) || jsonx.debug) {
                return {
                    children: new Error("Using __spreadComponent requires an array prop '__spread'").toString()
                };
            }
            else {
                return { children: undefined };
            }
        }
        else {
            return {
                _children: allProps.__spread.map(function (__item) {
                    var clonedChild = Object.assign({}, jsonx.__spreadComponent);
                    var clonedChildProps = Object.assign({}, clonedChild.props);
                    clonedChildProps.__item = __item;
                    clonedChild.props = clonedChildProps;
                    return clonedChild;
                })
            };
        }
    }
    function boundArgsReducer$1(jsonx) {
        var _this = this;
        if (jsonx === void 0) { jsonx = {}; }
        return function (args, arg) {
            var val;
            if (_this && _this.state && typeof _this.state[arg] !== "undefined")
                val = _this.state[arg];
            else if (_this && _this.props && typeof _this.props[arg] !== "undefined")
                val = _this.props[arg];
            else if (jsonx.props && typeof jsonx.props[arg] !== "undefined")
                val = jsonx.props[arg];
            if (typeof val !== "undefined")
                args.push(val);
            return args.filter(function (a) { return typeof a !== "undefined"; });
        };
    }
    /**
     * Used to evalute javascript and set those variables as props. getEvalProps evaluates __dangerouslyEvalProps and __dangerouslyBindEvalProps properties with eval, this is used when component properties are functions, __dangerouslyBindEvalProps is used when those functions require that this is bound to the function. For __dangerouslyBindEvalProps it must resolve an expression, so functions should be wrapped in (). I.e. (function f(x){ return this.minimum+x;})
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @returns {Object} returns resolved object with evaluated javascript
     * @example
     const testVals = {
        auth: 'true',
        username: '(user={})=>user.name',
      };
      const testJSONX = Object.assign({}, sampleJSONX, {
        __dangerouslyEvalProps: testVals, __dangerouslyBindEvalProps: {
          email: '(function getUser(user={}){ return this.testBound(); })',
        },
      });
      const JSONXP = getEvalProps.call({ testBound: () => 'bounded', }, { jsonx: testJSONX, });
      const evalutedComputedFunc = JSONXP.username({ name: 'bob', });
      const evalutedComputedBoundFunc = JSONXP.email({ email:'test@email.domain', });
      // expect(JSONXP.auth).to.be.true;
      // expect(evalutedComputedFunc).to.eql('bob');
      // expect(evalutedComputedBoundFunc).to.eql('bounded');
     */
    function getEvalProps$1(options) {
        var _this = this;
        if (options === void 0) { options = { jsonx: {} }; }
        var jsonx = options.jsonx;
        var scopedEval = eval; //https://github.com/rollup/rollup/wiki/Troubleshooting#avoiding-eval
        var evAllProps = {};
        if (jsonx.__dangerouslyEvalAllProps) {
            var evVal = void 0;
            try {
                // eslint-disable-next-line
                evVal =
                    typeof evVal === "function"
                        ? jsonx.__dangerouslyEvalAllProps
                        : scopedEval(jsonx.__dangerouslyEvalAllProps);
            }
            catch (e) {
                if (this.debug || jsonx.debug)
                    evVal = e;
            }
            evAllProps = evVal.call(this, { jsonx: jsonx });
        }
        var evProps = Object.keys(jsonx.__dangerouslyEvalProps || {}).reduce(function (eprops, epropName) {
            var evVal;
            var evValString;
            try {
                // eslint-disable-next-line
                //@ts-ignore
                evVal = scopedEval(jsonx.__dangerouslyEvalProps[epropName]);
                evValString = evVal.toString();
            }
            catch (e) {
                if (_this.debug || jsonx.debug)
                    evVal = e;
            }
            //@ts-ignore
            eprops[epropName] =
                typeof evVal === "function" ? evVal.call(_this, { jsonx: jsonx }) : evVal;
            //@ts-ignore
            if (_this.exposeEval)
                eprops["__eval_" + epropName] = evValString;
            return eprops;
        }, {});
        var evBindProps = Object.keys(jsonx.__dangerouslyBindEvalProps || {}).reduce(function (eprops, epropName) {
            var evVal;
            var evValString;
            try {
                var args = void 0;
                //@ts-ignore
                var functionBody = jsonx.__dangerouslyBindEvalProps[epropName];
                // InlineFunction = Function.prototype.constructor.apply({}, args);
                var functionDefinition = void 0;
                if (typeof functionBody === "function") {
                    functionDefinition = functionBody;
                }
                else if (jsonx.__dangerouslyBindEvalProps) {
                    functionDefinition = scopedEval(jsonx.__dangerouslyBindEvalProps[epropName]);
                    evValString = functionDefinition.toString();
                } // eslint-disable-next-line
                if (jsonx.__functionargs && jsonx.__functionargs[epropName]) {
                    args = [_this].concat(jsonx.__functionargs[epropName].reduce(boundArgsReducer$1.call(_this, jsonx), []));
                }
                else if (jsonx.__functionparams === false) {
                    args = [_this];
                }
                else {
                    var functionDefArgs = getParamNames$1(functionDefinition);
                    args = [_this].concat(functionDefArgs.reduce(boundArgsReducer$1.call(_this, jsonx), []));
                }
                // eslint-disable-next-line
                evVal = functionDefinition.bind.apply(functionDefinition, args);
            }
            catch (e) {
                if (_this.debug || jsonx.debug)
                    evVal = e;
            }
            // eslint-disable-next-line
            //@ts-ignore
            eprops[epropName] = evVal;
            //@ts-ignore
            if (_this.exposeEval)
                eprops["__eval_" + epropName] = evValString;
            return eprops;
        }, {});
        return Object.assign({}, evProps, evBindProps, evAllProps);
    }
    /**
     * Resolves jsonx.__dangerouslyInsertComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} [options.resources={}] - object to use for resourceprops(asyncprops), usually a result of an asynchronous call
     * @returns {Object} resolved object of React Components
     */
    function getComponentProps$1(options) {
        var _this = this;
        if (options === void 0) { options = { jsonx: {} }; }
        var jsonx = options.jsonx, resources = options.resources;
        //@ts-ignore
        return Object.keys(jsonx.__dangerouslyInsertComponents).reduce(function (cprops, cpropName) {
            var componentVal;
            try {
                // eslint-disable-next-line
                if (jsonx.__dangerouslyInsertComponents) {
                    componentVal = getRenderedJSON$1.call(_this, jsonx.__dangerouslyInsertComponents[cpropName], resources);
                }
            }
            catch (e) {
                if (_this.debug || jsonx.debug)
                    componentVal = e;
            }
            cprops[cpropName] = componentVal;
            return cprops;
        }, {});
    }
    /**
     * Used to create components from jsonx as props
     * @param this
     * @param options
     */
    function getReactComponents$1(options) {
        var _this = this;
        var jsonx = options.jsonx, resources = options.resources;
        var functionComponents = !jsonx.__dangerouslyInsertFunctionComponents
            ? {}
            : Object.keys(jsonx.__dangerouslyInsertFunctionComponents).reduce(function (cprops, cpropName) {
                var componentVal;
                try {
                    var args = jsonx.__dangerouslyInsertFunctionComponents && jsonx.__dangerouslyInsertFunctionComponents[cpropName];
                    if (args) {
                        args.options = Object.assign({}, args.options, { resources: resources });
                        // eslint-disable-next-line
                        componentVal = getReactFunctionComponent$1.call(_this, args.reactComponent, args.functionBody, args.options);
                    }
                }
                catch (e) {
                    if (_this.debug || jsonx.debug)
                        componentVal = e;
                }
                cprops[cpropName] =
                    cpropName === "_children" ? [componentVal] : componentVal;
                return cprops;
            }, {});
        var classComponents = !jsonx.__dangerouslyInsertClassComponents
            ? {}
            : Object.keys(jsonx.__dangerouslyInsertClassComponents).reduce(function (cprops, cpropName) {
                var componentVal;
                try {
                    var args = jsonx.__dangerouslyInsertClassComponents && jsonx.__dangerouslyInsertClassComponents[cpropName];
                    if (args) {
                        args.options = Object.assign({}, args.options, { resources: resources });
                        // eslint-disable-next-line
                        componentVal = getReactClassComponent$1.call(_this, args.reactComponent, args.options);
                    }
                }
                catch (e) {
                    if (_this.debug || jsonx.debug)
                        componentVal = e;
                }
                cprops[cpropName] =
                    cpropName === "_children" ? [componentVal] : componentVal;
                return cprops;
            }, {});
        return Object.assign({}, functionComponents, classComponents);
    }
    /**
     * Resolves jsonx.__dangerouslyInsertReactComponents into an object that turns each value into a React components. This is typically used in a library like Recharts where you pass custom components for chart ticks or plot points.
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
    //  * @param {Object} [options.resources={}] - object to use for asyncprops, usually a result of an asynchronous call
     * @returns {Object} resolved object of React Components
     */
    function getReactComponentProps$1(options) {
        var _this = this;
        if (options === void 0) { options = { jsonx: {} }; }
        var jsonx = options.jsonx;
        var customComponents = this && this.reactComponents ? this.reactComponents : {};
        var customLibraries = this && this.componentLibraries ? this.componentLibraries : {};
        if (jsonx.__dangerouslyInsertJSONXComponents &&
            Object.keys(jsonx.__dangerouslyInsertJSONXComponents).length) {
            return Object.keys(jsonx.__dangerouslyInsertJSONXComponents).reduce(function (cprops, cpropName) {
                var componentVal;
                try {
                    componentVal = getComponentFromMap$2({
                        jsonx: jsonx.__dangerouslyInsertJSONXComponents && jsonx.__dangerouslyInsertJSONXComponents[cpropName],
                        reactComponents: customComponents,
                        componentLibraries: customLibraries
                    });
                }
                catch (e) {
                    if (_this.debug || jsonx.debug)
                        componentVal = e;
                }
                // eslint-disable-next-line
                cprops[cpropName] = componentVal;
                return cprops;
            }, {});
        }
        else if (jsonx.__dangerouslyInsertReactComponents && Object.keys(jsonx.__dangerouslyInsertReactComponents).length) {
            return Object.keys(jsonx.__dangerouslyInsertReactComponents).reduce(function (cprops, cpropName) {
                var componentVal;
                try {
                    componentVal = getComponentFromMap$2({
                        jsonx: {
                            component: jsonx.__dangerouslyInsertReactComponents && jsonx.__dangerouslyInsertReactComponents[cpropName],
                            props: jsonx.__dangerouslyInsertComponentProps
                                ? jsonx.__dangerouslyInsertComponentProps[cpropName]
                                : {}
                        },
                        reactComponents: customComponents,
                        componentLibraries: customLibraries
                    });
                }
                catch (e) {
                    if (_this.debug || jsonx.debug)
                        componentVal = e;
                }
                // eslint-disable-next-line
                cprops[cpropName] = componentVal;
                return cprops;
            }, {});
        }
    }
    /**
     * Takes a function string and returns a function on either this.props or window. The function can only be 2 levels deep
     * @param {Object} options
     * @param {String} [options.propFunc='func:'] - function string, like func:window.LocalStorage.getItem or func:this.props.onClick  or func:inline.myInlineFunction
     * @param {Object} [options.allProps={}] - merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, resourceprops, asyncprops, windowprops, evalProps, insertedComponents);
     * @returns {Function} returns a function from this.props or window functions
     * @example
     * getFunctionFromProps({ propFunc='func:this.props.onClick', }) // => this.props.onClick
     */
    function getFunctionFromProps$1(options) {
        if (options === void 0) { options = { jsonx: {}, propBody: "" }; }
        var _a = options.propFunc, propFunc = _a === void 0 ? "func:" : _a, propBody = options.propBody, jsonx = options.jsonx, _b = options.functionProperty, functionProperty = _b === void 0 ? "" : _b;
        // eslint-disable-next-line
        var _c = this, _d = _c.logError, logError = _d === void 0 ? console.error : _d, debug = _c.debug;
        var windowObject = {};
        if (this.window)
            windowObject = this.window;
        //@ts-ignore
        else if (typeof global !== "undefined" && (typeof global !== "undefined" ? global : window).window)
            windowObject = (typeof global !== "undefined" ? global : window).window;
        try {
            var functionNameString = propFunc.split(":")[1] || "";
            var functionNameArray = functionNameString.split(".");
            var functionName = functionNameArray.length
                ? functionNameArray[functionNameArray.length - 1]
                : "";
            if (propFunc.includes("func:inline")) {
                // eslint-disable-next-line
                var InlineFunction = void 0;
                if (jsonx.__functionargs) {
                    var args = [].concat(jsonx.__functionargs[functionProperty]);
                    args.push(propBody);
                    InlineFunction = Function.prototype.constructor.apply({}, args);
                }
                else {
                    InlineFunction = Function("param1", "param2", '"use strict";' + propBody);
                }
                var _e = propFunc.split("."), propFuncName = _e[0], funcName = _e[1];
                Object.defineProperty(InlineFunction, "name", {
                    value: funcName
                });
                if (jsonx.__functionargs) {
                    var boundArgs = [this].concat(jsonx.__functionargs[functionProperty].map(function (arg) { return jsonx.props[arg]; }));
                    return InlineFunction.bind.apply(InlineFunction, boundArgs);
                }
                else {
                    return InlineFunction.bind(this);
                }
            }
            else if (propFunc.indexOf("func:window") !== -1) {
                if (functionNameArray.length === 3) {
                    try {
                        return windowObject[functionNameArray[1]][functionName].bind(this);
                    }
                    catch (e) {
                        if (debug) {
                            logError(e);
                        }
                        return windowObject[functionNameArray[1]][functionName];
                    }
                }
                else {
                    try {
                        return windowObject[functionName].bind(this);
                    }
                    catch (e) {
                        if (debug) {
                            logError(e);
                        }
                        return windowObject[functionName];
                    }
                }
            }
            else if (functionNameArray.length === 4) {
                return this.props
                    ? this.props[functionNameArray[2]][functionName]
                    : jsonx.props[functionNameArray[2]][functionName];
            }
            else if (functionNameArray.length === 3) {
                return this.props
                    ? this.props[functionName].bind(this)
                    : jsonx.props[functionName].bind(this);
            }
            else {
                return function () { };
            }
        }
        catch (e) {
            if (this.debug) {
                logError(e);
                if (jsonx && jsonx.debug)
                    return e;
            }
            return function () { };
        }
    }
    /**
     * Returns a resolved object from function strings that has functions pulled from jsonx.__functionProps
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} [options.allProps={}] - merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, asyncprops, windowprops, evalProps, insertedComponents);
     * @returns {Object} resolved object of functions from function strings
     */
    function getFunctionProps$1(options) {
        if (options === void 0) { options = { jsonx: {} }; }
        var _a = options.allProps, allProps = _a === void 0 ? {} : _a, _b = options.jsonx, jsonx = _b === void 0 ? {} : _b;
        var getFunction = getFunctionFromProps$1.bind(this);
        var funcProps = jsonx.__functionProps;
        //Allowing for window functions
        if (funcProps) {
            Object.keys(funcProps).forEach(function (key) {
                if (typeof funcProps[key] === "string" &&
                    funcProps[key].indexOf("func:") !== -1) {
                    allProps[key] = getFunction({
                        propFunc: funcProps[key],
                        propBody: jsonx.__inline ? jsonx.__inline[key] : "",
                        jsonx: jsonx,
                        functionProperty: key
                    });
                }
            });
        }
        return allProps;
    }
    /**
     * Returns a resolved object that has React Components pulled from window.__jsonx_custom_elements
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} [options.allProps={}] - merged computed props, Object.assign({ key: renderIndex, }, thisprops, jsonx.props, asyncprops, windowprops, evalProps, insertedComponents);
     * @returns {Object} resolved object of with React Components from a window property window.__jsonx_custom_elements
     */
    function getWindowComponents$1(options) {
        var _this = this;
        if (options === void 0) { options = { jsonx: {} }; }
        var allProps = options.allProps, jsonx = options.jsonx;
        var windowComponents = jsonx.__windowComponents;
        //@ts-ignore
        var window = this.window || (typeof global !== "undefined" ? global : window).window || {};
        var windowFuncPrefix = "func:window.__jsonx_custom_elements";
        // if (jsonx.hasWindowComponent && window.__jsonx_custom_elements) {
        Object.keys(windowComponents).forEach(function (key) {
            var windowKEY = typeof windowComponents[key] === "string"
                ? windowComponents[key].replace(windowFuncPrefix + ".", "")
                : "";
            if (typeof windowComponents[key] === "string" &&
                windowComponents[key].indexOf(windowFuncPrefix) !== -1 &&
                typeof window.__jsonx_custom_elements[windowKEY] === "function") {
                var windowComponentElement = window.__jsonx_custom_elements[windowKEY];
                var windowComponentProps = allProps["__windowComponentProps"]
                    ? allProps["__windowComponentProps"]
                    : _this.props;
                allProps[key] = react.createElement(windowComponentElement, windowComponentProps, null);
            }
        });
        return allProps;
    }
    /**
     * Returns computed properties for React Components and any property that's prefixed with __ is a computedProperty
     * @param {Object} options
     * @param {Object} options.jsonx - Valid JSONX JSON
     * @param {Object} [options.resources={}] - object to use for asyncprops, usually a result of an asynchronous call
     * @param {Number} options.renderIndex - number used for React key prop
     * @param {function} [options.logError=console.error] - error logging function
     * @param {Object} [options.componentLibraries] - react components to render with JSONX
     * @param {Boolean} [options.useReduxState=true] - use redux props in this.props
     * @param {Boolean} [options.ignoreReduxPropsInComponentLibraries=true] - ignore redux props in this.props for component libraries, this is helpful incase these properties collide with component library element properties
     * @param {boolean} [options.debug=false] - use debug messages
     * @example
    const testJSONX = { component: 'div',
      props: { id: 'generatedJSONX', className: 'jsonx' },
      children: [ [Object] ],
      asyncprops: { auth: [Array], username: [Array] },
      __dangerouslyEvalProps: { getUsername: '(user={})=>user.name' },
      __dangerouslyInsertComponents: { myComponent: [Object] }
    const resources = {
      user: {
        name: 'jsonx',
        description: 'react withouth javascript',
      },
      stats: {
        logins: 102,
        comments: 3,
      },
      authentication: 'OAuth2',
    };
    const renderIndex = 1;
    getComputedProps.call({}, {
            jsonx: testJSONX,
            resources,
            renderIndex,
          });
    computedProps = { key: 1,
         id: 'generatedJSONX',
         className: 'jsonx',
         auth: 'OAuth2',
         username: 'jsonx',
         getUsername: [Function],
         myComponent:
          { '$$typeof': Symbol(react.element),
            type: 'p',
            key: '8',
            ref: null,
            props: [Object],
            _owner: null,
            _store: {} } } }
     *
     */
    function getComputedProps$2(options) {
        if (options === void 0) { options = {}; }
        // eslint-disable-next-line
        var _a = options.jsonx, jsonx = _a === void 0 ? {} : _a, _b = options.resources, resources = _b === void 0 ? {} : _b, renderIndex = options.renderIndex, _c = options.logError, logError = _c === void 0 ? console.error : _c, _d = options.useReduxState, useReduxState = _d === void 0 ? true : _d, _e = options.ignoreReduxPropsInComponentLibraries, ignoreReduxPropsInComponentLibraries = _e === void 0 ? true : _e, _f = options.disableRenderIndexKey, disableRenderIndexKey = _f === void 0 ? true : _f, debug = options.debug, _g = options.componentLibraries, componentLibraries = _g === void 0 ? {} : _g;
        try {
            var componentThisProp = jsonx.thisprops
                ? Object.assign({
                    __jsonx: {
                        _component: jsonx,
                        _resources: resources
                    }
                }, this.props, jsonx.props, 
                //@ts-ignore
                useReduxState &&
                    !jsonx.ignoreReduxProps &&
                    ignoreReduxPropsInComponentLibraries &&
                    jsonx.component &&
                    !componentLibraries[jsonx.component]
                    ? this.props && this.props.getState
                        ? this.props.getState()
                        : {}
                    : {})
                : undefined;
            var windowTraverse = typeof window !== "undefined" ? window : {};
            var asyncprops = jsonx.asyncprops
                ? getJSONXProps$1({
                    jsonx: jsonx,
                    propName: "asyncprops",
                    traverseObject: resources
                })
                : {};
            var resourceprops = jsonx.resourceprops
                ? getJSONXProps$1({
                    jsonx: jsonx,
                    propName: "resourceprops",
                    traverseObject: resources
                })
                : {};
            var windowprops = jsonx.windowprops
                ? getJSONXProps$1({
                    jsonx: jsonx,
                    propName: "windowprops",
                    traverseObject: windowTraverse
                })
                : {};
            var thisprops = jsonx.thisprops
                ? getJSONXProps$1({
                    jsonx: jsonx,
                    propName: "thisprops",
                    traverseObject: componentThisProp
                })
                : {};
            var thisstate = jsonx.thisstate
                ? getJSONXProps$1({
                    jsonx: jsonx,
                    propName: "thisstate",
                    traverseObject: this.state
                })
                : {};
            var thiscontext = jsonx.thiscontext
                ? getJSONXProps$1({
                    jsonx: jsonx,
                    propName: "thiscontext",
                    traverseObject: this || {}
                })
                : {};
            //allowing javascript injections
            var evalProps = jsonx.__dangerouslyEvalProps || jsonx.__dangerouslyBindEvalProps
                ? getEvalProps$1.call(this, { jsonx: jsonx })
                : {};
            var insertedComponents = jsonx.__dangerouslyInsertComponents
                ? getComponentProps$1.call(this, { jsonx: jsonx, resources: resources, debug: debug })
                : {};
            var insertedReactComponents = jsonx.__dangerouslyInsertReactComponents ||
                jsonx.__dangerouslyInsertJSONXComponents
                ? getReactComponentProps$1.call(this, { jsonx: jsonx, debug: debug })
                : {};
            var insertedComputedComponents = jsonx.__dangerouslyInsertFunctionComponents ||
                jsonx.__dangerouslyInsertClassComponents
                ? getReactComponents$1.call(this, { jsonx: jsonx, debug: debug })
                : {};
            var evalAllProps = jsonx.__dangerouslyEvalAllProps
                ? getEvalProps$1.call(this, { jsonx: jsonx })
                : {};
            var allProps = Object.assign({}, this.disableRenderIndexKey || disableRenderIndexKey
                ? {}
                : { key: renderIndex }, jsonx.props, thisprops, thisstate, thiscontext, resourceprops, asyncprops, windowprops, evalProps, insertedComponents, insertedReactComponents, insertedComputedComponents);
            var computedProps = Object.assign({}, allProps, jsonx.__functionProps
                ? getFunctionProps$1.call(this, { allProps: allProps, jsonx: jsonx })
                : {}, jsonx.__windowComponents
                ? getWindowComponents$1.call(this, { allProps: allProps, jsonx: jsonx })
                : {}, jsonx.__spreadComponent
                ? getChildrenComponents$1.call(this, { allProps: allProps, jsonx: jsonx })
                : {}, evalAllProps);
            if (jsonx.debug)
                console.debug({ jsonx: jsonx, computedProps: computedProps });
            return computedProps;
        }
        catch (e) {
            debug && logError(e, e.stack ? e.stack : "no stack");
            return null;
        }
    }

    var numeral$1 = createCommonjsModule(function (module) {
    /*! @preserve
     * numeral.js
     * version : 2.0.6
     * author : Adam Draper
     * license : MIT
     * http://adamwdraper.github.com/Numeral-js/
     */

    (function (global, factory) {
        if ( module.exports) {
            module.exports = factory();
        } else {
            (typeof global!=="undefined" ? global : window).numeral = factory();
        }
    }(commonjsGlobal, function () {
        /************************************
            Variables
        ************************************/

        var numeral,
            _,
            VERSION = '2.0.6',
            formats = {},
            locales = {},
            defaults = {
                currentLocale: 'en',
                zeroFormat: null,
                nullFormat: null,
                defaultFormat: '0,0',
                scalePercentBy100: true
            },
            options = {
                currentLocale: defaults.currentLocale,
                zeroFormat: defaults.zeroFormat,
                nullFormat: defaults.nullFormat,
                defaultFormat: defaults.defaultFormat,
                scalePercentBy100: defaults.scalePercentBy100
            };


        /************************************
            Constructors
        ************************************/

        // Numeral prototype object
        function Numeral(input, number) {
            this._input = input;

            this._value = number;
        }

        numeral = function(input) {
            var value,
                kind,
                unformatFunction,
                regexp;

            if (numeral.isNumeral(input)) {
                value = input.value();
            } else if (input === 0 || typeof input === 'undefined') {
                value = 0;
            } else if (input === null || _.isNaN(input)) {
                value = null;
            } else if (typeof input === 'string') {
                if (options.zeroFormat && input === options.zeroFormat) {
                    value = 0;
                } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {
                    value = null;
                } else {
                    for (kind in formats) {
                        regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;

                        if (regexp && input.match(regexp)) {
                            unformatFunction = formats[kind].unformat;

                            break;
                        }
                    }

                    unformatFunction = unformatFunction || numeral._.stringToNumber;

                    value = unformatFunction(input);
                }
            } else {
                value = Number(input)|| null;
            }

            return new Numeral(input, value);
        };

        // version number
        numeral.version = VERSION;

        // compare numeral object
        numeral.isNumeral = function(obj) {
            return obj instanceof Numeral;
        };

        // helper functions
        numeral._ = _ = {
            // formats numbers separators, decimals places, signs, abbreviations
            numberToFormat: function(value, format, roundingFunction) {
                var locale = locales[numeral.options.currentLocale],
                    negP = false,
                    optDec = false,
                    leadingCount = 0,
                    abbr = '',
                    trillion = 1000000000000,
                    billion = 1000000000,
                    million = 1000000,
                    thousand = 1000,
                    decimal = '',
                    neg = false,
                    abbrForce, // force abbreviation
                    abs,
                    int,
                    precision,
                    signed,
                    thousands,
                    output;

                // make sure we never format a null value
                value = value || 0;

                abs = Math.abs(value);

                // see if we should use parentheses for negative number or if we should prefix with a sign
                // if both are present we default to parentheses
                if (numeral._.includes(format, '(')) {
                    negP = true;
                    format = format.replace(/[\(|\)]/g, '');
                } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {
                    signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;
                    format = format.replace(/[\+|\-]/g, '');
                }

                // see if abbreviation is wanted
                if (numeral._.includes(format, 'a')) {
                    abbrForce = format.match(/a(k|m|b|t)?/);

                    abbrForce = abbrForce ? abbrForce[1] : false;

                    // check for space before abbreviation
                    if (numeral._.includes(format, ' a')) {
                        abbr = ' ';
                    }

                    format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');

                    if (abs >= trillion && !abbrForce || abbrForce === 't') {
                        // trillion
                        abbr += locale.abbreviations.trillion;
                        value = value / trillion;
                    } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {
                        // billion
                        abbr += locale.abbreviations.billion;
                        value = value / billion;
                    } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {
                        // million
                        abbr += locale.abbreviations.million;
                        value = value / million;
                    } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {
                        // thousand
                        abbr += locale.abbreviations.thousand;
                        value = value / thousand;
                    }
                }

                // check for optional decimals
                if (numeral._.includes(format, '[.]')) {
                    optDec = true;
                    format = format.replace('[.]', '.');
                }

                // break number and format
                int = value.toString().split('.')[0];
                precision = format.split('.')[1];
                thousands = format.indexOf(',');
                leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;

                if (precision) {
                    if (numeral._.includes(precision, '[')) {
                        precision = precision.replace(']', '');
                        precision = precision.split('[');
                        decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                    } else {
                        decimal = numeral._.toFixed(value, precision.length, roundingFunction);
                    }

                    int = decimal.split('.')[0];

                    if (numeral._.includes(decimal, '.')) {
                        decimal = locale.delimiters.decimal + decimal.split('.')[1];
                    } else {
                        decimal = '';
                    }

                    if (optDec && Number(decimal.slice(1)) === 0) {
                        decimal = '';
                    }
                } else {
                    int = numeral._.toFixed(value, 0, roundingFunction);
                }

                // check abbreviation again after rounding
                if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {
                    int = String(Number(int) / 1000);

                    switch (abbr) {
                        case locale.abbreviations.thousand:
                            abbr = locale.abbreviations.million;
                            break;
                        case locale.abbreviations.million:
                            abbr = locale.abbreviations.billion;
                            break;
                        case locale.abbreviations.billion:
                            abbr = locale.abbreviations.trillion;
                            break;
                    }
                }


                // format number
                if (numeral._.includes(int, '-')) {
                    int = int.slice(1);
                    neg = true;
                }

                if (int.length < leadingCount) {
                    for (var i = leadingCount - int.length; i > 0; i--) {
                        int = '0' + int;
                    }
                }

                if (thousands > -1) {
                    int = int.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + locale.delimiters.thousands);
                }

                if (format.indexOf('.') === 0) {
                    int = '';
                }

                output = int + decimal + (abbr ? abbr : '');

                if (negP) {
                    output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');
                } else {
                    if (signed >= 0) {
                        output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');
                    } else if (neg) {
                        output = '-' + output;
                    }
                }

                return output;
            },
            // unformats numbers separators, decimals places, signs, abbreviations
            stringToNumber: function(string) {
                var locale = locales[options.currentLocale],
                    stringOriginal = string,
                    abbreviations = {
                        thousand: 3,
                        million: 6,
                        billion: 9,
                        trillion: 12
                    },
                    abbreviation,
                    value,
                    regexp;

                if (options.zeroFormat && string === options.zeroFormat) {
                    value = 0;
                } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {
                    value = null;
                } else {
                    value = 1;

                    if (locale.delimiters.decimal !== '.') {
                        string = string.replace(/\./g, '').replace(locale.delimiters.decimal, '.');
                    }

                    for (abbreviation in abbreviations) {
                        regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\)|(\\' + locale.currency.symbol + ')?(?:\\))?)?$');

                        if (stringOriginal.match(regexp)) {
                            value *= Math.pow(10, abbreviations[abbreviation]);
                            break;
                        }
                    }

                    // check for negative number
                    value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;

                    // remove non numbers
                    string = string.replace(/[^0-9\.]+/g, '');

                    value *= Number(string);
                }

                return value;
            },
            isNaN: function(value) {
                return typeof value === 'number' && isNaN(value);
            },
            includes: function(string, search) {
                return string.indexOf(search) !== -1;
            },
            insert: function(string, subString, start) {
                return string.slice(0, start) + subString + string.slice(start);
            },
            reduce: function(array, callback /*, initialValue*/) {
                if (this === null) {
                    throw new TypeError('Array.prototype.reduce called on null or undefined');
                }

                if (typeof callback !== 'function') {
                    throw new TypeError(callback + ' is not a function');
                }

                var t = Object(array),
                    len = t.length >>> 0,
                    k = 0,
                    value;

                if (arguments.length === 3) {
                    value = arguments[2];
                } else {
                    while (k < len && !(k in t)) {
                        k++;
                    }

                    if (k >= len) {
                        throw new TypeError('Reduce of empty array with no initial value');
                    }

                    value = t[k++];
                }
                for (; k < len; k++) {
                    if (k in t) {
                        value = callback(value, t[k], k, t);
                    }
                }
                return value;
            },
            /**
             * Computes the multiplier necessary to make x >= 1,
             * effectively eliminating miscalculations caused by
             * finite precision.
             */
            multiplier: function (x) {
                var parts = x.toString().split('.');

                return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);
            },
            /**
             * Given a variable number of arguments, returns the maximum
             * multiplier that must be used to normalize an operation involving
             * all of them.
             */
            correctionFactor: function () {
                var args = Array.prototype.slice.call(arguments);

                return args.reduce(function(accum, next) {
                    var mn = _.multiplier(next);
                    return accum > mn ? accum : mn;
                }, 1);
            },
            /**
             * Implementation of toFixed() that treats floats more like decimals
             *
             * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
             * problems for accounting- and finance-related software.
             */
            toFixed: function(value, maxDecimals, roundingFunction, optionals) {
                var splitValue = value.toString().split('.'),
                    minDecimals = maxDecimals - (optionals || 0),
                    boundedPrecision,
                    optionalsRegExp,
                    power,
                    output;

                // Use the smallest precision value possible to avoid errors from floating point representation
                if (splitValue.length === 2) {
                  boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);
                } else {
                  boundedPrecision = minDecimals;
                }

                power = Math.pow(10, boundedPrecision);

                // Multiply up by precision, round accurately, then divide and use native toFixed():
                output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);

                if (optionals > maxDecimals - boundedPrecision) {
                    optionalsRegExp = new RegExp('\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');
                    output = output.replace(optionalsRegExp, '');
                }

                return output;
            }
        };

        // avaliable options
        numeral.options = options;

        // avaliable formats
        numeral.formats = formats;

        // avaliable formats
        numeral.locales = locales;

        // This function sets the current locale.  If
        // no arguments are passed in, it will simply return the current global
        // locale key.
        numeral.locale = function(key) {
            if (key) {
                options.currentLocale = key.toLowerCase();
            }

            return options.currentLocale;
        };

        // This function provides access to the loaded locale data.  If
        // no arguments are passed in, it will simply return the current
        // global locale object.
        numeral.localeData = function(key) {
            if (!key) {
                return locales[options.currentLocale];
            }

            key = key.toLowerCase();

            if (!locales[key]) {
                throw new Error('Unknown locale : ' + key);
            }

            return locales[key];
        };

        numeral.reset = function() {
            for (var property in defaults) {
                options[property] = defaults[property];
            }
        };

        numeral.zeroFormat = function(format) {
            options.zeroFormat = typeof(format) === 'string' ? format : null;
        };

        numeral.nullFormat = function (format) {
            options.nullFormat = typeof(format) === 'string' ? format : null;
        };

        numeral.defaultFormat = function(format) {
            options.defaultFormat = typeof(format) === 'string' ? format : '0.0';
        };

        numeral.register = function(type, name, format) {
            name = name.toLowerCase();

            if (this[type + 's'][name]) {
                throw new TypeError(name + ' ' + type + ' already registered.');
            }

            this[type + 's'][name] = format;

            return format;
        };


        numeral.validate = function(val, culture) {
            var _decimalSep,
                _thousandSep,
                _currSymbol,
                _valArray,
                _abbrObj,
                _thousandRegEx,
                localeData,
                temp;

            //coerce val to string
            if (typeof val !== 'string') {
                val += '';

                if (console.warn) {
                    console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);
                }
            }

            //trim whitespaces from either sides
            val = val.trim();

            //if val is just digits return true
            if (!!val.match(/^\d+$/)) {
                return true;
            }

            //if val is empty return false
            if (val === '') {
                return false;
            }

            //get the decimal and thousands separator from numeral.localeData
            try {
                //check if the culture is understood by numeral. if not, default it to current locale
                localeData = numeral.localeData(culture);
            } catch (e) {
                localeData = numeral.localeData(numeral.locale());
            }

            //setup the delimiters and currency symbol based on culture/locale
            _currSymbol = localeData.currency.symbol;
            _abbrObj = localeData.abbreviations;
            _decimalSep = localeData.delimiters.decimal;
            if (localeData.delimiters.thousands === '.') {
                _thousandSep = '\\.';
            } else {
                _thousandSep = localeData.delimiters.thousands;
            }

            // validating currency symbol
            temp = val.match(/^[^\d]+/);
            if (temp !== null) {
                val = val.substr(1);
                if (temp[0] !== _currSymbol) {
                    return false;
                }
            }

            //validating abbreviation symbol
            temp = val.match(/[^\d]+$/);
            if (temp !== null) {
                val = val.slice(0, -1);
                if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {
                    return false;
                }
            }

            _thousandRegEx = new RegExp(_thousandSep + '{2}');

            if (!val.match(/[^\d.,]/g)) {
                _valArray = val.split(_decimalSep);
                if (_valArray.length > 2) {
                    return false;
                } else {
                    if (_valArray.length < 2) {
                        return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx));
                    } else {
                        if (_valArray[0].length === 1) {
                            return ( !! _valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                        } else {
                            return ( !! _valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\d+$/));
                        }
                    }
                }
            }

            return false;
        };


        /************************************
            Numeral Prototype
        ************************************/

        numeral.fn = Numeral.prototype = {
            clone: function() {
                return numeral(this);
            },
            format: function(inputString, roundingFunction) {
                var value = this._value,
                    format = inputString || options.defaultFormat,
                    kind,
                    output,
                    formatFunction;

                // make sure we have a roundingFunction
                roundingFunction = roundingFunction || Math.round;

                // format based on value
                if (value === 0 && options.zeroFormat !== null) {
                    output = options.zeroFormat;
                } else if (value === null && options.nullFormat !== null) {
                    output = options.nullFormat;
                } else {
                    for (kind in formats) {
                        if (format.match(formats[kind].regexps.format)) {
                            formatFunction = formats[kind].format;

                            break;
                        }
                    }

                    formatFunction = formatFunction || numeral._.numberToFormat;

                    output = formatFunction(value, format, roundingFunction);
                }

                return output;
            },
            value: function() {
                return this._value;
            },
            input: function() {
                return this._input;
            },
            set: function(value) {
                this._value = Number(value);

                return this;
            },
            add: function(value) {
                var corrFactor = _.correctionFactor.call(null, this._value, value);

                function cback(accum, curr, currI, O) {
                    return accum + Math.round(corrFactor * curr);
                }

                this._value = _.reduce([this._value, value], cback, 0) / corrFactor;

                return this;
            },
            subtract: function(value) {
                var corrFactor = _.correctionFactor.call(null, this._value, value);

                function cback(accum, curr, currI, O) {
                    return accum - Math.round(corrFactor * curr);
                }

                this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;

                return this;
            },
            multiply: function(value) {
                function cback(accum, curr, currI, O) {
                    var corrFactor = _.correctionFactor(accum, curr);
                    return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);
                }

                this._value = _.reduce([this._value, value], cback, 1);

                return this;
            },
            divide: function(value) {
                function cback(accum, curr, currI, O) {
                    var corrFactor = _.correctionFactor(accum, curr);
                    return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);
                }

                this._value = _.reduce([this._value, value], cback);

                return this;
            },
            difference: function(value) {
                return Math.abs(numeral(this._value).subtract(value).value());
            }
        };

        /************************************
            Default Locale && Format
        ************************************/

        numeral.register('locale', 'en', {
            delimiters: {
                thousands: ',',
                decimal: '.'
            },
            abbreviations: {
                thousand: 'k',
                million: 'm',
                billion: 'b',
                trillion: 't'
            },
            ordinal: function(number) {
                var b = number % 10;
                return (~~(number % 100 / 10) === 1) ? 'th' :
                    (b === 1) ? 'st' :
                    (b === 2) ? 'nd' :
                    (b === 3) ? 'rd' : 'th';
            },
            currency: {
                symbol: '$'
            }
        });

        

    (function() {
            numeral.register('format', 'bps', {
                regexps: {
                    format: /(BPS)/,
                    unformat: /(BPS)/
                },
                format: function(value, format, roundingFunction) {
                    var space = numeral._.includes(format, ' BPS') ? ' ' : '',
                        output;

                    value = value * 10000;

                    // check for space before BPS
                    format = format.replace(/\s?BPS/, '');

                    output = numeral._.numberToFormat(value, format, roundingFunction);

                    if (numeral._.includes(output, ')')) {
                        output = output.split('');

                        output.splice(-1, 0, space + 'BPS');

                        output = output.join('');
                    } else {
                        output = output + space + 'BPS';
                    }

                    return output;
                },
                unformat: function(string) {
                    return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);
                }
            });
    })();


    (function() {
            var decimal = {
                base: 1000,
                suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
            },
            binary = {
                base: 1024,
                suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']
            };

        var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {
                return decimal.suffixes.indexOf(item) < 0;
            }));
            var unformatRegex = allSuffixes.join('|');
            // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)
            unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';

        numeral.register('format', 'bytes', {
            regexps: {
                format: /([0\s]i?b)/,
                unformat: new RegExp(unformatRegex)
            },
            format: function(value, format, roundingFunction) {
                var output,
                    bytes = numeral._.includes(format, 'ib') ? binary : decimal,
                    suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',
                    power,
                    min,
                    max;

                // check for space before
                format = format.replace(/\s?i?b/, '');

                for (power = 0; power <= bytes.suffixes.length; power++) {
                    min = Math.pow(bytes.base, power);
                    max = Math.pow(bytes.base, power + 1);

                    if (value === null || value === 0 || value >= min && value < max) {
                        suffix += bytes.suffixes[power];

                        if (min > 0) {
                            value = value / min;
                        }

                        break;
                    }
                }

                output = numeral._.numberToFormat(value, format, roundingFunction);

                return output + suffix;
            },
            unformat: function(string) {
                var value = numeral._.stringToNumber(string),
                    power,
                    bytesMultiplier;

                if (value) {
                    for (power = decimal.suffixes.length - 1; power >= 0; power--) {
                        if (numeral._.includes(string, decimal.suffixes[power])) {
                            bytesMultiplier = Math.pow(decimal.base, power);

                            break;
                        }

                        if (numeral._.includes(string, binary.suffixes[power])) {
                            bytesMultiplier = Math.pow(binary.base, power);

                            break;
                        }
                    }

                    value *= (bytesMultiplier || 1);
                }

                return value;
            }
        });
    })();


    (function() {
            numeral.register('format', 'currency', {
            regexps: {
                format: /(\$)/
            },
            format: function(value, format, roundingFunction) {
                var locale = numeral.locales[numeral.options.currentLocale],
                    symbols = {
                        before: format.match(/^([\+|\-|\(|\s|\$]*)/)[0],
                        after: format.match(/([\+|\-|\)|\s|\$]*)$/)[0]
                    },
                    output,
                    symbol,
                    i;

                // strip format of spaces and $
                format = format.replace(/\s?\$\s?/, '');

                // format the number
                output = numeral._.numberToFormat(value, format, roundingFunction);

                // update the before and after based on value
                if (value >= 0) {
                    symbols.before = symbols.before.replace(/[\-\(]/, '');
                    symbols.after = symbols.after.replace(/[\-\)]/, '');
                } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {
                    symbols.before = '-' + symbols.before;
                }

                // loop through each before symbol
                for (i = 0; i < symbols.before.length; i++) {
                    symbol = symbols.before[i];

                    switch (symbol) {
                        case '$':
                            output = numeral._.insert(output, locale.currency.symbol, i);
                            break;
                        case ' ':
                            output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);
                            break;
                    }
                }

                // loop through each after symbol
                for (i = symbols.after.length - 1; i >= 0; i--) {
                    symbol = symbols.after[i];

                    switch (symbol) {
                        case '$':
                            output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));
                            break;
                        case ' ':
                            output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));
                            break;
                    }
                }


                return output;
            }
        });
    })();


    (function() {
            numeral.register('format', 'exponential', {
            regexps: {
                format: /(e\+|e-)/,
                unformat: /(e\+|e-)/
            },
            format: function(value, format, roundingFunction) {
                var output,
                    exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',
                    parts = exponential.split('e');

                format = format.replace(/e[\+|\-]{1}0/, '');

                output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);

                return output + 'e' + parts[1];
            },
            unformat: function(string) {
                var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),
                    value = Number(parts[0]),
                    power = Number(parts[1]);

                power = numeral._.includes(string, 'e-') ? power *= -1 : power;

                function cback(accum, curr, currI, O) {
                    var corrFactor = numeral._.correctionFactor(accum, curr),
                        num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);
                    return num;
                }

                return numeral._.reduce([value, Math.pow(10, power)], cback, 1);
            }
        });
    })();


    (function() {
            numeral.register('format', 'ordinal', {
            regexps: {
                format: /(o)/
            },
            format: function(value, format, roundingFunction) {
                var locale = numeral.locales[numeral.options.currentLocale],
                    output,
                    ordinal = numeral._.includes(format, ' o') ? ' ' : '';

                // check for space before
                format = format.replace(/\s?o/, '');

                ordinal += locale.ordinal(value);

                output = numeral._.numberToFormat(value, format, roundingFunction);

                return output + ordinal;
            }
        });
    })();


    (function() {
            numeral.register('format', 'percentage', {
            regexps: {
                format: /(%)/,
                unformat: /(%)/
            },
            format: function(value, format, roundingFunction) {
                var space = numeral._.includes(format, ' %') ? ' ' : '',
                    output;

                if (numeral.options.scalePercentBy100) {
                    value = value * 100;
                }

                // check for space before %
                format = format.replace(/\s?\%/, '');

                output = numeral._.numberToFormat(value, format, roundingFunction);

                if (numeral._.includes(output, ')')) {
                    output = output.split('');

                    output.splice(-1, 0, space + '%');

                    output = output.join('');
                } else {
                    output = output + space + '%';
                }

                return output;
            },
            unformat: function(string) {
                var number = numeral._.stringToNumber(string);
                if (numeral.options.scalePercentBy100) {
                    return number * 0.01;
                }
                return number;
            }
        });
    })();


    (function() {
            numeral.register('format', 'time', {
            regexps: {
                format: /(:)/,
                unformat: /(:)/
            },
            format: function(value, format, roundingFunction) {
                var hours = Math.floor(value / 60 / 60),
                    minutes = Math.floor((value - (hours * 60 * 60)) / 60),
                    seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));

                return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);
            },
            unformat: function(string) {
                var timeArray = string.split(':'),
                    seconds = 0;

                // turn hours and minutes into seconds and add them all up
                if (timeArray.length === 3) {
                    // hours
                    seconds = seconds + (Number(timeArray[0]) * 60 * 60);
                    // minutes
                    seconds = seconds + (Number(timeArray[1]) * 60);
                    // seconds
                    seconds = seconds + Number(timeArray[2]);
                } else if (timeArray.length === 2) {
                    // minutes
                    seconds = seconds + (Number(timeArray[0]) * 60);
                    // seconds
                    seconds = seconds + Number(timeArray[1]);
                }
                return Number(seconds);
            }
        });
    })();

    return numeral;
    }));
    });

    var fs$1 = {};

    var scopedEval$1 = eval;
    var templateCache$1 = new Map();
    /**
     * returns a valid jsonx.children property
     * @param {Object} options
     * @param {Object} [options.jsonx ={}]- Valid JSONX JSON
     * @param {Object} [options.props=options.jsonx.children] - Props to pull children  Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops)
     * @returns {Object[]|String} returns a valid jsonx.children property that's either an array of JSONX objects or a string
     * @example
     * const sampleJSONX = {
      component: 'div',
      props: {
        id: 'generatedJSONX',
        className:'jsonx',
      },
      children: [
        {
          component: 'p',
          props: {
            style: {
              color: 'red',
            },
          },
          children:'hello world',
        },
        {
          component: 'div',
          children: [
            {
              component: 'ul',
              children: [
                {
                  component: 'li',
                  children:'list',
                },
              ],
            },
          ],
        },
      ],
    };
    const JSONXChildren = getChildrenProperty({ jsonx: sampleJSONX, }); //=> [ [jsonx Object],[jsonx Object]]
    const JSONXChildrenPTag = getChildrenProperty({ jsonx: sampleJSONX.children[ 0 ], }); //=>hello world
     */
    function getChildrenProperty$1(options) {
        if (options === void 0) { options = {}; }
        var _a = options.jsonx, jsonx = _a === void 0 ? {} : _a;
        var props = options.props || jsonx.props || {};
        if (typeof props._children !== "undefined" /* && !jsonx.children */) {
            if (Array.isArray(props._children) ||
                typeof props._children === "string" ||
                typeof props._children === "number") {
                return props._children;
            }
            else {
                return jsonx.children;
            }
        }
        else if (typeof jsonx.children === "undefined") {
            if (props &&
                props.children &&
                (typeof props.children !== "undefined" || Array.isArray(props.children))) {
                return props.children;
            }
            else {
                return null;
            }
        }
        else {
            return jsonx.children;
        }
    }
    /**
     * Used to pass properties down to child components if passprops is set to true
     * @param {Object} options
     * @param {Object} [options.jsonx ={}] - Valid JSONX JSON
     * @param {Object} [options.childjsonx ={}] - Valid JSONX JSON
     * @param {Number} options.renderIndex - React key property
     * @param {Object} [options.props=options.jsonx.props] - Props to pull children  Object.assign(jsonx.props,jsonx.asyncprops,jsonx.thisprops,jsonx.windowprops)
     * @returns {Object|String} returns a valid  Valid JSONX Child object or a string
     */
    function getChildrenProps$1(options) {
        if (options === void 0) { options = {}; }
        var _a = options.jsonx, jsonx = _a === void 0 ? {} : _a, childjsonx = options.childjsonx, renderIndex = options.renderIndex;
        var props = options.props || jsonx.props || {};
        return jsonx.passprops && childjsonx && typeof childjsonx === "object"
            ? Object.assign({}, childjsonx, {
                props: Object.assign({}, props, (childjsonx.thisprops && childjsonx.thisprops.style) || // this is to make sure when you bind props, if you've defined props in a dynamic property, to not use bind props to  remove passing down styles
                    (childjsonx.asyncprops && childjsonx.asyncprops.style) ||
                    (childjsonx.windowprops && childjsonx.windowprops.style)
                    ? {}
                    : {
                        style: {}
                    }, childjsonx.props, 
                //@ts-ignore
                typeof this !== "undefined" || (this && this.disableRenderIndexKey)
                    ? {}
                    : { key: typeof renderIndex !== "undefined"
                            ? renderIndex + Math.random()
                            : Math.random()
                    })
            })
            : childjsonx;
    }
    function fetchJSONSync$1(path, options) {
        try {
            var config_1 = __assign({ method: "GET", headers: [] }, options);
            var request_1 = new XMLHttpRequest();
            request_1.open(config_1 && config_1.method || "GET", path, false); // `false` makes the request synchronous
            if (config_1.headers) {
                Object.keys(config_1.headers).forEach(function (header) {
                    request_1.setRequestHeader(header, config_1.headers[header]);
                });
            }
            request_1.send(config_1.body ? JSON.stringify(config_1.body) : undefined);
            if (request_1.status !== 200) {
                throw new Error(request_1.responseText);
            }
            else
                return request_1.responseText;
        }
        catch (e) {
            throw e;
        }
    }
    function getChildrenTemplate$1(template) {
        var cachedTemplate = templateCache$1.get(template);
        if (cachedTemplate) {
            return cachedTemplate;
        }
        else if (typeof window !== "undefined" &&
            typeof window.XMLHttpRequest === "function" &&
            !fs$1.readFileSync) {
            var jsFile = fetchJSONSync$1(template);
            var jsonxModule = scopedEval$1("(" + jsFile + ")");
            templateCache$1.set(template, jsonxModule);
            return jsonxModule;
        }
        else if (typeof template === "string") {
            var jsFile = fs$1.readFileSync(path.resolve(template)).toString();
            var jsonxModule = scopedEval$1("(" + jsFile + ")");
            // console.log({jsonxModule})
            templateCache$1.set(template, jsonxModule);
            // console.log({ templateCache });
            return jsonxModule;
        }
        return null;
    }
    /**
     * returns React Child Elements via JSONX
     * @param {*} options
     * @property {object} this - options for getReactElementFromJSONX
     * @property {Object} [this.componentLibraries] - react components to render with JSONX
     * @property {boolean} [this.debug=false] - use debug messages
     * @property {function} [this.logError=console.error] - error logging function
     * @property {string[]} [this.boundedComponents=[]] - list of components that require a bound this context (usefult for redux router)
     */
    function getJSONXChildren$2(options) {
        var _this = this;
        if (options === void 0) { options = { jsonx: {} }; }
        // eslint-disable-next-line
        var jsonx = options.jsonx, resources = options.resources, renderIndex = options.renderIndex, _a = options.logError, logError = _a === void 0 ? console.error : _a;
        try {
            var context_1 = this || {};
            var props_1 = options && options.props
                ? options.props
                : jsonx && jsonx.props
                    ? jsonx.props
                    : {};
            if (!jsonx)
                return null;
            jsonx.children = getChildrenProperty$1({ jsonx: jsonx, props: props_1 });
            props_1._children = undefined;
            delete props_1._children;
            if (jsonx.___template)
                jsonx.children = [getChildrenTemplate$1(jsonx.___template)];
            else if (typeof jsonx.children === 'undefined' || jsonx.children === null)
                return undefined;
            else if (jsonx.children && jsonx.___stringifyChildren)
                jsonx.children = JSON.stringify.apply(null, [jsonx.children, null, 2]);
            //TODO: fix passing applied params
            else if (jsonx.children && jsonx.___toStringChildren)
                jsonx.children = jsonx.children.toString();
            else if (jsonx.children && jsonx.___toNumeral)
                jsonx.children = numeral$1(jsonx.children).format(jsonx.___toNumeral);
            else if (jsonx.children && jsonx.___JSDatetoLuxonString)
                jsonx.children = luxon.DateTime.fromJSDate(jsonx.children).toFormat(jsonx.___JSDatetoLuxonString);
            else if (jsonx.children && jsonx.___ISOtoLuxonString)
                jsonx.children = luxon.DateTime.fromISO(jsonx.children, {
                    zone: jsonx.___FromLuxonTimeZone
                }).toFormat(jsonx.___ISOtoLuxonString);
            if (typeof jsonx.children === 'string')
                return jsonx.children;
            var children = jsonx.children && Array.isArray(jsonx.children)
                ? jsonx.children
                    .map(function (childjsonx) {
                    return getReactElementFromJSONX$1.call(context_1, getChildrenProps$1.call(_this, { jsonx: jsonx, childjsonx: childjsonx, props: props_1, renderIndex: renderIndex }), resources);
                })
                    .filter(function (child) { return child !== null; })
                : jsonx.children;
            return children;
        }
        catch (e) {
            this && this.debug && logError(e, e.stack ? e.stack : "no stack");
            return null;
        }
    }

    // import React, { createElement, } from 'react';
    var createElement$1 = react.createElement;
    var componentMap$3 = componentMap$2, getComponentFromMap$3 = getComponentFromMap$2, getBoundedComponents$3 = getBoundedComponents$2, DynamicComponent$3 = DynamicComponent$2, FormComponent$3 = FormComponent$2;
    var getComputedProps$3 = getComputedProps$2;
    var getJSONXChildren$3 = getJSONXChildren$2;
    var displayComponent$3 = displayComponent$2;
    var renderIndex$1 = 0;
    /**
     * Use React.createElement and JSONX JSON to create React elements
     * @example
     * // Uses react to create the equivalent JSX <myComponent style={{color:blue}}>hello world</myComponent>
     * jsonx.getReactElementFromJSONX({component:'myCompnent',props:{style:{color:'blue'}},children:'hello world'})
     * @param {object} jsonx - any valid JSONX JSON object
     * @param {object} resources - any additional resource used for asynchronous properties
     * @property {object} this - options for getReactElementFromJSONX
     * @property {Object} [this.componentLibraries] - react components to render with JSONX
     * @property {boolean} [this.debug=false] - use debug messages
     * @property {boolean} [this.returnJSON=false] - return json object of {type,props,children} instead of react element
     * @property {boolean} [this.disableRenderIndexKey=false] - disables auto assign a key prop
     * @property {function} [this.logError=console.error] - error logging function
     * @property {string[]} [this.boundedComponents=[]] - list of components that require a bound this context (usefult for redux router)
     * @returns {function} React element via React.createElement
     */
    function getReactElementFromJSONX$1(jsonx, resources) {
        if (resources === void 0) { resources = {}; }
        // eslint-disable-next-line
        var _a = this || {}, _b = _a.componentLibraries, componentLibraries = _b === void 0 ? {} : _b, _c = _a.debug, debug = _c === void 0 ? false : _c, _d = _a.returnJSON, returnJSON = _d === void 0 ? false : _d, _e = _a.logError, logError = _e === void 0 ? console.error : _e, _f = _a.boundedComponents, boundedComponents = _f === void 0 ? [] : _f, _g = _a.disableRenderIndexKey, disableRenderIndexKey = _g === void 0 ? true : _g;
        // const componentLibraries = this.componentLibraries;
        if (!jsonx)
            return null;
        if (jsonx.type)
            jsonx.component = jsonx.type;
        if (validSimpleJSONXSyntax$1(jsonx))
            jsonx = simpleJSONXSyntax$1(jsonx);
        if (!jsonx || !jsonx.component)
            return createElement$1("span", {}, debug ? "Error: Missing Component Object" : "");
        try {
            var components = Object.assign({ DynamicComponent: DynamicComponent$3.bind(this) }, { FormComponent: FormComponent$3.bind(this) }, componentMap$3, this.reactComponents);
            var reactComponents = boundedComponents.length
                ? getBoundedComponents$3.call(this, {
                    boundedComponents: boundedComponents,
                    reactComponents: components
                })
                : components;
            renderIndex$1++;
            var element = getComponentFromMap$3({
                jsonx: jsonx,
                reactComponents: reactComponents,
                componentLibraries: componentLibraries,
                debug: debug,
                logError: logError
            });
            var props = getComputedProps$3.call(this, {
                jsonx: jsonx,
                resources: resources,
                renderIndex: renderIndex$1,
                componentLibraries: componentLibraries,
                debug: debug,
                logError: logError,
                disableRenderIndexKey: disableRenderIndexKey
            });
            var displayElement = jsonx.comparisonprops
                ? displayComponent$3.call(this, {
                    jsonx: jsonx,
                    props: props,
                    renderIndex: renderIndex$1,
                    componentLibraries: componentLibraries,
                    debug: debug
                })
                : true;
            if (displayElement) {
                var children = getJSONXChildren$3.call(this, {
                    jsonx: jsonx,
                    props: props,
                    resources: resources,
                    renderIndex: renderIndex$1
                });
                //@ts -ignore
                if (returnJSON)
                    return { type: element, props: props, children: children };
                else if (jsonx.test)
                    return JSON.stringify({ element: element, props: props, children: children }, null, 2);
                //TODO: Fix
                else
                    return createElement$1(element, props, children);
            }
            else {
                return null;
            }
        }
        catch (e) {
            if (debug) {
                logError({ jsonx: jsonx, resources: resources }, "getReactElementFromJSONX this", this);
                logError(e, e.stack ? e.stack : "no stack");
            }
            throw e;
        }
    }
    var getRenderedJSON$1 = getReactElementFromJSONX$1;

    exports.ReactDOM = ReactDOM;
    exports.JSONX = getReactElementFromJSONX$1;
    exports.React = react;
    exports.ViewXApp = ViewXApp;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=viewx.vxa.umd.js.map
